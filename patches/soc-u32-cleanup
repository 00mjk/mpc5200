Bottom: 712e50cffa0ff77879540eb82922c62d31493ebd
Top:    70e3db855cfd244e68490bd8e3efadb5acb5ab4a
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-05-22 11:28:21 -0400

Clean up ASOC functions to support 32b values instead of 16b

Clean up ASOC functions to support 32b values instead of 16b

Signed-off-by: Jon Smirl <jonsmirl@gmail.com>















---

diff --git a/include/sound/soc.h b/include/sound/soc.h
index cf6111d..0477e99 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -215,10 +215,10 @@ void snd_soc_jack_free_gpios(struct snd_soc_jack *jack, int count,
 #endif
 
 /* codec register bit access */
-int snd_soc_update_bits(struct snd_soc_codec *codec, unsigned short reg,
-				unsigned short mask, unsigned short value);
-int snd_soc_test_bits(struct snd_soc_codec *codec, unsigned short reg,
-				unsigned short mask, unsigned short value);
+int snd_soc_update_bits(struct snd_soc_codec *codec, uint reg,
+				uint mask, uint value);
+int snd_soc_test_bits(struct snd_soc_codec *codec, uint reg,
+				uint mask, uint value);
 
 int snd_soc_new_ac97_codec(struct snd_soc_codec *codec,
 	struct snd_ac97_bus_ops *ops, int num);
@@ -359,8 +359,8 @@ struct snd_soc_codec {
 	hw_write_t hw_write;
 	hw_read_t hw_read;
 	void *reg_cache;
-	short reg_cache_size;
-	short reg_cache_step;
+	uint reg_cache_size;
+	uint reg_cache_step;
 
 	/* dapm */
 	u32 pop_time;
@@ -492,10 +492,10 @@ struct soc_mixer_control {
 
 /* enumerated kcontrol */
 struct soc_enum {
-	unsigned short reg;
-	unsigned short reg2;
-	unsigned char shift_l;
-	unsigned char shift_r;
+	unsigned int reg;
+	unsigned int reg2;
+	unsigned int shift_l;
+	unsigned int shift_r;
 	unsigned int max;
 	unsigned int mask;
 	const char **texts;
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index 4aa8e2d..bad9d88 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -1257,11 +1257,11 @@ EXPORT_SYMBOL_GPL(snd_soc_free_ac97_codec);
  *
  * Returns 1 for change else 0.
  */
-int snd_soc_update_bits(struct snd_soc_codec *codec, unsigned short reg,
-				unsigned short mask, unsigned short value)
+int snd_soc_update_bits(struct snd_soc_codec *codec, u32 reg,
+				u32 mask, u32 value)
 {
 	int change;
-	unsigned short old, new;
+	u32 old, new;
 
 	mutex_lock(&io_mutex);
 	old = snd_soc_read(codec, reg);
@@ -1287,11 +1287,11 @@ EXPORT_SYMBOL_GPL(snd_soc_update_bits);
  *
  * Returns 1 for change else 0.
  */
-int snd_soc_test_bits(struct snd_soc_codec *codec, unsigned short reg,
-				unsigned short mask, unsigned short value)
+int snd_soc_test_bits(struct snd_soc_codec *codec, u32 reg,
+				u32 mask, u32 value)
 {
 	int change;
-	unsigned short old, new;
+	u32 old, new;
 
 	mutex_lock(&io_mutex);
 	old = snd_soc_read(codec, reg);
@@ -1577,7 +1577,7 @@ int snd_soc_get_enum_double(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	unsigned short val, bitmask;
+	u32 val, bitmask;
 
 	for (bitmask = 1; bitmask < e->max; bitmask <<= 1)
 		;
@@ -1606,8 +1606,7 @@ int snd_soc_put_enum_double(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	unsigned short val;
-	unsigned short mask, bitmask;
+	u32 val, mask, bitmask;
 
 	for (bitmask = 1; bitmask < e->max; bitmask <<= 1)
 		;
@@ -1949,7 +1948,7 @@ int snd_soc_put_volsw_2r(struct snd_kcontrol *kcontrol,
 	unsigned int mask = (1 << fls(max)) - 1;
 	unsigned int invert = mc->invert;
 	int err;
-	unsigned short val, val2, val_mask;
+	u32 val, val2, val_mask;
 
 	val_mask = mask << shift;
 	val = (ucontrol->value.integer.value[0] & mask);
@@ -2014,12 +2013,12 @@ int snd_soc_get_volsw_s8(struct snd_kcontrol *kcontrol,
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 	unsigned int reg = mc->reg;
 	int min = mc->min;
-	int val = snd_soc_read(codec, reg);
+	uint val = snd_soc_read(codec, reg);
 
 	ucontrol->value.integer.value[0] =
-		((signed char)(val & 0xff))-min;
+		((signed char)(val & 0xff)) - min;
 	ucontrol->value.integer.value[1] =
-		((signed char)((val >> 8) & 0xff))-min;
+		((signed char)((val >> 8) & 0xff)) - min;
 	return 0;
 }
 EXPORT_SYMBOL_GPL(snd_soc_get_volsw_s8);
@@ -2041,10 +2040,10 @@ int snd_soc_put_volsw_s8(struct snd_kcontrol *kcontrol,
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 	unsigned int reg = mc->reg;
 	int min = mc->min;
-	unsigned short val;
+	uint val;
 
-	val = (ucontrol->value.integer.value[0]+min) & 0xff;
-	val |= ((ucontrol->value.integer.value[1]+min) & 0xff) << 8;
+	val = (ucontrol->value.integer.value[0] + min) & 0xff;
+	val |= ((ucontrol->value.integer.value[1] + min) & 0xff) << 8;
 
 	return snd_soc_update_bits(codec, reg, 0xffff, val);
 }
diff --git a/sound/soc/soc-dapm.c b/sound/soc/soc-dapm.c
index 39a63f9..c1222fa 100644
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@ -164,7 +164,7 @@ static void dapm_set_path_status(struct snd_soc_dapm_widget *w,
 	break;
 	case snd_soc_dapm_mux: {
 		struct soc_enum *e = (struct soc_enum *)w->kcontrols[i].private_value;
-		int val, item, bitmask;
+		uint val, item, bitmask;
 
 		for (bitmask = 1; bitmask < e->max; bitmask <<= 1)
 		;
@@ -267,8 +267,8 @@ static int dapm_connect_mixer(struct snd_soc_codec *codec,
 /* update dapm codec register bits */
 static int dapm_update_bits(struct snd_soc_dapm_widget *widget)
 {
-	int change, power;
-	unsigned short old, new;
+	uint change, power;
+	uint old, new;
 	struct snd_soc_codec *codec = widget->codec;
 
 	/* check for valid widgets */
@@ -282,7 +282,7 @@ static int dapm_update_bits(struct snd_soc_dapm_widget *widget)
 
 	power = widget->power;
 	if (widget->invert)
-		power = (power ? 0:1);
+		power = (power ? 0 : 1);
 
 	old = snd_soc_read(codec, widget->reg);
 	new = (old & ~(0x1 << widget->shift)) | (power << widget->shift);
@@ -555,7 +555,7 @@ static int is_connected_input_ep(struct snd_soc_dapm_widget *widget)
 int dapm_reg_event(struct snd_soc_dapm_widget *w,
 		   struct snd_kcontrol *kcontrol, int event)
 {
-	unsigned int val;
+	uint val;
 
 	if (SND_SOC_DAPM_EVENT_ON(event))
 		val = w->on_val;
@@ -947,8 +947,8 @@ static int dapm_mux_update_power(struct snd_soc_dapm_widget *widget,
 
 /* test and update the power status of a mixer or switch widget */
 static int dapm_mixer_update_power(struct snd_soc_dapm_widget *widget,
-				   struct snd_kcontrol *kcontrol, int reg,
-				   int val_mask, int val, int invert)
+				   struct snd_kcontrol *kcontrol, uint reg,
+				   uint val_mask, uint val, uint invert)
 {
 	struct snd_soc_dapm_path *path;
 	int found = 0;
@@ -970,10 +970,10 @@ static int dapm_mixer_update_power(struct snd_soc_dapm_widget *widget,
 		found = 1;
 		if (val)
 			/* new connection */
-			path->connect = invert ? 0:1;
+			path->connect = invert ? 0 : 1;
 		else
 			/* old connection must be powered down */
-			path->connect = invert ? 1:0;
+			path->connect = invert ? 1 : 0;
 		break;
 	}
 
@@ -1436,7 +1436,7 @@ int snd_soc_dapm_get_enum_double(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_dapm_widget *widget = snd_kcontrol_chip(kcontrol);
 	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	unsigned short val, bitmask;
+	uint val, bitmask;
 
 	for (bitmask = 1; bitmask < e->max; bitmask <<= 1)
 		;
@@ -1464,8 +1464,8 @@ int snd_soc_dapm_put_enum_double(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_dapm_widget *widget = snd_kcontrol_chip(kcontrol);
 	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	unsigned short val, mux;
-	unsigned short mask, bitmask;
+	uint val, mux;
+	uint mask, bitmask;
 	int ret = 0;
 
 	for (bitmask = 1; bitmask < e->max; bitmask <<= 1)
