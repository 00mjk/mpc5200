Bottom: 7090f3c8e5cf61768300de4d78ea10e18b3f1c24
Top:    dc7d3cdf9cb19b246951ea3b2dd1f5cd4ab45098
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-17 20:45:40 -0400

Fabric bindings for STAC9766 on the Efika


---

diff --git a/arch/powerpc/platforms/52xx/efika.c b/arch/powerpc/platforms/52xx/efika.c
index a2068fa..c7a6a48 100644
--- a/arch/powerpc/platforms/52xx/efika.c
+++ b/arch/powerpc/platforms/52xx/efika.c
@@ -211,12 +211,18 @@ static int __init efika_probe(void)
 	return 1;
 }
 
+static void __init efika_declare_platform_devices(void)
+{
+	mpc52xx_declare_of_platform_devices();
+	platform_device_register_simple("efika-audio-fabric", 0, NULL, 0);
+}
+
 define_machine(efika)
 {
 	.name			= EFIKA_PLATFORM_NAME,
 	.probe			= efika_probe,
 	.setup_arch		= efika_setup_arch,
-	.init			= mpc52xx_declare_of_platform_devices,
+	.init			= efika_declare_platform_devices,
 	.show_cpuinfo		= efika_show_cpuinfo,
 	.init_IRQ		= mpc52xx_init_irq,
 	.get_irq		= mpc52xx_get_irq,
diff --git a/include/sound/soc-of-simple.h b/include/sound/soc-of-simple.h
index dc979be..9fea23e 100644
--- a/include/sound/soc-of-simple.h
+++ b/include/sound/soc-of-simple.h
@@ -16,12 +16,13 @@ int of_snd_soc_register_codec(struct snd_soc_codec_device *codec_dev,
 			      void *codec_data, struct snd_soc_dai *dai,
 			      struct device_node *node);
 
-int of_snd_soc_register_platform(struct snd_soc_platform *platform,
-				 struct device_node *node,
+int of_snd_soc_register_cpu_dai(struct device_node *node,
 				 struct snd_soc_dai *cpu_dai);
 
-#endif
+int of_snd_soc_register_platform(struct snd_soc_platform *platform);
+
+int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops);
 
-void of_snd_soc_register_machine(char *name, struct snd_soc_ops *ops);
+#endif
 
 #endif /* _INCLUDE_SOC_OF_H_ */
diff --git a/sound/soc/codecs/stac9766.c b/sound/soc/codecs/stac9766.c
index 2f4f2f8..79beee7 100644
--- a/sound/soc/codecs/stac9766.c
+++ b/sound/soc/codecs/stac9766.c
@@ -25,6 +25,7 @@
 #include <sound/pcm_params.h>
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
+#include <sound/soc-of-simple.h>
 
 #include "stac9766.h"
 
@@ -242,7 +243,7 @@ unsigned int stac9766_ac97_read(struct snd_soc_codec *codec,
 {
 	u16 val = 0, *cache = codec->reg_cache;
 
-	if (reg/2 > ARRAY_SIZE(stac9766_reg))
+	if (reg / 2 > ARRAY_SIZE(stac9766_reg))
 		return -EIO;
 
 	if (reg == AC97_RESET || reg == AC97_GPIO_STATUS || AC97_INT_PAGING ||
@@ -252,8 +253,8 @@ unsigned int stac9766_ac97_read(struct snd_soc_codec *codec,
 		printk("stac9766_ac97_read actual reg %02x val %04x\n", reg, val);
 		return val;
 	}
-	printk("stac9766_ac97_read cache reg %02x val %04x\n", reg, cache[reg/2]);
-	return cache[reg/2];
+	printk("stac9766_ac97_read cache reg %02x val %04x\n", reg, cache[reg / 2]);
+	return cache[reg / 2];
 }
 
 int stac9766_ac97_write(struct snd_soc_codec *codec, unsigned int reg,
@@ -262,11 +263,11 @@ int stac9766_ac97_write(struct snd_soc_codec *codec, unsigned int reg,
 	u16 *cache = codec->reg_cache;
 
 	printk("stac9766_ac97_write reg %02x val %04x\n", reg, val);
-	if (reg/2 > ARRAY_SIZE(stac9766_reg))
+	if (reg / 2 > ARRAY_SIZE(stac9766_reg))
 		return -EIO;
 
 	soc_ac97_ops.write(codec->ac97, reg, val);
-	cache[reg/2] = val;
+	cache[reg / 2] = val;
 	return 0;
 }
 
@@ -420,6 +421,7 @@ static int stac9766_codec_probe(struct platform_device *pdev)
 	int ret = 0;
 
 	printk(KERN_INFO "STAC9766 SoC Audio Codec %s\n", STAC9766_VERSION);
+	printk("private_data is %p\n", socdev);
 
 	socdev->card->codec = kzalloc(sizeof(struct snd_soc_codec),
 				      GFP_KERNEL);
@@ -449,6 +451,7 @@ static int stac9766_codec_probe(struct platform_device *pdev)
 	ret = snd_soc_new_ac97_codec(codec, &soc_ac97_ops, 0);
 	if (ret < 0)
 		goto codec_err;
+	printk("private_dats get %p\n", codec->ac97->private_data);
 
 	/* register pcms */
 	ret = snd_soc_new_pcms(socdev, SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1);
@@ -513,7 +516,37 @@ struct snd_soc_codec_device soc_codec_dev_stac9766 = {
 };
 EXPORT_SYMBOL_GPL(soc_codec_dev_stac9766);
 
+static int __init stac9766_probe(struct platform_device *pdev)
+{
+#if defined(CONFIG_SND_SOC_OF_SIMPLE)
+	/* Tell the of_soc helper about this codec */
+	of_snd_soc_register_codec(&soc_codec_dev_stac9766, pdev->dev.archdata.of_node, stac9766_dai,
+				  pdev->dev.archdata.of_node);
+#endif
+	return 0;
+}
+
+static struct platform_driver stac9766_driver = {
+	.probe	= stac9766_probe,
+	.driver	= {
+		.name	= "stac9766",
+	},
+};
+
+static __init int stac9766_driver_init(void)
+{
+
+	snd_soc_register_dai(stac9766_dai);
+	return platform_driver_register(&stac9766_driver);
+}
+
+static __exit void stac9766_driver_exit(void)
+{
+}
+
+module_init(stac9766_driver_init);
+module_exit(stac9766_driver_exit);
 
-MODULE_DESCRIPTION("ASoC STAC9766 driver");
-MODULE_AUTHOR("Jon Smirl");
+MODULE_DESCRIPTION("ASoC stac9766 driver");
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
 MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/tas5504.c b/sound/soc/codecs/tas5504.c
index 6ac3289..ae5813e 100644
--- a/sound/soc/codecs/tas5504.c
+++ b/sound/soc/codecs/tas5504.c
@@ -820,9 +820,11 @@ static int tas5504_i2c_probe(struct i2c_client *client,
 	INIT_LIST_HEAD(&priv->codec.dapm_widgets);
 	INIT_LIST_HEAD(&priv->codec.dapm_paths);
 
+#if defined(CONFIG_SND_SOC_OF_SIMPLE)
 	/* Tell the of_soc helper about this codec */
 	of_snd_soc_register_codec(&tas5504_soc_codec_dev, priv, &tas5504_dai,
 				  client->dev.archdata.of_node);
+#endif
 
 	dev_dbg(&client->dev, "I2C device initialized\n");
 	return 0;
diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index 16a1e28..0926492 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -53,9 +53,9 @@ config SND_SOC_MPC5200_AC97
 	  Say Y here to support the MPC5200 PSCs in AC97 mode.
 
 config SND_MPC52xx_SOC_EFIKA
-	tristate "SoC AC97 Audio support for bbplan Efika and STAC9722"
-	depends on SND_MPC52xx_SOC && PPC_EFIKA
-	select SND_MPC52xx_SOC_AC97
+	tristate "SoC AC97 Audio support for bbplan Efika and STAC9766"
+	depends on PPC_EFIKA
+	select SND_SOC_MPC5200_AC97
 	select SND_SOC_STAC9766
 	help
 	  Say Y if you want to add support for sound on the Efika.
diff --git a/sound/soc/fsl/Makefile b/sound/soc/fsl/Makefile
index 70c44bf..e3fd761 100644
--- a/sound/soc/fsl/Makefile
+++ b/sound/soc/fsl/Makefile
@@ -19,3 +19,5 @@ obj-$(CONFIG_SND_SOC_MPC5200_AC97) += mpc5200_psc_ac97.o
 snd_soc_dspeak01_fabric-objs := dspeak01_fabric.o
 
 obj-$(CONFIG_SND_MPC52xx_SOC_DSPEAK01) += snd_soc_dspeak01_fabric.o
+obj-$(CONFIG_SND_MPC52xx_SOC_EFIKA) += efika-audio-fabric.o
+
diff --git a/sound/soc/fsl/dspeak01_fabric.c b/sound/soc/fsl/dspeak01_fabric.c
index bd35a14..da65761 100644
--- a/sound/soc/fsl/dspeak01_fabric.c
+++ b/sound/soc/fsl/dspeak01_fabric.c
@@ -113,7 +113,7 @@ static int __devinit dspeak01_fabric_probe(struct of_device *op,
 	if (!fabric.clock)
 		return -ENODEV;
 
-	of_snd_soc_register_machine("DSPEAK01", &dspeak01_fabric_ops);
+	of_snd_soc_register_fabric("DSPEAK01", &dspeak01_fabric_ops);
 	return 0;
 }
 
diff --git a/sound/soc/fsl/efika-audio-fabric.c b/sound/soc/fsl/efika-audio-fabric.c
new file mode 100644
index 0000000..c880df8
--- /dev/null
+++ b/sound/soc/fsl/efika-audio-fabric.c
@@ -0,0 +1,274 @@
+/*
+ * Efika driver for the PSC of the Freescale MPC52xx configured as AC97 interface
+ *
+ * Copyright 2008 Jon Smirl, Digispeaker
+ * Author: Jon Smirl <jonsmirl@gmail.com>
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/dma-mapping.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+#include <sound/soc-of-simple.h>
+#include <sound/soc-dapm.h>
+
+#include "mpc5200_dma.h"
+#include "mpc5200_psc_ac97.h"
+#include "../codecs/stac9766.h"
+
+#define EFIKA_HP        0
+#define EFIKA_MIC_INT   1
+#define EFIKA_HEADSET   2
+#define EFIKA_HP_OFF    3
+#define EFIKA_SPK_ON    0
+#define EFIKA_SPK_OFF   1
+
+#define DRV_NAME "efika-psc-ac97"
+
+static int efika_jack_func;
+static int efika_spk_func;
+
+static void efika_ext_control(struct snd_soc_codec *codec)
+{
+	/* set up jack connection */
+	switch (efika_jack_func) {
+	case EFIKA_HP:
+		snd_soc_dapm_disable_pin(codec, "Headset Jack");
+		snd_soc_dapm_disable_pin(codec, "Mic (Internal)");
+		snd_soc_dapm_enable_pin(codec, "Headphone Jack");
+		break;
+	case EFIKA_MIC_INT:
+		snd_soc_dapm_disable_pin(codec, "Headset Jack");
+		snd_soc_dapm_disable_pin(codec, "Headphone Jack");
+		snd_soc_dapm_enable_pin(codec, "Mic (Internal)");
+		break;
+	case EFIKA_HEADSET:
+		snd_soc_dapm_disable_pin(codec, "Headphone Jack");
+		snd_soc_dapm_disable_pin(codec, "Mic (Internal)");
+		snd_soc_dapm_enable_pin(codec, "Headset Jack");
+		break;
+	}
+
+	if (efika_spk_func == EFIKA_SPK_ON)
+		snd_soc_dapm_enable_pin(codec, "Speaker");
+	else
+		snd_soc_dapm_disable_pin(codec, "Speaker");
+
+	snd_soc_dapm_sync(codec);
+}
+
+static int efika_get_jack(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = efika_jack_func;
+	return 0;
+}
+
+static int efika_set_jack(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec =  snd_kcontrol_chip(kcontrol);
+
+	if (efika_jack_func == ucontrol->value.integer.value[0])
+		return 0;
+
+	efika_jack_func = ucontrol->value.integer.value[0];
+	efika_ext_control(codec);
+	return 1;
+}
+
+static int efika_get_spk(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = efika_spk_func;
+	return 0;
+}
+
+static int efika_set_spk(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec =  snd_kcontrol_chip(kcontrol);
+
+	if (efika_spk_func == ucontrol->value.integer.value[0])
+		return 0;
+
+	efika_spk_func = ucontrol->value.integer.value[0];
+	efika_ext_control(codec);
+	return 1;
+}
+
+/* efika dapm event handlers */
+static int efika_hp_event(struct snd_soc_dapm_widget *w,
+								struct snd_kcontrol *k, int event)
+{
+	//if (SND_SOC_DAPM_EVENT_ON(event))
+	//	set_tc6393_gpio(&tc6393_device.dev,EFIKA_TC6393_L_MUTE);
+	//else
+	//	reset_tc6393_gpio(&tc6393_device.dev,EFIKA_TC6393_L_MUTE);
+	return 0;
+}
+
+/* efika codec dapm widgets */
+static const struct snd_soc_dapm_widget efika_dapm_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", efika_hp_event),
+	SND_SOC_DAPM_HP("Headset Jack", NULL),
+	SND_SOC_DAPM_MIC("Mic (Internal)", NULL),
+	SND_SOC_DAPM_SPK("Speaker", NULL),
+};
+
+/* efika audio map */
+static const struct snd_soc_dapm_route audio_map[] = {
+
+	/* headphone connected to HPOUTL, HPOUTR */
+	{"Headphone Jack", NULL, "HPOUTL"},
+	{"Headphone Jack", NULL, "HPOUTR"},
+
+	/* ext speaker connected to LOUT2, ROUT2 */
+	{"Speaker", NULL, "LOUT2"},
+	{"Speaker", NULL, "ROUT2"},
+
+	/* internal mic is connected to mic1, mic2 differential - with bias */
+	{"MIC1", NULL, "Mic Bias"},
+	{"MIC2", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Mic (Internal)"},
+
+	/* headset is connected to HPOUTR, and LINEINR with bias */
+	{"Headset Jack", NULL, "HPOUTR"},
+	{"LINEINR", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Headset Jack"},
+
+	{NULL, NULL, NULL},
+};
+
+static const char *jack_function[] = {"Headphone", "Mic", "Line", "Headset", "Off"};
+static const char *spk_function[] = {"On", "Off"};
+static const struct soc_enum efika_enum[] = {
+	SOC_ENUM_SINGLE_EXT(5, jack_function),
+	SOC_ENUM_SINGLE_EXT(2, spk_function),
+};
+
+static const struct snd_kcontrol_new efika_controls[] = {
+	SOC_ENUM_EXT("Jack Function", efika_enum[0], efika_get_jack,
+		efika_set_jack),
+	SOC_ENUM_EXT("Speaker Function", efika_enum[1], efika_get_spk,
+		efika_set_spk),
+};
+
+static int efika_init(struct snd_soc_codec *codec)
+{
+
+	/* set up efika codec pins */
+	snd_soc_dapm_disable_pin(codec, "OUT3");
+	snd_soc_dapm_disable_pin(codec, "MONOOUT");
+
+	snd_soc_dapm_new_controls(codec, efika_dapm_widgets,
+					ARRAY_SIZE(efika_dapm_widgets));
+
+	snd_soc_dapm_add_routes(codec, audio_map, ARRAY_SIZE(audio_map));
+	snd_soc_dapm_sync(codec);
+
+	return 0;
+}
+
+static struct snd_soc_dai_link efika_dai[] = {
+	{
+		.name = "AC97 Analog",
+		.stream_name = "AC97 Analog",
+		.cpu_dai = &mpc5200_dai_ac97[MPC5200_AC97_ANALOG],
+		.codec_dai = &stac9766_dai[STAC9766_DAI_AC97_ANALOG],
+		.init = efika_init,
+	},
+	{
+		.name = "AC97 Digital",
+		.stream_name = "AC97 Digital",
+		.cpu_dai = &mpc5200_dai_ac97[MPC5200_AC97_DIGITAL],
+		.codec_dai = &stac9766_dai[STAC9766_DAI_AC97_DIGITAL],
+	},
+};
+
+static struct snd_soc_card efika = {
+	.name = "Efika-STAC9766",
+	.platform = &mpc5200_soc_platform,
+	.dai_link = efika_dai,
+	.num_links = ARRAY_SIZE(efika_dai),
+};
+
+static struct snd_soc_device efika_snd_devdata = {
+	.card = &efika,
+	.codec_dev = &soc_codec_dev_stac9766,
+};
+
+/*
+ * This is an example codec initialization for a stac9766 connected to a
+ * mpc5200. It is missing logic to detect hp/mic insertions and logic
+ * to re-route the audio in such an event.
+ */
+static int efika_stac9766_probe(struct platform_device *pdev)
+{
+	of_snd_soc_register_fabric("Efika", NULL);
+	return 0;
+}
+
+static int __exit efika_stac9766_remove(struct of_device *op)
+{
+	return 0;
+}
+
+#ifdef CONFIG_PM
+
+static int efika_stac9766_suspend(struct platform_device *pdev,
+	pm_message_t state)
+{
+	return 0;
+}
+
+static int efika_stac9766_resume(struct platform_device *pdev)
+{
+	return 0;
+}
+
+#else
+#define efika_stac9766_suspend NULL
+#define efika_stac9766_resume  NULL
+#endif
+
+static struct platform_driver efika_fabric = {
+	.probe	= efika_stac9766_probe,
+	.suspend = efika_stac9766_suspend,
+ 	.resume = efika_stac9766_resume,
+	.driver	= {
+		.name	= "efika-audio-fabric",
+	},
+};
+
+static __init int efika_fabric_init(void)
+{
+	return platform_driver_register(&efika_fabric);
+}
+
+static __exit void efika_fabric_exit(void)
+{
+}
+
+module_init(efika_fabric_init);
+module_exit(efika_fabric_exit);
+
+
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_DESCRIPTION(DRV_NAME ": mpc5200 Efika fabric driver");
+MODULE_LICENSE("GPL");
+
diff --git a/sound/soc/fsl/mpc5200_dma.c b/sound/soc/fsl/mpc5200_dma.c
index c09faf3..df229c4 100644
--- a/sound/soc/fsl/mpc5200_dma.c
+++ b/sound/soc/fsl/mpc5200_dma.c
@@ -4,6 +4,8 @@
  * Copyright (C) 2008 Secret Lab Technologies Ltd.
  */
 
+#define DEBUG
+
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/interrupt.h>
@@ -49,65 +51,6 @@ const struct snd_pcm_hardware mpc5200_pcm_hardware = {
 	.fifo_size		= 0,
 };
 
-/**
- * psc_dma_stream - Data specific to a single stream (playback or capture)
- * @active:		flag indicating if the stream is active
- * @psc_dma:		pointer back to parent psc_dma data structure
- * @bcom_task:		bestcomm task structure
- * @irq:		irq number for bestcomm task
- * @period_start:	physical address of start of DMA region
- * @period_end:		physical address of end of DMA region
- * @period_next_pt:	physical address of next DMA buffer to enqueue
- * @period_bytes:	size of DMA period in bytes
- */
-struct psc_dma_stream {
-	int active;
-	struct psc_dma *psc_dma;
-	struct bcom_task *bcom_task;
-	int irq;
-	struct snd_pcm_substream *stream;
-	dma_addr_t period_start;
-	dma_addr_t period_end;
-	dma_addr_t period_next_pt;
-	dma_addr_t period_current_pt;
-	int period_bytes;
-};
-
-/**
- * psc_dma - Private driver data
- * @name: short name for this device ("PSC0", "PSC1", etc)
- * @psc_regs: pointer to the PSC's registers
- * @fifo_regs: pointer to the PSC's FIFO registers
- * @irq: IRQ of this PSC
- * @dev: struct device pointer
- * @dai: the CPU DAI for this device
- * @sicr: Base value used in serial interface control register; mode is ORed
- *        with this value.
- * @playback: Playback stream context data
- * @capture: Capture stream context data
- */
-struct psc_dma {
-	char name[32];
-	struct mpc52xx_psc __iomem *psc_regs;
-	struct mpc52xx_psc_fifo __iomem *fifo_regs;
-	unsigned int irq;
-	struct device *dev;
-	struct snd_soc_dai dai;
-	spinlock_t lock;
-	u32 sicr;
-	uint sysclk;
-
-	/* per-stream data */
-	struct psc_dma_stream playback;
-	struct psc_dma_stream capture;
-
-	/* Statistics */
-	struct {
-		int overrun_count;
-		int underrun_count;
-	} stats;
-};
-
 /*
  * Interrupt handlers
  */
@@ -493,14 +436,14 @@ static int psc_dma_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
 		card->dev->coherent_dma_mask = 0xffffffff;
 
 	if (pcm->streams[0].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
+		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->card->dev, size,
 					&pcm->streams[0].substream->dma_buffer);
 		if (rc)
 			goto playback_alloc_err;
 	}
 
 	if (pcm->streams[1].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
+		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->card->dev, size,
 					&pcm->streams[1].substream->dma_buffer);
 		if (rc)
 			goto capture_alloc_err;
@@ -542,3 +485,19 @@ struct snd_soc_platform mpc5200_soc_platform = {
 };
 EXPORT_SYMBOL_GPL(mpc5200_soc_platform);
 
+static int __init mpc5200_soc_platform_init(void)
+{
+	/* Tell the ASoC OF helpers about it */
+	of_snd_soc_register_platform(&mpc5200_soc_platform);
+	return snd_soc_register_platform(&mpc5200_soc_platform);
+}
+module_init(mpc5200_soc_platform_init);
+
+static void __exit mpc5200_soc_platform_exit(void)
+{
+	snd_soc_unregister_platform(&mpc5200_soc_platform);
+}
+module_exit(mpc5200_soc_platform_exit);
+
+
+
diff --git a/sound/soc/fsl/mpc5200_dma.h b/sound/soc/fsl/mpc5200_dma.h
index 09ff62f..5426f2c 100644
--- a/sound/soc/fsl/mpc5200_dma.h
+++ b/sound/soc/fsl/mpc5200_dma.h
@@ -5,6 +5,67 @@
 #ifndef __SOUND_SOC_FSL_MPC5200_DMA_H__
 #define __SOUND_SOC_FSL_MPC5200_DMA_H__
 
+/**
+ * psc_ac97_stream - Data specific to a single stream (playback or capture)
+ * @active:		flag indicating if the stream is active
+ * @psc_ac97:		pointer back to parent psc_ac97 data structure
+ * @bcom_task:		bestcomm task structure
+ * @irq:		irq number for bestcomm task
+ * @period_start:	physical address of start of DMA region
+ * @period_end:		physical address of end of DMA region
+ * @period_next_pt:	physical address of next DMA buffer to enqueue
+ * @period_bytes:	size of DMA period in bytes
+ */
+struct psc_dma_stream {
+	int active;
+	struct psc_dma *psc_dma;
+	struct bcom_task *bcom_task;
+	int irq;
+	struct snd_pcm_substream *stream;
+	dma_addr_t period_start;
+	dma_addr_t period_end;
+	dma_addr_t period_next_pt;
+	dma_addr_t period_current_pt;
+	int period_bytes;
+};
+
+/**
+ * psc_ac97 - Private driver data
+ * @name: short name for this device ("PSC0", "PSC1", etc)
+ * @psc_regs: pointer to the PSC's registers
+ * @fifo_regs: pointer to the PSC's FIFO registers
+ * @irq: IRQ of this PSC
+ * @dev: struct device pointer
+ * @dai: the CPU DAI for this device
+ * @sicr: Base value used in serial interface control register; mode is ORed
+ *        with this value.
+ * @playback: Playback stream context data
+ * @capture: Capture stream context data
+ */
+struct psc_dma {
+	char name[32];
+	struct mpc52xx_psc __iomem *psc_regs;
+	struct mpc52xx_psc_fifo __iomem *fifo_regs;
+	unsigned int irq;
+	struct device *dev;
+	struct snd_soc_dai dai;
+	spinlock_t lock;
+	u32 sicr;
+	uint sysclk;
+
+	/* per-stream data */
+	struct psc_dma_stream playback;
+	struct psc_dma_stream capture;
+
+	/* Statistics */
+	struct {
+		int overrun_count;
+		int underrun_count;
+	} stats;
+};
+
+
+
 int mpc5200_dma_startup(struct snd_pcm_substream *substream,
 			   struct snd_soc_dai *dai);
 int mpc5200_dma_hw_free(struct snd_pcm_substream *substream,
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 9ec8ac5..1298b46 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -9,6 +9,8 @@
  * published by the Free Software Foundation.
  */
 
+#define DEBUG
+
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/interrupt.h>
@@ -34,10 +36,11 @@
 #include "mpc5200_dma.h"
 #include "mpc5200_psc_ac97.h"
 
-MODULE_AUTHOR("Jon Smirl");
-MODULE_DESCRIPTION("MPC52xx AC97 module");
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_DESCRIPTION("mpc5200 AC97 module");
 MODULE_LICENSE("GPL");
 
+
 /**
  * PSC_AC97_RATES: sample rates supported by the AC97
  *
@@ -56,79 +59,22 @@ MODULE_LICENSE("GPL");
 			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S24_BE | \
 			 SNDRV_PCM_FMTBIT_S32_BE)
 
-/**
- * psc_ac97_stream - Data specific to a single stream (playback or capture)
- * @active:		flag indicating if the stream is active
- * @psc_ac97:		pointer back to parent psc_ac97 data structure
- * @bcom_task:		bestcomm task structure
- * @irq:		irq number for bestcomm task
- * @period_start:	physical address of start of DMA region
- * @period_end:		physical address of end of DMA region
- * @period_next_pt:	physical address of next DMA buffer to enqueue
- * @period_bytes:	size of DMA period in bytes
- */
-struct psc_ac97_stream {
-	int active;
-	struct psc_ac97 *psc_ac97;
-	struct bcom_task *bcom_task;
-	int irq;
-	struct snd_pcm_substream *stream;
-	dma_addr_t period_start;
-	dma_addr_t period_end;
-	dma_addr_t period_next_pt;
-	dma_addr_t period_current_pt;
-	int period_bytes;
-};
-
-/**
- * psc_ac97 - Private driver data
- * @name: short name for this device ("PSC0", "PSC1", etc)
- * @psc_regs: pointer to the PSC's registers
- * @fifo_regs: pointer to the PSC's FIFO registers
- * @irq: IRQ of this PSC
- * @dev: struct device pointer
- * @dai: the CPU DAI for this device
- * @sicr: Base value used in serial interface control register; mode is ORed
- *        with this value.
- * @playback: Playback stream context data
- * @capture: Capture stream context data
- */
-struct psc_ac97 {
-	char name[32];
-	struct mpc52xx_psc __iomem *psc_regs;
-	struct mpc52xx_psc_fifo __iomem *fifo_regs;
-	unsigned int irq;
-	struct device *dev;
-	struct snd_soc_dai dai;
-	spinlock_t lock;
-	u32 sicr;
-	uint sysclk;
-
-	/* per-stream data */
-	struct psc_ac97_stream playback;
-	struct psc_ac97_stream capture;
-
-	/* Statistics */
-	struct {
-		int overrun_count;
-		int underrun_count;
-	} stats;
-};
-
 #define DRV_NAME "mpc5200-psc-ac97"
 
+struct psc_dma *psc_dma;
+
 static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 {
-	struct psc_ac97 *psc_ac97 = ac97->private_data;
+	//struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 	unsigned int val;
 
-	spin_lock(&psc_ac97->lock);
+	spin_lock(&psc_dma->lock);
 	printk("ac97 read: reg %04x\n", reg);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
-	while ((--timeout) && (in_be16(&psc_ac97->psc_regs->sr_csr.status) &
+	while ((--timeout) && (in_be16(&psc_dma->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_CMDSEND) )
 		udelay(10);
 
@@ -138,21 +84,21 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 	}
 
 	/* Do the read */
-	out_be32(&psc_ac97->psc_regs->ac97_cmd, (1<<31) | ((reg & 0x7f) << 24));
+	out_be32(&psc_dma->psc_regs->ac97_cmd, (1<<31) | ((reg & 0x7f) << 24));
 
 	/* Wait for the answer */
 	timeout = 1000;
-	while ((--timeout) && !(in_be16(&psc_ac97->psc_regs->sr_csr.status) &
+	while ((--timeout) && !(in_be16(&psc_dma->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_DATA_VAL) )
 		udelay(10);
 
 	if (!timeout) {
-		printk(KERN_ERR DRV_NAME ": timeout on ac97 read (val)\n");
+		printk(KERN_ERR DRV_NAME ": timeout on ac97 read (val) %x\n", in_be16(&psc_dma->psc_regs->sr_csr.status));
 		return 0xffff;
 	}
 
 	/* Get the data */
-	val = in_be32(&psc_ac97->psc_regs->ac97_data);
+	val = in_be32(&psc_dma->psc_regs->ac97_data);
 	if ( ((val>>24) & 0x7f) != reg ) {
 		printk(KERN_ERR DRV_NAME ": reg echo error on ac97 read\n");
 		return 0xffff;
@@ -161,21 +107,21 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 
 	printk("ac97 read ok: reg %04x  val %04x\n", reg, val);
 
-	spin_unlock(&psc_ac97->lock);
+	spin_unlock(&psc_dma->lock);
 	return (unsigned short) val;
 }
 
 static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val)
 {
-	struct psc_ac97 *psc_ac97 = ac97->private_data;
+	//struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 
 	//printk("ac97 write: reg %04x  val %04x\n", reg, val);
-	spin_lock(&psc_ac97->lock);
+	spin_lock(&psc_dma->lock);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
-	while ((--timeout) && (in_be16(&psc_ac97->psc_regs->sr_csr.status) &
+	while ((--timeout) && (in_be16(&psc_dma->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_CMDSEND) )
 		udelay(10);
 
@@ -185,25 +131,25 @@ static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned s
 	}
 
 	/* Write data */
-	out_be32(&psc_ac97->psc_regs->ac97_cmd, ((reg & 0x7f) << 24) | (val << 8));
+	out_be32(&psc_dma->psc_regs->ac97_cmd, ((reg & 0x7f) << 24) | (val << 8));
 
-	spin_unlock(&psc_ac97->lock);
+	spin_unlock(&psc_dma->lock);
 }
 
 static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 {
-	struct psc_ac97 *psc_ac97 = ac97->private_data;
+	//struct psc_dma *psc_dma = ac97->private_data;
 
-	printk("psc_ac97_cold_reset\n");
+	printk("psc_ac97_cold_reset %p\n", ac97);
 
 	/* Do a cold reset */
-	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
-	out_8(&psc_ac97->psc_regs->op0, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op0, MPC52xx_PSC_OP_RES);
 	udelay(50);
 
 	/* PSC recover from cold reset (cfr user manual, not sure if useful) */
-	out_be32(&psc_ac97->psc_regs->sicr, in_be32(&psc_ac97->psc_regs->sicr));
+	out_be32(&psc_dma->psc_regs->sicr, in_be32(&psc_dma->psc_regs->sicr));
 }
 
 static void psc_ac97_warm_reset(struct snd_ac97 *ac97)
@@ -240,20 +186,20 @@ static int psc_ac97_hw_analog_params(struct snd_pcm_substream *substream,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 
 	printk("psc_ac97_hw_analog_params\n");
 	printk("channels %d\n",substream->runtime->channels);
 	printk("rate %d\n",substream->runtime->rate);
 	printk("periods %d\n",substream->runtime->periods);
 	printk("period_step %d\n",substream->runtime->period_step);
-	printk("slots %d\n",psc_ac97->psc_regs->ac97_slots);
+	printk("slots %d\n",psc_dma->psc_regs->ac97_slots);
 
 	/* FIXME, need a spinlock to protect access */
 	if (substream->runtime->channels == 1)
-		out_be32(&psc_ac97->psc_regs->ac97_slots, 0x01000000);
+		out_be32(&psc_dma->psc_regs->ac97_slots, 0x01000000);
 	else
-		out_be32(&psc_ac97->psc_regs->ac97_slots, 0x03000000);
+		out_be32(&psc_dma->psc_regs->ac97_slots, 0x03000000);
 
 	return 0;
 }
@@ -320,11 +266,11 @@ static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 	uint bits, framesync, bitclk, value;
 	u32 mode;
 
-	dev_dbg(psc_ac97->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
+	dev_dbg(psc_dma->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
 		" periods=%i buffer_size=%i  buffer_bytes=%i\n",
 		__func__, substream, params_period_size(params),
 		params_period_bytes(params), params_periods(params),
@@ -348,26 +294,26 @@ static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
 		bits = 32;
 		break;
 	default:
-		dev_dbg(psc_ac97->dev, "invalid format\n");
+		dev_dbg(psc_dma->dev, "invalid format\n");
 		return -EINVAL;
 	}
-	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr | mode);
+	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr | mode);
 
-	if (psc_ac97->sysclk) {
+	if (psc_dma->sysclk) {
 		framesync = bits * 2;
-		bitclk = (psc_ac97->sysclk) / (params_rate(params) * framesync);
+		bitclk = (psc_dma->sysclk) / (params_rate(params) * framesync);
 
 		/* bitclk field is byte swapped due to mpc5200/b compatibility */
 		value = ((framesync - 1) << 24) |
 			(((bitclk - 1) & 0xFF) << 16) | ((bitclk - 1) & 0xFF00);
 
-		dev_dbg(psc_ac97->dev, "%s(substream=%p) rate=%i sysclk=%i"
+		dev_dbg(psc_dma->dev, "%s(substream=%p) rate=%i sysclk=%i"
 			" framesync=%i bitclk=%i reg=%X\n",
-			__FUNCTION__, substream, params_rate(params), psc_ac97->sysclk,
+			__FUNCTION__, substream, params_rate(params), psc_dma->sysclk,
 			framesync, bitclk, value);
 
-		out_be32(&psc_ac97->psc_regs->ccr, value);
-		out_8(&psc_ac97->psc_regs->ctur, bits - 1);
+		out_be32(&psc_dma->psc_regs->ccr, value);
+		out_8(&psc_dma->psc_regs->ctur, bits - 1);
 	}
 
   	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
@@ -388,8 +334,8 @@ static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
  */
 static int psc_ac97_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 {
-	struct psc_ac97 *psc_ac97 = cpu_dai->private_data;
-	dev_dbg(psc_ac97->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
+	struct psc_dma *psc_dma = cpu_dai->private_data;
+	dev_dbg(psc_dma->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
 				cpu_dai, format);
 	return (format == SND_SOC_DAIFMT_AC97) ? 0 : -EINVAL;
 }
@@ -429,139 +375,6 @@ static struct snd_soc_dai psc_ac97_dai_template = {
 	.ops = &psc_ac97_dai_ops,
 };
 
-/* ---------------------------------------------------------------------
- * The PSC AC97 'ASoC platform' driver
- *
- * Can be referenced by an 'ASoC machine' driver
- * This driver only deals with the audio bus; it doesn't have any
- * interaction with the attached codec
- */
-
-static int psc_ac97_pcm_open(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
-	struct psc_ac97_stream *s;
-
-	dev_dbg(psc_ac97->dev, "psc_ac97_pcm_open(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_ac97->capture;
-	else
-		s = &psc_ac97->playback;
-
-	snd_soc_set_runtime_hwparams(substream, &mpc5200_pcm_hardware);
-
-	s->stream = substream;
-	return 0;
-}
-
-static int psc_ac97_pcm_close(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
-	struct psc_ac97_stream *s;
-
-	dev_dbg(psc_ac97->dev, "psc_ac97_pcm_close(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_ac97->capture;
-	else
-		s = &psc_ac97->playback;
-
-	s->stream = NULL;
-	return 0;
-}
-
-static snd_pcm_uframes_t
-psc_ac97_pcm_pointer(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
-	struct psc_ac97_stream *s;
-	dma_addr_t count;
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_ac97->capture;
-	else
-		s = &psc_ac97->playback;
-
-	count = s->period_current_pt - s->period_start;
-
-	return bytes_to_frames(substream->runtime, count);
-}
-
-static struct snd_pcm_ops psc_ac97_pcm_ops = {
-	.open		= psc_ac97_pcm_open,
-	.close		= psc_ac97_pcm_close,
-	.ioctl		= snd_pcm_lib_ioctl,
-	.pointer	= psc_ac97_pcm_pointer,
-};
-
-static u64 psc_ac97_pcm_dmamask = 0xffffffff;
-static int psc_ac97_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
-			   struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	size_t size = mpc5200_pcm_hardware.buffer_bytes_max;
-	int rc = 0;
-
-	dev_dbg(rtd->socdev->dev, "psc_ac97_pcm_new(card=%p, dai=%p, pcm=%p)\n",
-		card, dai, pcm);
-
-	if (!card->dev->dma_mask)
-		card->dev->dma_mask = &psc_ac97_pcm_dmamask;
-	if (!card->dev->coherent_dma_mask)
-		card->dev->coherent_dma_mask = 0xffffffff;
-
-	if (pcm->streams[0].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[0].substream->dma_buffer);
-		if (rc)
-			goto playback_alloc_err;
-	}
-
-	if (pcm->streams[1].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[1].substream->dma_buffer);
-		if (rc)
-			goto capture_alloc_err;
-	}
-
-	return 0;
-
- capture_alloc_err:
-	if (pcm->streams[0].substream)
-		snd_dma_free_pages(&pcm->streams[0].substream->dma_buffer);
- playback_alloc_err:
-	dev_err(card->dev, "Cannot allocate buffer(s)\n");
-	return -ENOMEM;
-}
-
-static void psc_ac97_pcm_free(struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	struct snd_pcm_substream *substream;
-	int stream;
-
-	dev_dbg(rtd->socdev->dev, "psc_ac97_pcm_free(pcm=%p)\n", pcm);
-
-	for (stream = 0; stream < 2; stream++) {
-		substream = pcm->streams[stream].substream;
-		if (substream) {
-			snd_dma_free_pages(&substream->dma_buffer);
-			substream->dma_buffer.area = NULL;
-			substream->dma_buffer.addr = 0;
-		}
-	}
-}
-
-struct snd_soc_platform psc_ac97_pcm_soc_platform = {
-	.name		= "mpc5200-psc-audio",
-	.pcm_ops	= &psc_ac97_pcm_ops,
-	.pcm_new	= &psc_ac97_pcm_new,
-	.pcm_free	= &psc_ac97_pcm_free,
-};
 
 /* ---------------------------------------------------------------------
  * Sysfs attributes for debugging
@@ -570,24 +383,24 @@ struct snd_soc_platform psc_ac97_pcm_soc_platform = {
 static ssize_t psc_ac97_status_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 
 	return sprintf(buf, "status=%.4x sicr=%.8x rfnum=%i rfstat=0x%.4x "
 			"tfnum=%i tfstat=0x%.4x\n",
-			in_be16(&psc_ac97->psc_regs->sr_csr.status),
-			in_be32(&psc_ac97->psc_regs->sicr),
-			in_be16(&psc_ac97->fifo_regs->rfnum) & 0x1ff,
-			in_be16(&psc_ac97->fifo_regs->rfstat),
-			in_be16(&psc_ac97->fifo_regs->tfnum) & 0x1ff,
-			in_be16(&psc_ac97->fifo_regs->tfstat));
+			in_be16(&psc_dma->psc_regs->sr_csr.status),
+			in_be32(&psc_dma->psc_regs->sicr),
+			in_be16(&psc_dma->fifo_regs->rfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->rfstat),
+			in_be16(&psc_dma->fifo_regs->tfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->tfstat));
 }
 
-static int *psc_ac97_get_stat_attr(struct psc_ac97 *psc_ac97, const char *name)
+static int *psc_ac97_get_stat_attr(struct psc_dma *psc_dma, const char *name)
 {
 	if (strcmp(name, "playback_underrun") == 0)
-		return &psc_ac97->stats.underrun_count;
+		return &psc_dma->stats.underrun_count;
 	if (strcmp(name, "capture_overrun") == 0)
-		return &psc_ac97->stats.overrun_count;
+		return &psc_dma->stats.overrun_count;
 
 	return NULL;
 }
@@ -595,10 +408,10 @@ static int *psc_ac97_get_stat_attr(struct psc_ac97 *psc_ac97, const char *name)
 static ssize_t psc_ac97_stat_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_ac97_get_stat_attr(psc_ac97, attr->attr.name);
+	attrib = psc_ac97_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -610,10 +423,10 @@ static ssize_t psc_ac97_stat_store(struct device *dev,
 				  const char *buf,
 				  size_t count)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_ac97_get_stat_attr(psc_ac97, attr->attr.name);
+	attrib = psc_ac97_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -627,6 +440,7 @@ static DEVICE_ATTR(playback_underrun, 0644, psc_ac97_stat_show,
 static DEVICE_ATTR(capture_overrun, 0644, psc_ac97_stat_show,
 			psc_ac97_stat_store);
 
+
 /* ---------------------------------------------------------------------
  * OF platform bus binding code:
  * - Probe/remove operations
@@ -636,14 +450,12 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
 	phys_addr_t fifo;
-	struct psc_ac97 *psc_ac97;
+	//struct psc_dma *psc_dma;
 	struct resource res;
 	int size, psc_id, irq, rc;
 	const __be32 *prop;
 	void __iomem *regs;
 
-	dev_dbg(&op->dev, "probing psc ac97 device\n");
-
 	/* Get the PSC ID */
 	prop = of_get_property(op->node, "cell-index", &size);
 	if (!prop || size < sizeof *prop)
@@ -663,119 +475,118 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	}
 
 	/* Allocate and initialize the driver private data */
-	psc_ac97 = kzalloc(sizeof *psc_ac97, GFP_KERNEL);
-	if (!psc_ac97) {
+	psc_dma = kzalloc(sizeof *psc_dma, GFP_KERNEL);
+	if (!psc_dma) {
 		iounmap(regs);
 		return -ENOMEM;
 	}
-	spin_lock_init(&psc_ac97->lock);
-	psc_ac97->irq = irq;
-	psc_ac97->psc_regs = regs;
-	psc_ac97->fifo_regs = regs + sizeof *psc_ac97->psc_regs;
-	psc_ac97->dev = &op->dev;
-	psc_ac97->playback.psc_ac97 = psc_ac97;
-	psc_ac97->capture.psc_ac97 = psc_ac97;
-	snprintf(psc_ac97->name, sizeof psc_ac97->name, "PSC%u", psc_id+1);
+	spin_lock_init(&psc_dma->lock);
+	psc_dma->irq = irq;
+	psc_dma->psc_regs = regs;
+	psc_dma->fifo_regs = regs + sizeof *psc_dma->psc_regs;
+	psc_dma->dev = &op->dev;
+	psc_dma->playback.psc_dma = psc_dma;
+	psc_dma->capture.psc_dma = psc_dma;
+	snprintf(psc_dma->name, sizeof psc_dma->name, "PSC%u", psc_id+1);
 
 	/* Fill out the CPU DAI structure */
-	memcpy(&psc_ac97->dai, &psc_ac97_dai_template, sizeof psc_ac97->dai);
-	psc_ac97->dai.private_data = psc_ac97;
-	psc_ac97->dai.name = psc_ac97->name;
-	psc_ac97->dai.id = psc_id;
+	memcpy(&psc_dma->dai, &psc_ac97_dai_template, sizeof psc_dma->dai);
+	psc_dma->dai.private_data = psc_dma;
+	psc_dma->dai.name = psc_dma->name;
+	psc_dma->dai.id = psc_id;
 
 	/* Find the address of the fifo data registers and setup the
 	 * DMA tasks */
 	fifo = res.start + offsetof(struct mpc52xx_psc, buffer.buffer_32);
-	psc_ac97->capture.bcom_task =
+	psc_dma->capture.bcom_task =
 		bcom_psc_gen_bd_rx_init(psc_id, 10, fifo, 512);
-	psc_ac97->playback.bcom_task =
+	psc_dma->playback.bcom_task =
 		bcom_psc_gen_bd_tx_init(psc_id, 10, fifo);
-	if (!psc_ac97->capture.bcom_task ||
-	    !psc_ac97->playback.bcom_task) {
+	if (!psc_dma->capture.bcom_task ||
+	    !psc_dma->playback.bcom_task) {
 		dev_err(&op->dev, "Could not allocate bestcomm tasks\n");
 		iounmap(regs);
-		kfree(psc_ac97);
+		kfree(psc_dma);
 		return -ENODEV;
 	}
 
 	/* Disable all interrupts and reset the PSC */
-	out_be16(&psc_ac97->psc_regs->isr_imr.imr, 0);
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_RX); /* reset receiver */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_TX); /* reset transmitter */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_ERR_STAT); /* reset error */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_SEL_MODE_REG_1); /* reset mode */
+	out_be16(&psc_dma->psc_regs->isr_imr.imr, 0);
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_RX); /* reset receiver */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_TX); /* reset transmitter */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_ERR_STAT); /* reset error */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_SEL_MODE_REG_1); /* reset mode */
 
 	/* Do a cold reset of codec */
-	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
-	out_8(&psc_ac97->psc_regs->op0, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op0, MPC52xx_PSC_OP_RES);
 	udelay(50);
 
 	/* Configure the serial interface mode to AC97 */
-	psc_ac97->sicr = MPC52xx_PSC_SICR_ENAC97 | MPC52xx_PSC_SICR_SYNCPOL |
-			MPC52xx_PSC_SICR_CLKPOL;
-	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr);
+	psc_dma->sicr = MPC52xx_PSC_SICR_SIM_AC97 | MPC52xx_PSC_SICR_ENAC97;
+	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr);
 
 	/* No slots active */
-	out_be32(&psc_ac97->psc_regs->ac97_slots, 0x00000000);
-
-	/* Check for the codec handle.  If it is not present then we
-	 * are done */
-	if (!of_get_property(op->node, "codec-handle", NULL))
-		return 0;
+	out_be32(&psc_dma->psc_regs->ac97_slots, 0x00000000);
 
 	/* Set up mode register;
 	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
 	 * Second write: register Normal mode for non loopback
 	 */
-	out_8(&psc_ac97->psc_regs->mode, 0);
-	out_8(&psc_ac97->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
 
 	/* Set the TX and RX fifo alarm thresholds */
-	out_be16(&psc_ac97->fifo_regs->rfalarm, 0x100);
-	out_8(&psc_ac97->fifo_regs->rfcntl, 0x4);
-	out_be16(&psc_ac97->fifo_regs->tfalarm, 0x100);
-	out_8(&psc_ac97->fifo_regs->tfcntl, 0x7);
+	out_be16(&psc_dma->fifo_regs->rfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->rfcntl, 0x4);
+	out_be16(&psc_dma->fifo_regs->tfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->tfcntl, 0x7);
+
+	/* Go */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_TX_ENABLE);
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RX_ENABLE);
 
 	/* Lookup the IRQ numbers */
-	psc_ac97->playback.irq =
-		bcom_get_task_irq(psc_ac97->playback.bcom_task);
-	psc_ac97->capture.irq =
-		bcom_get_task_irq(psc_ac97->capture.bcom_task);
+	psc_dma->playback.irq =
+		bcom_get_task_irq(psc_dma->playback.bcom_task);
+	psc_dma->capture.irq =
+		bcom_get_task_irq(psc_dma->capture.bcom_task);
 
 	/* Save what we've done so it can be found again later */
-	dev_set_drvdata(&op->dev, psc_ac97);
+	dev_set_drvdata(&op->dev, psc_dma);
 
 	/* Register the SYSFS files */
-	rc = device_create_file(psc_ac97->dev, &dev_attr_status);
-	rc |= device_create_file(psc_ac97->dev, &dev_attr_capture_overrun);
-	rc |= device_create_file(psc_ac97->dev, &dev_attr_playback_underrun);
+	rc = device_create_file(psc_dma->dev, &dev_attr_status);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_capture_overrun);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_playback_underrun);
 	if (rc)
-		dev_info(psc_ac97->dev, "error creating sysfs files\n");
+		dev_info(psc_dma->dev, "error creating sysfs files\n");
 
-	snd_soc_register_platform(&psc_ac97_pcm_soc_platform);
+	rc = snd_soc_register_dai(&psc_dma->dai);
+	if (rc != 0) {
+		printk("Failed to register DAI\n");
+		return 0;
+	}
 
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_platform(&psc_ac97_pcm_soc_platform, op->node,
-				     &psc_ac97->dai);
+	of_snd_soc_register_cpu_dai(op->node, &psc_dma->dai);
 
 	return 0;
 }
 
 static int __devexit psc_ac97_of_remove(struct of_device *op)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(&op->dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(&op->dev);
 
 	dev_dbg(&op->dev, "psc_ac97_remove()\n");
 
-	snd_soc_unregister_platform(&psc_ac97_pcm_soc_platform);
-
-	bcom_gen_bd_rx_release(psc_ac97->capture.bcom_task);
-	bcom_gen_bd_tx_release(psc_ac97->playback.bcom_task);
+	bcom_gen_bd_rx_release(psc_dma->capture.bcom_task);
+	bcom_gen_bd_tx_release(psc_dma->playback.bcom_task);
 
-	iounmap(psc_ac97->psc_regs);
-	iounmap(psc_ac97->fifo_regs);
-	kfree(psc_ac97);
+	iounmap(psc_dma->psc_regs);
+	iounmap(psc_dma->fifo_regs);
+	kfree(psc_dma);
 	dev_set_drvdata(&op->dev, NULL);
 
 	return 0;
diff --git a/sound/soc/fsl/mpc5200_psc_i2s.c b/sound/soc/fsl/mpc5200_psc_i2s.c
index ff6255f..f9be67d 100644
--- a/sound/soc/fsl/mpc5200_psc_i2s.c
+++ b/sound/soc/fsl/mpc5200_psc_i2s.c
@@ -52,75 +52,16 @@ MODULE_LICENSE("GPL");
 			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S24_BE | \
 			 SNDRV_PCM_FMTBIT_S32_BE)
 
-/**
- * psc_i2s_stream - Data specific to a single stream (playback or capture)
- * @active:		flag indicating if the stream is active
- * @psc_i2s:		pointer back to parent psc_i2s data structure
- * @bcom_task:		bestcomm task structure
- * @irq:		irq number for bestcomm task
- * @period_start:	physical address of start of DMA region
- * @period_end:		physical address of end of DMA region
- * @period_next_pt:	physical address of next DMA buffer to enqueue
- * @period_bytes:	size of DMA period in bytes
- */
-struct psc_i2s_stream {
-	int active;
-	struct psc_i2s *psc_i2s;
-	struct bcom_task *bcom_task;
-	int irq;
-	struct snd_pcm_substream *stream;
-	dma_addr_t period_start;
-	dma_addr_t period_end;
-	dma_addr_t period_next_pt;
-	dma_addr_t period_current_pt;
-	int period_bytes;
-};
-
-/**
- * psc_i2s - Private driver data
- * @name: short name for this device ("PSC0", "PSC1", etc)
- * @psc_regs: pointer to the PSC's registers
- * @fifo_regs: pointer to the PSC's FIFO registers
- * @irq: IRQ of this PSC
- * @dev: struct device pointer
- * @dai: the CPU DAI for this device
- * @sicr: Base value used in serial interface control register; mode is ORed
- *        with this value.
- * @playback: Playback stream context data
- * @capture: Capture stream context data
- */
-struct psc_i2s {
-	char name[32];
-	struct mpc52xx_psc __iomem *psc_regs;
-	struct mpc52xx_psc_fifo __iomem *fifo_regs;
-	unsigned int irq;
-	struct device *dev;
-	struct snd_soc_dai dai;
-	spinlock_t lock;
-	u32 sicr;
-	uint sysclk;
-
-	/* per-stream data */
-	struct psc_i2s_stream playback;
-	struct psc_i2s_stream capture;
-
-	/* Statistics */
-	struct {
-		int overrun_count;
-		int underrun_count;
-	} stats;
-};
-
 static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_pcm_hw_params *params,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 	uint bits, framesync, bitclk, value;
 	u32 mode;
 
-	dev_dbg(psc_i2s->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
+	dev_dbg(psc_dma->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
 		" periods=%i buffer_size=%i  buffer_bytes=%i\n",
 		__func__, substream, params_period_size(params),
 		params_period_bytes(params), params_periods(params),
@@ -144,26 +85,26 @@ static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 		bits = 32;
 		break;
 	default:
-		dev_dbg(psc_i2s->dev, "invalid format\n");
+		dev_dbg(psc_dma->dev, "invalid format\n");
 		return -EINVAL;
 	}
-	out_be32(&psc_i2s->psc_regs->sicr, psc_i2s->sicr | mode);
+	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr | mode);
 
-	if (psc_i2s->sysclk) {
+	if (psc_dma->sysclk) {
 		framesync = bits * 2;
-		bitclk = (psc_i2s->sysclk) / (params_rate(params) * framesync);
+		bitclk = (psc_dma->sysclk) / (params_rate(params) * framesync);
 
 		/* bitclk field is byte swapped due to mpc5200/b compatibility */
 		value = ((framesync - 1) << 24) |
 			(((bitclk - 1) & 0xFF) << 16) | ((bitclk - 1) & 0xFF00);
 
-		dev_dbg(psc_i2s->dev, "%s(substream=%p) rate=%i sysclk=%i"
+		dev_dbg(psc_dma->dev, "%s(substream=%p) rate=%i sysclk=%i"
 			" framesync=%i bitclk=%i reg=%X\n",
-			__FUNCTION__, substream, params_rate(params), psc_i2s->sysclk,
+			__FUNCTION__, substream, params_rate(params), psc_dma->sysclk,
 			framesync, bitclk, value);
 
-		out_be32(&psc_i2s->psc_regs->ccr, value);
-		out_8(&psc_i2s->psc_regs->ctur, bits - 1);
+		out_be32(&psc_dma->psc_regs->ccr, value);
+		out_8(&psc_dma->psc_regs->ctur, bits - 1);
 	}
 
   	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
@@ -188,27 +129,27 @@ static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 static int psc_i2s_set_sysclk(struct snd_soc_dai *cpu_dai,
 			      int clk_id, unsigned int freq, int dir)
 {
-	struct psc_i2s *psc_i2s = cpu_dai->private_data;
+	struct psc_dma *psc_dma = cpu_dai->private_data;
 	int clkdiv, err;
-	dev_dbg(psc_i2s->dev, "psc_i2s_set_sysclk(cpu_dai=%p, freq=%u, dir=%i)\n",
+	dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(cpu_dai=%p, freq=%u, dir=%i)\n",
 				cpu_dai, freq, dir);
 	if (dir == SND_SOC_CLOCK_OUT) {
-		psc_i2s->sysclk = freq;
+		psc_dma->sysclk = freq;
 		if (clk_id == MPC52xx_CLK_CELLSLAVE) {
-			psc_i2s->sicr |= MPC52xx_PSC_SICR_CELLSLAVE | MPC52xx_PSC_SICR_GENCLK;
+			psc_dma->sicr |= MPC52xx_PSC_SICR_CELLSLAVE | MPC52xx_PSC_SICR_GENCLK;
 		} else { /* MPC52xx_CLK_INTERNAL */
-			psc_i2s->sicr &= ~MPC52xx_PSC_SICR_CELLSLAVE;
-			psc_i2s->sicr |= MPC52xx_PSC_SICR_GENCLK;
+			psc_dma->sicr &= ~MPC52xx_PSC_SICR_CELLSLAVE;
+			psc_dma->sicr |= MPC52xx_PSC_SICR_GENCLK;
 
 			clkdiv = ppc_proc_freq / freq;
 			err = ppc_proc_freq % freq;
 			if (err > freq / 2)
 				clkdiv++;
 
-			dev_dbg(psc_i2s->dev, "psc_i2s_set_sysclk(clkdiv %d freq error=%ldHz)\n",
+			dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(clkdiv %d freq error=%ldHz)\n",
 					clkdiv, (ppc_proc_freq / clkdiv - freq));
 
-			return mpc52xx_set_psc_clkdiv(psc_i2s->dai.id + 1, clkdiv);
+			return mpc52xx_set_psc_clkdiv(psc_dma->dai.id + 1, clkdiv);
 		}
 	}
 	return 0;
@@ -227,8 +168,8 @@ static int psc_i2s_set_sysclk(struct snd_soc_dai *cpu_dai,
  */
 static int psc_i2s_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 {
-	struct psc_i2s *psc_i2s = cpu_dai->private_data;
-	dev_dbg(psc_i2s->dev, "psc_i2s_set_fmt(cpu_dai=%p, format=%i)\n",
+	struct psc_dma *psc_dma = cpu_dai->private_data;
+	dev_dbg(psc_dma->dev, "psc_i2s_set_fmt(cpu_dai=%p, format=%i)\n",
 				cpu_dai, format);
 	return (format == SND_SOC_DAIFMT_I2S) ? 0 : -EINVAL;
 }
@@ -270,164 +211,30 @@ static struct snd_soc_dai psc_i2s_dai_template = {
 };
 
 /* ---------------------------------------------------------------------
- * The PSC I2S 'ASoC platform' driver
- *
- * Can be referenced by an 'ASoC machine' driver
- * This driver only deals with the audio bus; it doesn't have any
- * interaction with the attached codec
- */
-
-static int psc_i2s_pcm_open(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
-	struct psc_i2s_stream *s;
-
-	dev_dbg(psc_i2s->dev, "psc_i2s_pcm_open(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_i2s->capture;
-	else
-		s = &psc_i2s->playback;
-
-	snd_soc_set_runtime_hwparams(substream, &mpc5200_pcm_hardware);
-
-	s->stream = substream;
-	return 0;
-}
-
-static int psc_i2s_pcm_close(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
-	struct psc_i2s_stream *s;
-
-	dev_dbg(psc_i2s->dev, "psc_i2s_pcm_close(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_i2s->capture;
-	else
-		s = &psc_i2s->playback;
-
-	s->stream = NULL;
-	return 0;
-}
-
-static snd_pcm_uframes_t
-psc_i2s_pcm_pointer(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
-	struct psc_i2s_stream *s;
-	dma_addr_t count;
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_i2s->capture;
-	else
-		s = &psc_i2s->playback;
-
-	count = s->period_current_pt - s->period_start;
-
-	return bytes_to_frames(substream->runtime, count);
-}
-
-static struct snd_pcm_ops psc_i2s_pcm_ops = {
-	.open		= psc_i2s_pcm_open,
-	.close		= psc_i2s_pcm_close,
-	.ioctl		= snd_pcm_lib_ioctl,
-	.pointer	= psc_i2s_pcm_pointer,
-};
-
-static u64 psc_i2s_pcm_dmamask = 0xffffffff;
-static int psc_i2s_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
-			   struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	size_t size = mpc5200_pcm_hardware.buffer_bytes_max;
-	int rc = 0;
-
-	dev_dbg(rtd->socdev->dev, "psc_i2s_pcm_new(card=%p, dai=%p, pcm=%p)\n",
-		card, dai, pcm);
-
-	if (!card->dev->dma_mask)
-		card->dev->dma_mask = &psc_i2s_pcm_dmamask;
-	if (!card->dev->coherent_dma_mask)
-		card->dev->coherent_dma_mask = 0xffffffff;
-
-	if (pcm->streams[0].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[0].substream->dma_buffer);
-		if (rc)
-			goto playback_alloc_err;
-	}
-
-	if (pcm->streams[1].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[1].substream->dma_buffer);
-		if (rc)
-			goto capture_alloc_err;
-	}
-
-	return 0;
-
- capture_alloc_err:
-	if (pcm->streams[0].substream)
-		snd_dma_free_pages(&pcm->streams[0].substream->dma_buffer);
- playback_alloc_err:
-	dev_err(card->dev, "Cannot allocate buffer(s)\n");
-	return -ENOMEM;
-}
-
-static void psc_i2s_pcm_free(struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	struct snd_pcm_substream *substream;
-	int stream;
-
-	dev_dbg(rtd->socdev->dev, "psc_i2s_pcm_free(pcm=%p)\n", pcm);
-
-	for (stream = 0; stream < 2; stream++) {
-		substream = pcm->streams[stream].substream;
-		if (substream) {
-			snd_dma_free_pages(&substream->dma_buffer);
-			substream->dma_buffer.area = NULL;
-			substream->dma_buffer.addr = 0;
-		}
-	}
-}
-
-struct snd_soc_platform psc_i2s_pcm_soc_platform = {
-	.name		= "mpc5200-psc-audio",
-	.pcm_ops	= &psc_i2s_pcm_ops,
-	.pcm_new	= &psc_i2s_pcm_new,
-	.pcm_free	= &psc_i2s_pcm_free,
-};
-
-/* ---------------------------------------------------------------------
  * Sysfs attributes for debugging
  */
 
 static ssize_t psc_i2s_status_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 
 	return sprintf(buf, "status=%.4x sicr=%.8x rfnum=%i rfstat=0x%.4x "
 			"tfnum=%i tfstat=0x%.4x\n",
-			in_be16(&psc_i2s->psc_regs->sr_csr.status),
-			in_be32(&psc_i2s->psc_regs->sicr),
-			in_be16(&psc_i2s->fifo_regs->rfnum) & 0x1ff,
-			in_be16(&psc_i2s->fifo_regs->rfstat),
-			in_be16(&psc_i2s->fifo_regs->tfnum) & 0x1ff,
-			in_be16(&psc_i2s->fifo_regs->tfstat));
+			in_be16(&psc_dma->psc_regs->sr_csr.status),
+			in_be32(&psc_dma->psc_regs->sicr),
+			in_be16(&psc_dma->fifo_regs->rfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->rfstat),
+			in_be16(&psc_dma->fifo_regs->tfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->tfstat));
 }
 
-static int *psc_i2s_get_stat_attr(struct psc_i2s *psc_i2s, const char *name)
+static int *psc_i2s_get_stat_attr(struct psc_dma *psc_dma, const char *name)
 {
 	if (strcmp(name, "playback_underrun") == 0)
-		return &psc_i2s->stats.underrun_count;
+		return &psc_dma->stats.underrun_count;
 	if (strcmp(name, "capture_overrun") == 0)
-		return &psc_i2s->stats.overrun_count;
+		return &psc_dma->stats.overrun_count;
 
 	return NULL;
 }
@@ -435,10 +242,10 @@ static int *psc_i2s_get_stat_attr(struct psc_i2s *psc_i2s, const char *name)
 static ssize_t psc_i2s_stat_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_i2s_get_stat_attr(psc_i2s, attr->attr.name);
+	attrib = psc_i2s_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -450,10 +257,10 @@ static ssize_t psc_i2s_stat_store(struct device *dev,
 				  const char *buf,
 				  size_t count)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_i2s_get_stat_attr(psc_i2s, attr->attr.name);
+	attrib = psc_i2s_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -476,7 +283,7 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
 	phys_addr_t fifo;
-	struct psc_i2s *psc_i2s;
+	struct psc_dma *psc_dma;
 	struct resource res;
 	int size, psc_id, irq, rc;
 	const __be32 *prop;
@@ -503,53 +310,53 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 	}
 
 	/* Allocate and initialize the driver private data */
-	psc_i2s = kzalloc(sizeof *psc_i2s, GFP_KERNEL);
-	if (!psc_i2s) {
+	psc_dma = kzalloc(sizeof *psc_dma, GFP_KERNEL);
+	if (!psc_dma) {
 		iounmap(regs);
 		return -ENOMEM;
 	}
-	spin_lock_init(&psc_i2s->lock);
-	psc_i2s->irq = irq;
-	psc_i2s->psc_regs = regs;
-	psc_i2s->fifo_regs = regs + sizeof *psc_i2s->psc_regs;
-	psc_i2s->dev = &op->dev;
-	psc_i2s->playback.psc_i2s = psc_i2s;
-	psc_i2s->capture.psc_i2s = psc_i2s;
-	snprintf(psc_i2s->name, sizeof psc_i2s->name, "PSC%u", psc_id+1);
+	spin_lock_init(&psc_dma->lock);
+	psc_dma->irq = irq;
+	psc_dma->psc_regs = regs;
+	psc_dma->fifo_regs = regs + sizeof *psc_dma->psc_regs;
+	psc_dma->dev = &op->dev;
+	psc_dma->playback.psc_dma = psc_dma;
+	psc_dma->capture.psc_dma = psc_dma;
+	snprintf(psc_dma->name, sizeof psc_dma->name, "PSC%u", psc_id+1);
 
 	/* Fill out the CPU DAI structure */
-	memcpy(&psc_i2s->dai, &psc_i2s_dai_template, sizeof psc_i2s->dai);
-	psc_i2s->dai.private_data = psc_i2s;
-	psc_i2s->dai.name = psc_i2s->name;
-	psc_i2s->dai.id = psc_id;
+	memcpy(&psc_dma->dai, &psc_i2s_dai_template, sizeof psc_dma->dai);
+	psc_dma->dai.private_data = psc_dma;
+	psc_dma->dai.name = psc_dma->name;
+	psc_dma->dai.id = psc_id;
 
 	/* Find the address of the fifo data registers and setup the
 	 * DMA tasks */
 	fifo = res.start + offsetof(struct mpc52xx_psc, buffer.buffer_32);
-	psc_i2s->capture.bcom_task =
+	psc_dma->capture.bcom_task =
 		bcom_psc_gen_bd_rx_init(psc_id, 10, fifo, 512);
-	psc_i2s->playback.bcom_task =
+	psc_dma->playback.bcom_task =
 		bcom_psc_gen_bd_tx_init(psc_id, 10, fifo);
-	if (!psc_i2s->capture.bcom_task ||
-	    !psc_i2s->playback.bcom_task) {
+	if (!psc_dma->capture.bcom_task ||
+	    !psc_dma->playback.bcom_task) {
 		dev_err(&op->dev, "Could not allocate bestcomm tasks\n");
 		iounmap(regs);
-		kfree(psc_i2s);
+		kfree(psc_dma);
 		return -ENODEV;
 	}
 
 	/* Disable all interrupts and reset the PSC */
-	out_be16(&psc_i2s->psc_regs->isr_imr.imr, 0);
-	out_8(&psc_i2s->psc_regs->command, 3 << 4); /* reset transmitter */
-	out_8(&psc_i2s->psc_regs->command, 2 << 4); /* reset receiver */
-	out_8(&psc_i2s->psc_regs->command, 1 << 4); /* reset mode */
-	out_8(&psc_i2s->psc_regs->command, 4 << 4); /* reset error */
+	out_be16(&psc_dma->psc_regs->isr_imr.imr, 0);
+	out_8(&psc_dma->psc_regs->command, 3 << 4); /* reset transmitter */
+	out_8(&psc_dma->psc_regs->command, 2 << 4); /* reset receiver */
+	out_8(&psc_dma->psc_regs->command, 1 << 4); /* reset mode */
+	out_8(&psc_dma->psc_regs->command, 4 << 4); /* reset error */
 
 	/* Configure the serial interface mode; defaulting to CODEC8 mode */
-	psc_i2s->sicr = MPC52xx_PSC_SICR_DTS1 | MPC52xx_PSC_SICR_I2S |
+	psc_dma->sicr = MPC52xx_PSC_SICR_DTS1 | MPC52xx_PSC_SICR_I2S |
 			MPC52xx_PSC_SICR_CLKPOL;
-	out_be32(&psc_i2s->psc_regs->sicr,
-		 psc_i2s->sicr | MPC52xx_PSC_SICR_SIM_CODEC_8);
+	out_be32(&psc_dma->psc_regs->sicr,
+		 psc_dma->sicr | MPC52xx_PSC_SICR_SIM_CODEC_8);
 
 	/* Check for the codec handle.  If it is not present then we
 	 * are done */
@@ -560,54 +367,49 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
 	 * Second write: register Normal mode for non loopback
 	 */
-	out_8(&psc_i2s->psc_regs->mode, 0);
-	out_8(&psc_i2s->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
 
 	/* Set the TX and RX fifo alarm thresholds */
-	out_be16(&psc_i2s->fifo_regs->rfalarm, 0x100);
-	out_8(&psc_i2s->fifo_regs->rfcntl, 0x4);
-	out_be16(&psc_i2s->fifo_regs->tfalarm, 0x100);
-	out_8(&psc_i2s->fifo_regs->tfcntl, 0x7);
+	out_be16(&psc_dma->fifo_regs->rfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->rfcntl, 0x4);
+	out_be16(&psc_dma->fifo_regs->tfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->tfcntl, 0x7);
 
 	/* Lookup the IRQ numbers */
-	psc_i2s->playback.irq =
-		bcom_get_task_irq(psc_i2s->playback.bcom_task);
-	psc_i2s->capture.irq =
-		bcom_get_task_irq(psc_i2s->capture.bcom_task);
+	psc_dma->playback.irq =
+		bcom_get_task_irq(psc_dma->playback.bcom_task);
+	psc_dma->capture.irq =
+		bcom_get_task_irq(psc_dma->capture.bcom_task);
 
 	/* Save what we've done so it can be found again later */
-	dev_set_drvdata(&op->dev, psc_i2s);
+	dev_set_drvdata(&op->dev, psc_dma);
 
 	/* Register the SYSFS files */
-	rc = device_create_file(psc_i2s->dev, &dev_attr_status);
-	rc |= device_create_file(psc_i2s->dev, &dev_attr_capture_overrun);
-	rc |= device_create_file(psc_i2s->dev, &dev_attr_playback_underrun);
+	rc = device_create_file(psc_dma->dev, &dev_attr_status);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_capture_overrun);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_playback_underrun);
 	if (rc)
-		dev_info(psc_i2s->dev, "error creating sysfs files\n");
-
-	snd_soc_register_platform(&psc_i2s_pcm_soc_platform);
+		dev_info(psc_dma->dev, "error creating sysfs files\n");
 
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_platform(&psc_i2s_pcm_soc_platform, op->node,
-				     &psc_i2s->dai);
+	of_snd_soc_register_cpu_dai(op->node, &psc_dma->dai);
 
 	return 0;
 }
 
 static int __devexit psc_i2s_of_remove(struct of_device *op)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(&op->dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(&op->dev);
 
 	dev_dbg(&op->dev, "psc_i2s_remove()\n");
 
-	snd_soc_unregister_platform(&psc_i2s_pcm_soc_platform);
-
-	bcom_gen_bd_rx_release(psc_i2s->capture.bcom_task);
-	bcom_gen_bd_tx_release(psc_i2s->playback.bcom_task);
+	bcom_gen_bd_rx_release(psc_dma->capture.bcom_task);
+	bcom_gen_bd_tx_release(psc_dma->playback.bcom_task);
 
-	iounmap(psc_i2s->psc_regs);
-	iounmap(psc_i2s->fifo_regs);
-	kfree(psc_i2s);
+	iounmap(psc_dma->psc_regs);
+	iounmap(psc_dma->fifo_regs);
+	kfree(psc_dma);
 	dev_set_drvdata(&op->dev, NULL);
 
 	return 0;
diff --git a/sound/soc/fsl/soc-of-simple.c b/sound/soc/fsl/soc-of-simple.c
index 2d0ca0b..fb08ec8 100644
--- a/sound/soc/fsl/soc-of-simple.c
+++ b/sound/soc/fsl/soc-of-simple.c
@@ -34,12 +34,14 @@ struct of_snd_soc_device {
 	struct snd_soc_card card;
 	struct snd_soc_dai_link dai_link;
 	struct platform_device *pdev;
-	struct device_node *platform_node;
+	struct device_node *cpu_dai_node;
 	struct device_node *codec_node;
 };
 
-static struct snd_soc_ops *machine_ops = NULL;
-static char *machine_name = NULL;
+/* template values */
+struct snd_soc_platform *template_platform;
+char *template_name;
+struct snd_soc_ops *template_ops;
 
 static struct of_snd_soc_device *
 of_snd_soc_get_device(struct device_node *codec_node)
@@ -61,7 +63,10 @@ of_snd_soc_get_device(struct device_node *codec_node)
 	of_soc->card.dai_link = &of_soc->dai_link;
 	of_soc->card.num_links = 1;
 	of_soc->device.card = &of_soc->card;
-	of_soc->dai_link.ops = machine_ops;
+	of_soc->dai_link.ops = template_ops;
+	of_soc->card.name = template_name;
+	of_soc->card.platform = template_platform;
+
 	list_add(&of_soc->list, &of_snd_soc_device_list);
 
 	return of_soc;
@@ -74,10 +79,12 @@ static void of_snd_soc_register_device(struct of_snd_soc_device *of_soc)
 
 	/* Only register the device if both the codec and platform have
 	 * been registered */
-	if ((!of_soc->device.codec_data) || (!of_soc->platform_node) || !machine_name)
+	printk("Match %p %p %p %p\n", of_soc->device.codec_data, of_soc->cpu_dai_node, of_soc->card.platform, of_soc->card.name);
+	if ((!of_soc->device.codec_data) || (!of_soc->cpu_dai_node) ||
+									!of_soc->card.platform || !of_soc->card.name)
 		return;
 
-	pr_info("platform<-->codec match achieved; registering machine\n");
+	pr_info("platform<-->codec match achieved; registering fabric\n");
 
 	pdev = platform_device_alloc("soc-audio", of_soc->id);
 	if (!pdev) {
@@ -130,8 +137,7 @@ int of_snd_soc_register_codec(struct snd_soc_codec_device *codec_dev,
 }
 EXPORT_SYMBOL_GPL(of_snd_soc_register_codec);
 
-int of_snd_soc_register_platform(struct snd_soc_platform *platform,
-				 struct device_node *node,
+int of_snd_soc_register_cpu_dai(struct device_node *node,
 				 struct snd_soc_dai *cpu_dai)
 {
 	struct of_snd_soc_device *of_soc;
@@ -139,14 +145,44 @@ int of_snd_soc_register_platform(struct snd_soc_platform *platform,
 	const phandle *handle;
 	int len, rc = 0;
 
-	pr_info("registering ASoC platform driver: %s\n", node->full_name);
+	pr_info("registering ASoC CPU DAI driver: %s\n", node->full_name);
 
 	handle = of_get_property(node, "codec-handle", &len);
-	if (!handle || len < sizeof(handle))
-		return -ENODEV;
-	codec_node = of_find_node_by_phandle(*handle);
-	if (!codec_node)
-		return -ENODEV;
+	if (!handle || len < sizeof(handle)) {
+		/* Check for the codec child nodes */
+		for_each_child_of_node(node, codec_node) {
+			struct platform_device *pdev;
+			struct dev_archdata dev_ad = {};
+			char name[MODULE_NAME_LEN];
+			const u32 *addr;
+			int len;
+
+			if (of_modalias_node(codec_node, name, sizeof(name)) < 0)
+				continue;
+
+			addr = of_get_property(codec_node, "reg", &len);
+			if (!addr || len < sizeof(int) || *addr > (1 << 10) - 1) {
+				printk(KERN_ERR "psc-ac97: invalid reg in device tree\n");
+				continue;
+			}
+			request_module("%s", name);
+
+			pdev = platform_device_alloc(name, 0);
+
+			dev_archdata_set_node(&dev_ad, codec_node);
+			pdev->dev.archdata = dev_ad;
+
+			rc = platform_device_add(pdev);
+			if (rc) {
+				platform_device_put(pdev);
+				return rc;
+			}
+		}
+	} else {
+		codec_node = of_find_node_by_phandle(*handle);
+		if (!codec_node)
+			return -ENODEV;
+	}
 	pr_info("looking for codec: %s\n", codec_node->full_name);
 
 	mutex_lock(&of_snd_soc_mutex);
@@ -156,10 +192,8 @@ int of_snd_soc_register_platform(struct snd_soc_platform *platform,
 		goto out;
 	}
 
-	of_soc->platform_node = node;
+	of_soc->cpu_dai_node = node;
 	of_soc->dai_link.cpu_dai = cpu_dai;
-	of_soc->card.platform = platform;
-	of_soc->card.name = machine_name;
 
 	/* Now try to register the SoC device */
 	of_snd_soc_register_device(of_soc);
@@ -168,20 +202,41 @@ int of_snd_soc_register_platform(struct snd_soc_platform *platform,
 	mutex_unlock(&of_snd_soc_mutex);
 	return rc;
 }
-EXPORT_SYMBOL_GPL(of_snd_soc_register_platform);
+EXPORT_SYMBOL_GPL(of_snd_soc_register_cpu_dai);
 
-void of_snd_soc_register_machine(char *name, struct snd_soc_ops *ops)
+int of_snd_soc_register_platform(struct snd_soc_platform *platform)
 {
 	struct of_snd_soc_device *of_soc;
+	int rc = 0;
 
-	machine_name = name;
-	machine_ops = ops;
+	pr_info("registering ASoC platform driver: %s\n", platform->name);
+	template_platform = platform;
 
+	mutex_lock(&of_snd_soc_mutex);
 	list_for_each_entry(of_soc, &of_snd_soc_device_list, list) {
-		of_soc->dai_link.ops = machine_ops;
-		of_soc->card.name = machine_name;
+		of_soc->card.platform = platform;
 		of_snd_soc_register_device(of_soc);
 	}
+	mutex_unlock(&of_snd_soc_mutex);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(of_snd_soc_register_platform);
 
+int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops)
+{
+	struct of_snd_soc_device *of_soc;
+
+	pr_info("registering ASoC fabric driver: %s\n", name);
+	template_name = name;
+	template_ops = ops;
+
+	mutex_lock(&of_snd_soc_mutex);
+	list_for_each_entry(of_soc, &of_snd_soc_device_list, list) {
+		of_soc->dai_link.ops = ops;
+		of_soc->card.name = name;
+		of_snd_soc_register_device(of_soc);
+	}
+	mutex_unlock(&of_snd_soc_mutex);
+	return 0;
 }
-EXPORT_SYMBOL_GPL(of_snd_soc_register_machine);
+EXPORT_SYMBOL_GPL(of_snd_soc_register_fabric);
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index 8d0389a..144b171 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -20,6 +20,8 @@
  *   o Support TDM on PCM and I2S
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
