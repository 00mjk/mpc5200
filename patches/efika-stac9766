Bottom: a5167817f55bf16c8ebd368c7602a2b41d6ed8ea
Top:    2ed2d8a5dd6dcf8d3be87f39b269fa71cc7230f3
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-10 16:31:11 -0400

Fabric bindings for STAC9766 on the Efika


---

diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index 16a1e28..0926492 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -53,9 +53,9 @@ config SND_SOC_MPC5200_AC97
 	  Say Y here to support the MPC5200 PSCs in AC97 mode.
 
 config SND_MPC52xx_SOC_EFIKA
-	tristate "SoC AC97 Audio support for bbplan Efika and STAC9722"
-	depends on SND_MPC52xx_SOC && PPC_EFIKA
-	select SND_MPC52xx_SOC_AC97
+	tristate "SoC AC97 Audio support for bbplan Efika and STAC9766"
+	depends on PPC_EFIKA
+	select SND_SOC_MPC5200_AC97
 	select SND_SOC_STAC9766
 	help
 	  Say Y if you want to add support for sound on the Efika.
diff --git a/sound/soc/fsl/Makefile b/sound/soc/fsl/Makefile
index 70c44bf..dd8febc 100644
--- a/sound/soc/fsl/Makefile
+++ b/sound/soc/fsl/Makefile
@@ -17,5 +17,8 @@ obj-$(CONFIG_SND_SOC_MPC5200_AC97) += mpc5200_psc_ac97.o
 
 # MPC5200 Machine Support
 snd_soc_dspeak01_fabric-objs := dspeak01_fabric.o
+snd-soc-efika-stac9766-objs := efika-stac9766.o
 
 obj-$(CONFIG_SND_MPC52xx_SOC_DSPEAK01) += snd_soc_dspeak01_fabric.o
+obj-$(CONFIG_SND_MPC52xx_SOC_EFIKA) += snd-soc-efika-stac9766.o
+
diff --git a/sound/soc/fsl/efika-stac9766.c b/sound/soc/fsl/efika-stac9766.c
new file mode 100644
index 0000000..39b3693
--- /dev/null
+++ b/sound/soc/fsl/efika-stac9766.c
@@ -0,0 +1,328 @@
+/*
+ * Efika driver for the PSC of the Freescale MPC52xx configured as AC97 interface
+ *
+ * Copyright 2008 Jon Smirl, Digispeaker
+ * Author: Jon Smirl <jonsmirl@gmail.com>
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/dma-mapping.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+#include <sound/soc-of-simple.h>
+#include <sound/soc-dapm.h>
+
+#include "mpc5200_dma.h"
+#include "mpc5200_psc_ac97.h"
+#include "../codecs/stac9766.h"
+
+#define EFIKA_HP        0
+#define EFIKA_MIC_INT   1
+#define EFIKA_HEADSET   2
+#define EFIKA_HP_OFF    3
+#define EFIKA_SPK_ON    0
+#define EFIKA_SPK_OFF   1
+
+#define DRV_NAME "efika-psc-ac97"
+
+static int efika_jack_func;
+static int efika_spk_func;
+
+static void efika_ext_control(struct snd_soc_codec *codec)
+{
+	/* set up jack connection */
+	switch (efika_jack_func) {
+	case EFIKA_HP:
+		snd_soc_dapm_disable_pin(codec, "Headset Jack");
+		snd_soc_dapm_disable_pin(codec, "Mic (Internal)");
+		snd_soc_dapm_enable_pin(codec, "Headphone Jack");
+		break;
+	case EFIKA_MIC_INT:
+		snd_soc_dapm_disable_pin(codec, "Headset Jack");
+		snd_soc_dapm_disable_pin(codec, "Headphone Jack");
+		snd_soc_dapm_enable_pin(codec, "Mic (Internal)");
+		break;
+	case EFIKA_HEADSET:
+		snd_soc_dapm_disable_pin(codec, "Headphone Jack");
+		snd_soc_dapm_disable_pin(codec, "Mic (Internal)");
+		snd_soc_dapm_enable_pin(codec, "Headset Jack");
+		break;
+	}
+
+	if (efika_spk_func == EFIKA_SPK_ON)
+		snd_soc_dapm_enable_pin(codec, "Speaker");
+	else
+		snd_soc_dapm_disable_pin(codec, "Speaker");
+
+	snd_soc_dapm_sync(codec);
+}
+
+static int efika_get_jack(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = efika_jack_func;
+	return 0;
+}
+
+static int efika_set_jack(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec =  snd_kcontrol_chip(kcontrol);
+
+	if (efika_jack_func == ucontrol->value.integer.value[0])
+		return 0;
+
+	efika_jack_func = ucontrol->value.integer.value[0];
+	efika_ext_control(codec);
+	return 1;
+}
+
+static int efika_get_spk(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = efika_spk_func;
+	return 0;
+}
+
+static int efika_set_spk(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec =  snd_kcontrol_chip(kcontrol);
+
+	if (efika_spk_func == ucontrol->value.integer.value[0])
+		return 0;
+
+	efika_spk_func = ucontrol->value.integer.value[0];
+	efika_ext_control(codec);
+	return 1;
+}
+
+/* efika dapm event handlers */
+static int efika_hp_event(struct snd_soc_dapm_widget *w,
+								struct snd_kcontrol *k, int event)
+{
+	//if (SND_SOC_DAPM_EVENT_ON(event))
+	//	set_tc6393_gpio(&tc6393_device.dev,EFIKA_TC6393_L_MUTE);
+	//else
+	//	reset_tc6393_gpio(&tc6393_device.dev,EFIKA_TC6393_L_MUTE);
+	return 0;
+}
+
+/* efika codec dapm widgets */
+static const struct snd_soc_dapm_widget efika_dapm_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", efika_hp_event),
+	SND_SOC_DAPM_HP("Headset Jack", NULL),
+	SND_SOC_DAPM_MIC("Mic (Internal)", NULL),
+	SND_SOC_DAPM_SPK("Speaker", NULL),
+};
+
+/* efika audio map */
+static const struct snd_soc_dapm_route audio_map[] = {
+
+	/* headphone connected to HPOUTL, HPOUTR */
+	{"Headphone Jack", NULL, "HPOUTL"},
+	{"Headphone Jack", NULL, "HPOUTR"},
+
+	/* ext speaker connected to LOUT2, ROUT2 */
+	{"Speaker", NULL, "LOUT2"},
+	{"Speaker", NULL, "ROUT2"},
+
+	/* internal mic is connected to mic1, mic2 differential - with bias */
+	{"MIC1", NULL, "Mic Bias"},
+	{"MIC2", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Mic (Internal)"},
+
+	/* headset is connected to HPOUTR, and LINEINR with bias */
+	{"Headset Jack", NULL, "HPOUTR"},
+	{"LINEINR", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Headset Jack"},
+
+	{NULL, NULL, NULL},
+};
+
+static const char *jack_function[] = {"Headphone", "Mic", "Line", "Headset", "Off"};
+static const char *spk_function[] = {"On", "Off"};
+static const struct soc_enum efika_enum[] = {
+	SOC_ENUM_SINGLE_EXT(5, jack_function),
+	SOC_ENUM_SINGLE_EXT(2, spk_function),
+};
+
+static const struct snd_kcontrol_new efika_controls[] = {
+	SOC_ENUM_EXT("Jack Function", efika_enum[0], efika_get_jack,
+		efika_set_jack),
+	SOC_ENUM_EXT("Speaker Function", efika_enum[1], efika_get_spk,
+		efika_set_spk),
+};
+
+static int efika_stac9766_write(void *control_data, long val, int reg)
+{
+	struct snd_ac97 *ac97 = (struct snd_ac97 *)control_data;
+	ac97->bus->ops->write(ac97, reg, val);
+	return 0;
+}
+
+static int efika_stac9766_read(void *control_data, int reg)
+{
+	struct snd_ac97 *ac97 = (struct snd_ac97 *)control_data;
+
+	return ac97->bus->ops->read(ac97, reg);
+}
+
+static int efika_stac9766_init(struct snd_soc_codec *codec)
+{
+
+	/* set up efika codec pins */
+	snd_soc_dapm_disable_pin(codec, "OUT3");
+	snd_soc_dapm_disable_pin(codec, "MONOOUT");
+
+	snd_soc_dapm_new_controls(codec, efika_dapm_widgets,
+					ARRAY_SIZE(efika_dapm_widgets));
+
+	snd_soc_dapm_add_routes(codec, audio_map, ARRAY_SIZE(audio_map));
+	snd_soc_dapm_sync(codec);
+
+	return 0;
+}
+
+static struct snd_soc_dai_link efika_dai[] = {
+	{
+		.name = "AC97 Analog",
+		.stream_name = "AC97 Analog",
+		.cpu_dai = &mpc5200_dai_ac97[MPC5200_AC97_ANALOG],
+		.codec_dai = &stac9766_dai[STAC9766_DAI_AC97_ANALOG],
+		.init = efika_stac9766_init,
+	},
+	{
+		.name = "AC97 Digital",
+		.stream_name = "AC97 Digital",
+		.cpu_dai = &mpc5200_dai_ac97[MPC5200_AC97_DIGITAL],
+		.codec_dai = &stac9766_dai[STAC9766_DAI_AC97_DIGITAL],
+	},
+};
+
+static struct snd_soc_card efika = {
+	.name = "Efika-STAC9766",
+	.platform = &mpc5200_soc_platform,
+	.dai_link = efika_dai,
+	.num_links = ARRAY_SIZE(efika_dai),
+};
+
+static struct snd_soc_device efika_snd_devdata = {
+	.card = &efika,
+	.codec_dev = &soc_codec_dev_stac9766,
+};
+
+static struct platform_device *efika_snd_device;
+/*
+ * This is an example codec initialization for a stac9766 connected to a
+ * mpc5200. It is missing logic to detect hp/mic insertions and logic
+ * to re-route the audio in such an event.
+ */
+static int efika_stac9766_probe(struct of_device *op, const struct of_device_id *match)
+{
+	efika_snd_device = platform_device_alloc("soc-audio", -1);
+	if (!efika_snd_device)
+		return -ENOMEM;
+
+	platform_set_drvdata(efika_snd_device, &efika_snd_devdata);
+	efika_snd_devdata.dev = &efika_snd_device->dev;
+	return platform_device_add(efika_snd_device);
+}
+
+static int __exit efika_stac9766_remove(struct of_device *op)
+{
+	platform_device_unregister(efika_snd_device);
+	return 0;
+}
+
+#ifdef CONFIG_PM
+
+static int efika_stac9766_suspend(struct of_device *op,
+	pm_message_t state)
+{
+	struct snd_soc_codec *codec = platform_get_drvdata(op);
+	return snd_soc_suspend(codec, state);
+}
+
+static int efika_stac9766_resume(struct of_device *op)
+{
+	struct snd_soc_codec *codec = platform_get_drvdata(op);
+	return snd_soc_resume(codec);
+}
+
+#else
+#define efika_stac9766_suspend NULL
+#define efika_stac9766_resume  NULL
+#endif
+
+
+/* Match table for of_platform binding */
+static struct of_device_id psc_ac97_match[] __devinitdata = {
+	{ .compatible = "fsl,mpc5200-psc-ac97", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, psc_ac97_match);
+
+static struct of_platform_driver efika_stac9766_driver = {
+	.owner		= THIS_MODULE,
+	.name		= DRV_NAME,
+	.match_table	= psc_ac97_match,
+	.probe		= efika_stac9766_probe,
+	.remove		= efika_stac9766_remove,
+	.suspend	= efika_stac9766_suspend,
+	.resume		= efika_stac9766_resume,
+	.driver		= {
+		.name	= DRV_NAME,
+	},
+};
+
+
+/* ======================================================================== */
+/* Module                                                                   */
+/* ======================================================================== */
+
+static int __init
+efika_stac9766_init(void)
+{
+	int rv;
+
+	if (!machine_is_compatible("bplan,efika"))
+		return -ENODEV;
+
+	rv = of_register_platform_driver(&efika_stac9766_driver);
+	if (rv) {
+		printk(KERN_ERR DRV_NAME ": "
+			"of_register_platform_driver failed (%i)\n", rv);
+		return rv;
+	}
+
+	return 0;
+}
+
+static void __exit
+efika_stac9766_exit(void)
+{
+	of_unregister_platform_driver(&efika_stac9766_driver);
+}
+
+module_init(efika_stac9766_init);
+module_exit(efika_stac9766_exit);
+
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_DESCRIPTION(DRV_NAME ": Freescale MPC52xx Efika fabric driver");
+MODULE_LICENSE("GPL");
+
