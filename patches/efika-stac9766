Bottom: 7090f3c8e5cf61768300de4d78ea10e18b3f1c24
Top:    94ccc57ece966ee080aed477ca28177cdb800762
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-17 20:45:40 -0400

Fabric bindings for STAC9766 on the Efika


---

diff --git a/sound/soc/codecs/stac9766.c b/sound/soc/codecs/stac9766.c
index 2f4f2f8..b915262 100644
--- a/sound/soc/codecs/stac9766.c
+++ b/sound/soc/codecs/stac9766.c
@@ -25,6 +25,7 @@
 #include <sound/pcm_params.h>
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
+#include <sound/soc-of-simple.h>
 
 #include "stac9766.h"
 
@@ -449,6 +450,7 @@ static int stac9766_codec_probe(struct platform_device *pdev)
 	ret = snd_soc_new_ac97_codec(codec, &soc_ac97_ops, 0);
 	if (ret < 0)
 		goto codec_err;
+	codec->ac97->private_data = platform_get_drvdata(pdev);
 
 	/* register pcms */
 	ret = snd_soc_new_pcms(socdev, SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1);
@@ -513,7 +515,37 @@ struct snd_soc_codec_device soc_codec_dev_stac9766 = {
 };
 EXPORT_SYMBOL_GPL(soc_codec_dev_stac9766);
 
+static int __init stac9766_probe(struct platform_device *pdev)
+{
+#if defined(CONFIG_SND_SOC_OF_SIMPLE)
+	/* Tell the of_soc helper about this codec */
+	of_snd_soc_register_codec(&soc_codec_dev_stac9766, pdev->dev.archdata.of_node, stac9766_dai,
+				  pdev->dev.archdata.of_node);
+#endif
+	return 0;
+}
+
+static struct platform_driver stac9766_driver = {
+	.probe	= stac9766_probe,
+	.driver	= {
+		.name	= "stac9766",
+	},
+};
+
+static __init int stac9766_driver_init(void)
+{
+
+	snd_soc_register_dai(stac9766_dai);
+	return platform_driver_register(&stac9766_driver);
+}
+
+static __exit void stac9766_driver_exit(void)
+{
+}
+
+module_init(stac9766_driver_init);
+module_exit(stac9766_driver_exit);
 
-MODULE_DESCRIPTION("ASoC STAC9766 driver");
-MODULE_AUTHOR("Jon Smirl");
+MODULE_DESCRIPTION("ASoC stac9766 driver");
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
 MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/tas5504.c b/sound/soc/codecs/tas5504.c
index 6ac3289..ae5813e 100644
--- a/sound/soc/codecs/tas5504.c
+++ b/sound/soc/codecs/tas5504.c
@@ -820,9 +820,11 @@ static int tas5504_i2c_probe(struct i2c_client *client,
 	INIT_LIST_HEAD(&priv->codec.dapm_widgets);
 	INIT_LIST_HEAD(&priv->codec.dapm_paths);
 
+#if defined(CONFIG_SND_SOC_OF_SIMPLE)
 	/* Tell the of_soc helper about this codec */
 	of_snd_soc_register_codec(&tas5504_soc_codec_dev, priv, &tas5504_dai,
 				  client->dev.archdata.of_node);
+#endif
 
 	dev_dbg(&client->dev, "I2C device initialized\n");
 	return 0;
diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index 16a1e28..0926492 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -53,9 +53,9 @@ config SND_SOC_MPC5200_AC97
 	  Say Y here to support the MPC5200 PSCs in AC97 mode.
 
 config SND_MPC52xx_SOC_EFIKA
-	tristate "SoC AC97 Audio support for bbplan Efika and STAC9722"
-	depends on SND_MPC52xx_SOC && PPC_EFIKA
-	select SND_MPC52xx_SOC_AC97
+	tristate "SoC AC97 Audio support for bbplan Efika and STAC9766"
+	depends on PPC_EFIKA
+	select SND_SOC_MPC5200_AC97
 	select SND_SOC_STAC9766
 	help
 	  Say Y if you want to add support for sound on the Efika.
diff --git a/sound/soc/fsl/Makefile b/sound/soc/fsl/Makefile
index 70c44bf..dd8febc 100644
--- a/sound/soc/fsl/Makefile
+++ b/sound/soc/fsl/Makefile
@@ -17,5 +17,8 @@ obj-$(CONFIG_SND_SOC_MPC5200_AC97) += mpc5200_psc_ac97.o
 
 # MPC5200 Machine Support
 snd_soc_dspeak01_fabric-objs := dspeak01_fabric.o
+snd-soc-efika-stac9766-objs := efika-stac9766.o
 
 obj-$(CONFIG_SND_MPC52xx_SOC_DSPEAK01) += snd_soc_dspeak01_fabric.o
+obj-$(CONFIG_SND_MPC52xx_SOC_EFIKA) += snd-soc-efika-stac9766.o
+
diff --git a/sound/soc/fsl/efika-stac9766.c b/sound/soc/fsl/efika-stac9766.c
new file mode 100644
index 0000000..340d7a3
--- /dev/null
+++ b/sound/soc/fsl/efika-stac9766.c
@@ -0,0 +1,304 @@
+/*
+ * Efika driver for the PSC of the Freescale MPC52xx configured as AC97 interface
+ *
+ * Copyright 2008 Jon Smirl, Digispeaker
+ * Author: Jon Smirl <jonsmirl@gmail.com>
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/dma-mapping.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+#include <sound/soc-of-simple.h>
+#include <sound/soc-dapm.h>
+
+#include "mpc5200_dma.h"
+#include "mpc5200_psc_ac97.h"
+#include "../codecs/stac9766.h"
+
+#define EFIKA_HP        0
+#define EFIKA_MIC_INT   1
+#define EFIKA_HEADSET   2
+#define EFIKA_HP_OFF    3
+#define EFIKA_SPK_ON    0
+#define EFIKA_SPK_OFF   1
+
+#define DRV_NAME "efika-psc-ac97"
+
+static int efika_jack_func;
+static int efika_spk_func;
+
+static void efika_ext_control(struct snd_soc_codec *codec)
+{
+	/* set up jack connection */
+	switch (efika_jack_func) {
+	case EFIKA_HP:
+		snd_soc_dapm_disable_pin(codec, "Headset Jack");
+		snd_soc_dapm_disable_pin(codec, "Mic (Internal)");
+		snd_soc_dapm_enable_pin(codec, "Headphone Jack");
+		break;
+	case EFIKA_MIC_INT:
+		snd_soc_dapm_disable_pin(codec, "Headset Jack");
+		snd_soc_dapm_disable_pin(codec, "Headphone Jack");
+		snd_soc_dapm_enable_pin(codec, "Mic (Internal)");
+		break;
+	case EFIKA_HEADSET:
+		snd_soc_dapm_disable_pin(codec, "Headphone Jack");
+		snd_soc_dapm_disable_pin(codec, "Mic (Internal)");
+		snd_soc_dapm_enable_pin(codec, "Headset Jack");
+		break;
+	}
+
+	if (efika_spk_func == EFIKA_SPK_ON)
+		snd_soc_dapm_enable_pin(codec, "Speaker");
+	else
+		snd_soc_dapm_disable_pin(codec, "Speaker");
+
+	snd_soc_dapm_sync(codec);
+}
+
+static int efika_get_jack(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = efika_jack_func;
+	return 0;
+}
+
+static int efika_set_jack(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec =  snd_kcontrol_chip(kcontrol);
+
+	if (efika_jack_func == ucontrol->value.integer.value[0])
+		return 0;
+
+	efika_jack_func = ucontrol->value.integer.value[0];
+	efika_ext_control(codec);
+	return 1;
+}
+
+static int efika_get_spk(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = efika_spk_func;
+	return 0;
+}
+
+static int efika_set_spk(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec =  snd_kcontrol_chip(kcontrol);
+
+	if (efika_spk_func == ucontrol->value.integer.value[0])
+		return 0;
+
+	efika_spk_func = ucontrol->value.integer.value[0];
+	efika_ext_control(codec);
+	return 1;
+}
+
+/* efika dapm event handlers */
+static int efika_hp_event(struct snd_soc_dapm_widget *w,
+								struct snd_kcontrol *k, int event)
+{
+	//if (SND_SOC_DAPM_EVENT_ON(event))
+	//	set_tc6393_gpio(&tc6393_device.dev,EFIKA_TC6393_L_MUTE);
+	//else
+	//	reset_tc6393_gpio(&tc6393_device.dev,EFIKA_TC6393_L_MUTE);
+	return 0;
+}
+
+/* efika codec dapm widgets */
+static const struct snd_soc_dapm_widget efika_dapm_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", efika_hp_event),
+	SND_SOC_DAPM_HP("Headset Jack", NULL),
+	SND_SOC_DAPM_MIC("Mic (Internal)", NULL),
+	SND_SOC_DAPM_SPK("Speaker", NULL),
+};
+
+/* efika audio map */
+static const struct snd_soc_dapm_route audio_map[] = {
+
+	/* headphone connected to HPOUTL, HPOUTR */
+	{"Headphone Jack", NULL, "HPOUTL"},
+	{"Headphone Jack", NULL, "HPOUTR"},
+
+	/* ext speaker connected to LOUT2, ROUT2 */
+	{"Speaker", NULL, "LOUT2"},
+	{"Speaker", NULL, "ROUT2"},
+
+	/* internal mic is connected to mic1, mic2 differential - with bias */
+	{"MIC1", NULL, "Mic Bias"},
+	{"MIC2", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Mic (Internal)"},
+
+	/* headset is connected to HPOUTR, and LINEINR with bias */
+	{"Headset Jack", NULL, "HPOUTR"},
+	{"LINEINR", NULL, "Mic Bias"},
+	{"Mic Bias", NULL, "Headset Jack"},
+
+	{NULL, NULL, NULL},
+};
+
+static const char *jack_function[] = {"Headphone", "Mic", "Line", "Headset", "Off"};
+static const char *spk_function[] = {"On", "Off"};
+static const struct soc_enum efika_enum[] = {
+	SOC_ENUM_SINGLE_EXT(5, jack_function),
+	SOC_ENUM_SINGLE_EXT(2, spk_function),
+};
+
+static const struct snd_kcontrol_new efika_controls[] = {
+	SOC_ENUM_EXT("Jack Function", efika_enum[0], efika_get_jack,
+		efika_set_jack),
+	SOC_ENUM_EXT("Speaker Function", efika_enum[1], efika_get_spk,
+		efika_set_spk),
+};
+
+static int efika_init(struct snd_soc_codec *codec)
+{
+
+	/* set up efika codec pins */
+	snd_soc_dapm_disable_pin(codec, "OUT3");
+	snd_soc_dapm_disable_pin(codec, "MONOOUT");
+
+	snd_soc_dapm_new_controls(codec, efika_dapm_widgets,
+					ARRAY_SIZE(efika_dapm_widgets));
+
+	snd_soc_dapm_add_routes(codec, audio_map, ARRAY_SIZE(audio_map));
+	snd_soc_dapm_sync(codec);
+
+	return 0;
+}
+
+static struct snd_soc_dai_link efika_dai[] = {
+	{
+		.name = "AC97 Analog",
+		.stream_name = "AC97 Analog",
+		.cpu_dai = &mpc5200_dai_ac97[MPC5200_AC97_ANALOG],
+		.codec_dai = &stac9766_dai[STAC9766_DAI_AC97_ANALOG],
+		.init = efika_init,
+	},
+	{
+		.name = "AC97 Digital",
+		.stream_name = "AC97 Digital",
+		.cpu_dai = &mpc5200_dai_ac97[MPC5200_AC97_DIGITAL],
+		.codec_dai = &stac9766_dai[STAC9766_DAI_AC97_DIGITAL],
+	},
+};
+
+static struct snd_soc_card efika = {
+	.name = "Efika-STAC9766",
+	.platform = &mpc5200_soc_platform,
+	.dai_link = efika_dai,
+	.num_links = ARRAY_SIZE(efika_dai),
+};
+
+static struct snd_soc_device efika_snd_devdata = {
+	.card = &efika,
+	.codec_dev = &soc_codec_dev_stac9766,
+};
+
+/*
+ * This is an example codec initialization for a stac9766 connected to a
+ * mpc5200. It is missing logic to detect hp/mic insertions and logic
+ * to re-route the audio in such an event.
+ */
+static int efika_stac9766_probe(struct of_device *op, const struct of_device_id *match)
+{
+	of_snd_soc_register_machine("Efika", NULL);
+	return 0;
+}
+
+static int __exit efika_stac9766_remove(struct of_device *op)
+{
+	return 0;
+}
+
+#ifdef CONFIG_PM
+
+static int efika_stac9766_suspend(struct of_device *op,
+	pm_message_t state)
+{
+	return 0;
+}
+
+static int efika_stac9766_resume(struct of_device *op)
+{
+	return 0;
+}
+
+#else
+#define efika_stac9766_suspend NULL
+#define efika_stac9766_resume  NULL
+#endif
+
+/* Match table for of_platform binding */
+static struct of_device_id psc_ac97_match[] __devinitdata = {
+	{ .compatible = "efika-stac9766", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, psc_ac97_match);
+
+static struct of_platform_driver efika_stac9766_driver = {
+	.owner		= THIS_MODULE,
+	.name		= DRV_NAME,
+	.match_table	= psc_ac97_match,
+	.probe		= efika_stac9766_probe,
+	.remove		= efika_stac9766_remove,
+	.suspend	= efika_stac9766_suspend,
+	.resume		= efika_stac9766_resume,
+	.driver		= {
+		.name	= DRV_NAME,
+	},
+};
+
+
+/* ======================================================================== */
+/* Module                                                                   */
+/* ======================================================================== */
+
+static int __init
+efika_stac9766_init(void)
+{
+	int rv;
+
+	if (!machine_is_compatible("bplan,efika"))
+		return -ENODEV;
+
+	rv = of_register_platform_driver(&efika_stac9766_driver);
+	if (rv) {
+		printk(KERN_ERR DRV_NAME ": "
+			"of_register_platform_driver failed (%i)\n", rv);
+		return rv;
+	}
+
+	return 0;
+}
+
+static void __exit
+efika_stac9766_exit(void)
+{
+	of_unregister_platform_driver(&efika_stac9766_driver);
+}
+
+module_init(efika_stac9766_init);
+module_exit(efika_stac9766_exit);
+
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_DESCRIPTION(DRV_NAME ": mpc5200 Efika fabric driver");
+MODULE_LICENSE("GPL");
+
diff --git a/sound/soc/fsl/mpc5200_dma.c b/sound/soc/fsl/mpc5200_dma.c
index c09faf3..4a3dbd8 100644
--- a/sound/soc/fsl/mpc5200_dma.c
+++ b/sound/soc/fsl/mpc5200_dma.c
@@ -4,6 +4,8 @@
  * Copyright (C) 2008 Secret Lab Technologies Ltd.
  */
 
+#define DEBUG
+
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/interrupt.h>
@@ -493,14 +495,14 @@ static int psc_dma_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
 		card->dev->coherent_dma_mask = 0xffffffff;
 
 	if (pcm->streams[0].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
+		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->card->dev, size,
 					&pcm->streams[0].substream->dma_buffer);
 		if (rc)
 			goto playback_alloc_err;
 	}
 
 	if (pcm->streams[1].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
+		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->card->dev, size,
 					&pcm->streams[1].substream->dma_buffer);
 		if (rc)
 			goto capture_alloc_err;
@@ -542,3 +544,17 @@ struct snd_soc_platform mpc5200_soc_platform = {
 };
 EXPORT_SYMBOL_GPL(mpc5200_soc_platform);
 
+static int __init mpc5200_soc_platform_init(void)
+{
+	return snd_soc_register_platform(&mpc5200_soc_platform);
+}
+module_init(mpc5200_soc_platform_init);
+
+static void __exit mpc5200_soc_platform_exit(void)
+{
+	snd_soc_unregister_platform(&mpc5200_soc_platform);
+}
+module_exit(mpc5200_soc_platform_exit);
+
+
+
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 9ec8ac5..eb17c42 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -9,6 +9,8 @@
  * published by the Free Software Foundation.
  */
 
+#define DEBUG
+
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/interrupt.h>
@@ -34,10 +36,11 @@
 #include "mpc5200_dma.h"
 #include "mpc5200_psc_ac97.h"
 
-MODULE_AUTHOR("Jon Smirl");
-MODULE_DESCRIPTION("MPC52xx AC97 module");
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_DESCRIPTION("mpc5200 AC97 module");
 MODULE_LICENSE("GPL");
 
+
 /**
  * PSC_AC97_RATES: sample rates supported by the AC97
  *
@@ -147,7 +150,7 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 		udelay(10);
 
 	if (!timeout) {
-		printk(KERN_ERR DRV_NAME ": timeout on ac97 read (val)\n");
+		printk(KERN_ERR DRV_NAME ": timeout on ac97 read (val) %x\n", in_be16(&psc_ac97->psc_regs->sr_csr.status));
 		return 0xffff;
 	}
 
@@ -194,7 +197,7 @@ static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 {
 	struct psc_ac97 *psc_ac97 = ac97->private_data;
 
-	printk("psc_ac97_cold_reset\n");
+	printk("psc_ac97_cold_reset %p\n", ac97);
 
 	/* Do a cold reset */
 	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
@@ -429,139 +432,6 @@ static struct snd_soc_dai psc_ac97_dai_template = {
 	.ops = &psc_ac97_dai_ops,
 };
 
-/* ---------------------------------------------------------------------
- * The PSC AC97 'ASoC platform' driver
- *
- * Can be referenced by an 'ASoC machine' driver
- * This driver only deals with the audio bus; it doesn't have any
- * interaction with the attached codec
- */
-
-static int psc_ac97_pcm_open(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
-	struct psc_ac97_stream *s;
-
-	dev_dbg(psc_ac97->dev, "psc_ac97_pcm_open(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_ac97->capture;
-	else
-		s = &psc_ac97->playback;
-
-	snd_soc_set_runtime_hwparams(substream, &mpc5200_pcm_hardware);
-
-	s->stream = substream;
-	return 0;
-}
-
-static int psc_ac97_pcm_close(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
-	struct psc_ac97_stream *s;
-
-	dev_dbg(psc_ac97->dev, "psc_ac97_pcm_close(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_ac97->capture;
-	else
-		s = &psc_ac97->playback;
-
-	s->stream = NULL;
-	return 0;
-}
-
-static snd_pcm_uframes_t
-psc_ac97_pcm_pointer(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
-	struct psc_ac97_stream *s;
-	dma_addr_t count;
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_ac97->capture;
-	else
-		s = &psc_ac97->playback;
-
-	count = s->period_current_pt - s->period_start;
-
-	return bytes_to_frames(substream->runtime, count);
-}
-
-static struct snd_pcm_ops psc_ac97_pcm_ops = {
-	.open		= psc_ac97_pcm_open,
-	.close		= psc_ac97_pcm_close,
-	.ioctl		= snd_pcm_lib_ioctl,
-	.pointer	= psc_ac97_pcm_pointer,
-};
-
-static u64 psc_ac97_pcm_dmamask = 0xffffffff;
-static int psc_ac97_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
-			   struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	size_t size = mpc5200_pcm_hardware.buffer_bytes_max;
-	int rc = 0;
-
-	dev_dbg(rtd->socdev->dev, "psc_ac97_pcm_new(card=%p, dai=%p, pcm=%p)\n",
-		card, dai, pcm);
-
-	if (!card->dev->dma_mask)
-		card->dev->dma_mask = &psc_ac97_pcm_dmamask;
-	if (!card->dev->coherent_dma_mask)
-		card->dev->coherent_dma_mask = 0xffffffff;
-
-	if (pcm->streams[0].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[0].substream->dma_buffer);
-		if (rc)
-			goto playback_alloc_err;
-	}
-
-	if (pcm->streams[1].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[1].substream->dma_buffer);
-		if (rc)
-			goto capture_alloc_err;
-	}
-
-	return 0;
-
- capture_alloc_err:
-	if (pcm->streams[0].substream)
-		snd_dma_free_pages(&pcm->streams[0].substream->dma_buffer);
- playback_alloc_err:
-	dev_err(card->dev, "Cannot allocate buffer(s)\n");
-	return -ENOMEM;
-}
-
-static void psc_ac97_pcm_free(struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	struct snd_pcm_substream *substream;
-	int stream;
-
-	dev_dbg(rtd->socdev->dev, "psc_ac97_pcm_free(pcm=%p)\n", pcm);
-
-	for (stream = 0; stream < 2; stream++) {
-		substream = pcm->streams[stream].substream;
-		if (substream) {
-			snd_dma_free_pages(&substream->dma_buffer);
-			substream->dma_buffer.area = NULL;
-			substream->dma_buffer.addr = 0;
-		}
-	}
-}
-
-struct snd_soc_platform psc_ac97_pcm_soc_platform = {
-	.name		= "mpc5200-psc-audio",
-	.pcm_ops	= &psc_ac97_pcm_ops,
-	.pcm_new	= &psc_ac97_pcm_new,
-	.pcm_free	= &psc_ac97_pcm_free,
-};
 
 /* ---------------------------------------------------------------------
  * Sysfs attributes for debugging
@@ -627,6 +497,7 @@ static DEVICE_ATTR(playback_underrun, 0644, psc_ac97_stat_show,
 static DEVICE_ATTR(capture_overrun, 0644, psc_ac97_stat_show,
 			psc_ac97_stat_store);
 
+
 /* ---------------------------------------------------------------------
  * OF platform bus binding code:
  * - Probe/remove operations
@@ -641,8 +512,7 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	int size, psc_id, irq, rc;
 	const __be32 *prop;
 	void __iomem *regs;
-
-	dev_dbg(&op->dev, "probing psc ac97 device\n");
+	struct device_node *child;
 
 	/* Get the PSC ID */
 	prop = of_get_property(op->node, "cell-index", &size);
@@ -712,18 +582,12 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	udelay(50);
 
 	/* Configure the serial interface mode to AC97 */
-	psc_ac97->sicr = MPC52xx_PSC_SICR_ENAC97 | MPC52xx_PSC_SICR_SYNCPOL |
-			MPC52xx_PSC_SICR_CLKPOL;
+	psc_ac97->sicr = MPC52xx_PSC_SICR_SIM_AC97 | MPC52xx_PSC_SICR_ENAC97;
 	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr);
 
 	/* No slots active */
 	out_be32(&psc_ac97->psc_regs->ac97_slots, 0x00000000);
 
-	/* Check for the codec handle.  If it is not present then we
-	 * are done */
-	if (!of_get_property(op->node, "codec-handle", NULL))
-		return 0;
-
 	/* Set up mode register;
 	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
 	 * Second write: register Normal mode for non loopback
@@ -737,12 +601,48 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	out_be16(&psc_ac97->fifo_regs->tfalarm, 0x100);
 	out_8(&psc_ac97->fifo_regs->tfcntl, 0x7);
 
+	/* Go */
+	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_TX_ENABLE);
+	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RX_ENABLE);
+
 	/* Lookup the IRQ numbers */
 	psc_ac97->playback.irq =
 		bcom_get_task_irq(psc_ac97->playback.bcom_task);
 	psc_ac97->capture.irq =
 		bcom_get_task_irq(psc_ac97->capture.bcom_task);
 
+	/* Check for the codec child nodes */
+	for_each_child_of_node(op->node, child) {
+		struct platform_device *pdev;
+		struct dev_archdata dev_ad = {};
+		char name[MODULE_NAME_LEN];
+		const u32 *addr;
+		int len;
+
+		if (of_modalias_node(child, name, sizeof(name)) < 0)
+			continue;
+
+		addr = of_get_property(child, "reg", &len);
+		if (!addr || len < sizeof(int) || *addr > (1 << 10) - 1) {
+			printk(KERN_ERR "psc-ac97: invalid reg in device tree\n");
+			continue;
+		}
+		request_module("%s", name);
+
+		pdev = platform_device_alloc(name, 0);
+
+		platform_set_drvdata(pdev, psc_ac97);
+
+		dev_archdata_set_node(&dev_ad, child);
+		pdev->dev.archdata = dev_ad;
+
+		rc = platform_device_add(pdev);
+		if (rc) {
+			platform_device_put(pdev);
+			return rc;
+		}
+	}
+
 	/* Save what we've done so it can be found again later */
 	dev_set_drvdata(&op->dev, psc_ac97);
 
@@ -753,10 +653,14 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	if (rc)
 		dev_info(psc_ac97->dev, "error creating sysfs files\n");
 
-	snd_soc_register_platform(&psc_ac97_pcm_soc_platform);
+	rc = snd_soc_register_dai(&psc_ac97->dai);
+	if (rc != 0) {
+		printk("Failed to register DAI\n");
+		return 0;
+	}
 
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_platform(&psc_ac97_pcm_soc_platform, op->node,
+	of_snd_soc_register_platform(&mpc5200_soc_platform, op->node,
 				     &psc_ac97->dai);
 
 	return 0;
@@ -768,8 +672,6 @@ static int __devexit psc_ac97_of_remove(struct of_device *op)
 
 	dev_dbg(&op->dev, "psc_ac97_remove()\n");
 
-	snd_soc_unregister_platform(&psc_ac97_pcm_soc_platform);
-
 	bcom_gen_bd_rx_release(psc_ac97->capture.bcom_task);
 	bcom_gen_bd_tx_release(psc_ac97->playback.bcom_task);
 
diff --git a/sound/soc/fsl/mpc5200_psc_i2s.c b/sound/soc/fsl/mpc5200_psc_i2s.c
index ff6255f..9e174ad 100644
--- a/sound/soc/fsl/mpc5200_psc_i2s.c
+++ b/sound/soc/fsl/mpc5200_psc_i2s.c
@@ -270,140 +270,6 @@ static struct snd_soc_dai psc_i2s_dai_template = {
 };
 
 /* ---------------------------------------------------------------------
- * The PSC I2S 'ASoC platform' driver
- *
- * Can be referenced by an 'ASoC machine' driver
- * This driver only deals with the audio bus; it doesn't have any
- * interaction with the attached codec
- */
-
-static int psc_i2s_pcm_open(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
-	struct psc_i2s_stream *s;
-
-	dev_dbg(psc_i2s->dev, "psc_i2s_pcm_open(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_i2s->capture;
-	else
-		s = &psc_i2s->playback;
-
-	snd_soc_set_runtime_hwparams(substream, &mpc5200_pcm_hardware);
-
-	s->stream = substream;
-	return 0;
-}
-
-static int psc_i2s_pcm_close(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
-	struct psc_i2s_stream *s;
-
-	dev_dbg(psc_i2s->dev, "psc_i2s_pcm_close(substream=%p)\n", substream);
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_i2s->capture;
-	else
-		s = &psc_i2s->playback;
-
-	s->stream = NULL;
-	return 0;
-}
-
-static snd_pcm_uframes_t
-psc_i2s_pcm_pointer(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
-	struct psc_i2s_stream *s;
-	dma_addr_t count;
-
-	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
-		s = &psc_i2s->capture;
-	else
-		s = &psc_i2s->playback;
-
-	count = s->period_current_pt - s->period_start;
-
-	return bytes_to_frames(substream->runtime, count);
-}
-
-static struct snd_pcm_ops psc_i2s_pcm_ops = {
-	.open		= psc_i2s_pcm_open,
-	.close		= psc_i2s_pcm_close,
-	.ioctl		= snd_pcm_lib_ioctl,
-	.pointer	= psc_i2s_pcm_pointer,
-};
-
-static u64 psc_i2s_pcm_dmamask = 0xffffffff;
-static int psc_i2s_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
-			   struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	size_t size = mpc5200_pcm_hardware.buffer_bytes_max;
-	int rc = 0;
-
-	dev_dbg(rtd->socdev->dev, "psc_i2s_pcm_new(card=%p, dai=%p, pcm=%p)\n",
-		card, dai, pcm);
-
-	if (!card->dev->dma_mask)
-		card->dev->dma_mask = &psc_i2s_pcm_dmamask;
-	if (!card->dev->coherent_dma_mask)
-		card->dev->coherent_dma_mask = 0xffffffff;
-
-	if (pcm->streams[0].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[0].substream->dma_buffer);
-		if (rc)
-			goto playback_alloc_err;
-	}
-
-	if (pcm->streams[1].substream) {
-		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
-					&pcm->streams[1].substream->dma_buffer);
-		if (rc)
-			goto capture_alloc_err;
-	}
-
-	return 0;
-
- capture_alloc_err:
-	if (pcm->streams[0].substream)
-		snd_dma_free_pages(&pcm->streams[0].substream->dma_buffer);
- playback_alloc_err:
-	dev_err(card->dev, "Cannot allocate buffer(s)\n");
-	return -ENOMEM;
-}
-
-static void psc_i2s_pcm_free(struct snd_pcm *pcm)
-{
-	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
-	struct snd_pcm_substream *substream;
-	int stream;
-
-	dev_dbg(rtd->socdev->dev, "psc_i2s_pcm_free(pcm=%p)\n", pcm);
-
-	for (stream = 0; stream < 2; stream++) {
-		substream = pcm->streams[stream].substream;
-		if (substream) {
-			snd_dma_free_pages(&substream->dma_buffer);
-			substream->dma_buffer.area = NULL;
-			substream->dma_buffer.addr = 0;
-		}
-	}
-}
-
-struct snd_soc_platform psc_i2s_pcm_soc_platform = {
-	.name		= "mpc5200-psc-audio",
-	.pcm_ops	= &psc_i2s_pcm_ops,
-	.pcm_new	= &psc_i2s_pcm_new,
-	.pcm_free	= &psc_i2s_pcm_free,
-};
-
-/* ---------------------------------------------------------------------
  * Sysfs attributes for debugging
  */
 
@@ -585,10 +451,8 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 	if (rc)
 		dev_info(psc_i2s->dev, "error creating sysfs files\n");
 
-	snd_soc_register_platform(&psc_i2s_pcm_soc_platform);
-
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_platform(&psc_i2s_pcm_soc_platform, op->node,
+	of_snd_soc_register_platform(&mpc5200_soc_platform, op->node,
 				     &psc_i2s->dai);
 
 	return 0;
@@ -600,8 +464,6 @@ static int __devexit psc_i2s_of_remove(struct of_device *op)
 
 	dev_dbg(&op->dev, "psc_i2s_remove()\n");
 
-	snd_soc_unregister_platform(&psc_i2s_pcm_soc_platform);
-
 	bcom_gen_bd_rx_release(psc_i2s->capture.bcom_task);
 	bcom_gen_bd_tx_release(psc_i2s->playback.bcom_task);
 
diff --git a/sound/soc/fsl/soc-of-simple.c b/sound/soc/fsl/soc-of-simple.c
index 2d0ca0b..98f91a1 100644
--- a/sound/soc/fsl/soc-of-simple.c
+++ b/sound/soc/fsl/soc-of-simple.c
@@ -142,11 +142,29 @@ int of_snd_soc_register_platform(struct snd_soc_platform *platform,
 	pr_info("registering ASoC platform driver: %s\n", node->full_name);
 
 	handle = of_get_property(node, "codec-handle", &len);
-	if (!handle || len < sizeof(handle))
-		return -ENODEV;
-	codec_node = of_find_node_by_phandle(*handle);
-	if (!codec_node)
+	if (!handle || len < sizeof(handle)) {
+		for_each_child_of_node(node, codec_node) {
+			char name[MODULE_NAME_LEN];
+			const u32 *addr;
+			int len;
+
+			if (of_modalias_node(codec_node, name, sizeof(name)) < 0)
+				continue;
+
+			addr = of_get_property(codec_node, "reg", &len);
+			if (!addr || len < sizeof(int) || *addr > (1 << 10) - 1) {
+				printk(KERN_ERR "psc-ac97: invalid reg in device tree\n");
+				continue;
+			}
+			goto found;
+		}
 		return -ENODEV;
+	} else {
+		codec_node = of_find_node_by_phandle(*handle);
+		if (!codec_node)
+			return -ENODEV;
+	}
+found:
 	pr_info("looking for codec: %s\n", codec_node->full_name);
 
 	mutex_lock(&of_snd_soc_mutex);
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index 8d0389a..144b171 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -20,6 +20,8 @@
  *   o Support TDM on PCM and I2S
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
