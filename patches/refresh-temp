Bottom: 64d26d268460676810423b45dd92352bf90bccfd
Top:    b7ec660f80300a9d058c38f3d340767239c78328
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2008-12-30 09:39:56 -0500

Refresh of jds-lirc-core

---

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 0a9b15a..63031aa 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -23,6 +23,8 @@
 #include <linux/rcupdate.h>
 #include <linux/smp_lock.h>
 
+#include "ir/ir.h"
+
 MODULE_AUTHOR("Vojtech Pavlik <vojtech@suse.cz>");
 MODULE_DESCRIPTION("Input core");
 MODULE_LICENSE("GPL");
@@ -1135,6 +1137,7 @@ static void input_dev_release(struct device *device)
 	struct input_dev *dev = to_input_dev(device);
 
 	input_ff_destroy(dev);
+	input_ir_destroy(dev);
 	kfree(dev);
 
 	module_put(THIS_MODULE);
diff --git a/drivers/input/ir/ir-core.c b/drivers/input/ir/ir-core.c
index 3a309fa..85adfcb 100644
--- a/drivers/input/ir/ir-core.c
+++ b/drivers/input/ir/ir-core.c
@@ -424,26 +424,35 @@ static int decode_rc6(struct input_dev *dev, struct ir_protocol *rc6, unsigned i
 	return 0;
 }
 
-static void record_raw(struct input_dev *dev, unsigned int delta, unsigned int bit)
+static void record_raw(struct input_dev *dev, int sample)
 {
 	int head = dev->ir->raw.head;
-	if (bit)
-		delta = -delta;
 
 	head += 1;
 	if (head > ARRAY_SIZE(dev->ir->raw.buffer))
 		head = 0;
 
 	if (head != dev->ir->raw.tail) {
-		dev->ir->raw.buffer[dev->ir->raw.head] = delta;
+		dev->ir->raw.buffer[dev->ir->raw.head] = sample;
 		dev->ir->raw.head = head;
 	}
 }
 
-void input_ir_decode(struct input_dev *dev, unsigned int delta, unsigned int bit)
+void input_ir_decode(struct input_dev *dev, int sample)
 {
+	int delta, bit;
+
+	record_raw(dev, sample);
+
+	if (sample < 0) {
+		delta = -sample;
+		bit = 1;
+	} else {
+		delta = sample;
+		bit = 0;
+	}
 	PDEBUG("IR bit %d %d\n", delta, bit);
-	record_raw(dev, delta, bit);
+
 	decode_sony(dev, &dev->ir->sony, delta, bit);
 	decode_jvc(dev, &dev->ir->jvc, delta, bit);
 	decode_nec(dev, &dev->ir->nec, delta, bit);
@@ -452,6 +461,46 @@ void input_ir_decode(struct input_dev *dev, unsigned int delta, unsigned int bit
 }
 EXPORT_SYMBOL_GPL(input_ir_decode);
 
+static void ir_event(struct work_struct *work)
+{
+	unsigned long flags;
+	unsigned int sample;
+	struct ir_device *ir_dev = container_of(work, struct ir_device, work);
+	struct input_dev *dev = ir_dev->input;
+
+	while (1) {
+		spin_lock_irqsave(dev->ir->queue.lock, flags);
+		if (dev->ir->queue.tail == dev->ir->queue.head) {
+			spin_unlock_irqrestore(dev->ir->queue.lock, flags);
+			break;
+		}
+		sample = dev->ir->queue.samples[dev->ir->queue.tail];
+
+		dev->ir->queue.tail++;
+		if (dev->ir->queue.tail >= MAX_SAMPLES)
+			dev->ir->queue.tail = 0;
+
+		spin_unlock_irqrestore(dev->ir->queue.lock, flags);
+
+		input_ir_decode(dev->ir->input, sample);
+	}
+}
+
+void input_ir_queue(struct input_dev *dev, int sample)
+{
+	unsigned int next;
+
+	spin_lock(dev->ir->queue.lock);
+	dev->ir->queue.samples[dev->ir->queue.head] = sample;
+	next = dev->ir->queue.head + 1;
+	dev->ir->queue.head = (next >= MAX_SAMPLES ? 0 : next);
+	spin_unlock(dev->ir->queue.lock);
+
+	schedule_work(&dev->ir->work);
+}
+EXPORT_SYMBOL_GPL(input_ir_queue);
+
+
 int input_ir_send(struct input_dev *dev, struct ir_command *ir_command, struct file *file)
 {
 	unsigned freq, xmit = 0;
@@ -656,6 +705,10 @@ int input_ir_create(struct input_dev *dev, void *private, send_func xmit)
 	dev->evbit[0] = BIT_MASK(EV_IR);
 	dev->ir->private = private;
 	dev->ir->xmit = xmit;
+	dev->ir->input = dev;
+
+	spin_lock_init(&dev->ir->queue.lock);
+	INIT_WORK(&dev->ir->work, ir_event);
 
 	return 0;
 }
@@ -669,7 +722,6 @@ void input_ir_destroy(struct input_dev *dev)
 		sysfs_remove_group(&dev->dev.kobj, &input_ir_group);
 	}
 }
-EXPORT_SYMBOL_GPL(input_ir_destroy);
 
 static int __init input_ir_init(void)
 {
diff --git a/drivers/input/ir/ir.h b/drivers/input/ir/ir.h
index fbc1345..d0cdc9e 100644
--- a/drivers/input/ir/ir.h
+++ b/drivers/input/ir/ir.h
@@ -19,6 +19,8 @@ struct ir_protocol {
 	unsigned int state, code, good, count, bits, mode;
 };
 
+#define MAX_SAMPLES 200
+
 struct ir_device {
 	struct ir_protocol sony;
 	struct ir_protocol jvc;
@@ -28,21 +30,34 @@ struct ir_device {
 	struct mutex lock;
 	void *private;
 	send_func xmit;
+	struct input_dev *input;
 	struct {
-		unsigned int buffer[200];
+		unsigned int buffer[MAX_SAMPLES];
 		unsigned int count;
 	} send;
 	struct {
-		int buffer[200];
+		int buffer[MAX_SAMPLES];
 		unsigned int head;
 		unsigned int tail;
 		unsigned int carrier;
 		unsigned int xmitter;
 	} raw;
+	struct {
+		spinlock_t lock;
+		int head, tail;
+		unsigned int samples[MAX_SAMPLES];
+	} queue;
+	struct work_struct work;
 };
 
 extern struct configfs_subsystem input_ir_remotes;
 void input_ir_translate(struct input_dev *dev, int protocol, int device, int command);
 
+#ifdef CONFIG_INPUT_IR
+void input_ir_destroy(struct input_dev *dev);
+#else
+static inline void input_ir_destroy(struct input_dev *dev) {}
+#endif
+
 
 
diff --git a/include/linux/input.h b/include/linux/input.h
index f166339..1aee029 100644
--- a/include/linux/input.h
+++ b/include/linux/input.h
@@ -1450,9 +1450,10 @@ typedef int (*send_func)(void *private, unsigned int *buffer, unsigned int count
 		unsigned int frequency, unsigned int xmitters);
 
 int input_ir_create(struct input_dev *dev, void *private, send_func send);
-void input_ir_destroy(struct input_dev *dev);
 
-void input_ir_decode(struct input_dev *dev, unsigned int delta, unsigned int bit);
+void input_ir_decode(struct input_dev *dev, int sample);
+void input_ir_queue(struct input_dev *dev, int sample);
+
 int input_ir_send(struct input_dev *dev, struct ir_command *ir_command, struct file *file);
 int input_ir_register(struct input_dev *dev);
