Bottom: 232070491d6c6e55e6bac4a79cf87cd5a204be0f
Top:    216da4451a85db0ccc7bca25494b7d5bc3b3f08c
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-28 23:03:07 -0400

Refresh of temp

---

diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 5663187..6551241 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -49,7 +49,6 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 	unsigned int val;
 
 	spin_lock(&psc_dma->lock);
-	//printk("ac97 read: reg %04x\n", reg);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
@@ -84,8 +83,6 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 	}
 	val = (val >> 8) & 0xffff;
 
-	//printk("ac97 read ok: reg %04x  val %04x\n", reg, val);
-
 	spin_unlock(&psc_dma->lock);
 	return (unsigned short) val;
 }
@@ -95,7 +92,6 @@ static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned s
 	struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 
-	//printk("ac97 write: reg %04x  val %04x\n", reg, val);
 	spin_lock(&psc_dma->lock);
 
 	/* Wait for it to be ready */
@@ -119,8 +115,6 @@ static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 {
 	struct psc_dma *psc_dma = ac97->private_data;
 
-	printk("psc_ac97_cold_reset %p\n", ac97);
-
 	/* Do a cold reset */
 	out_8(&psc_dma->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
@@ -175,13 +169,12 @@ static int psc_ac97_hw_analog_params(struct snd_pcm_substream *substream,
 		params_buffer_size(params), params_buffer_bytes(params),
 		params_channels(params), params_rate(params), params_format(params));
 
-	// FIXME, need a spinlock to protect access
+	spin_lock(&psc_dma->lock);
 	if (params_channels(params) == 1)
 		out_be32(&psc_dma->psc_regs->ac97_slots, 0x01000000);
 	else
 		out_be32(&psc_dma->psc_regs->ac97_slots, 0x03000000);
-
-  	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
+	spin_unlock(&psc_dma->lock);
 
 	return 0;
 }
@@ -190,6 +183,13 @@ static int psc_ac97_hw_digital_params(struct snd_pcm_substream *substream,
 				 struct snd_pcm_hw_params *params,
 				 struct snd_soc_dai *dai)
 {
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
+
+	spin_lock(&psc_dma->lock);
+	out_be32(&psc_dma->psc_regs->ac97_slots, 0x00060000);
+	spin_unlock(&psc_dma->lock);
+
 	return 0;
 }
 
@@ -209,6 +209,7 @@ static int psc_ac97_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 	struct psc_dma *psc_dma = cpu_dai->private_data;
 	dev_dbg(psc_dma->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
 				cpu_dai, format);
+
 	return (format == SND_SOC_DAIFMT_AC97) ? 0 : -EINVAL;
 }
 
@@ -263,70 +264,6 @@ static struct snd_soc_dai psc_ac97_dai_template[] = {
 	.ops = &psc_ac97_digital_ops,
 }};
 
-/* ---------------------------------------------------------------------
- * Sysfs attributes for debugging
- */
-
-static ssize_t psc_ac97_status_show(struct device *dev,
-			   struct device_attribute *attr, char *buf)
-{
-	struct psc_dma *psc_dma = dev_get_drvdata(dev);
-
-	return sprintf(buf, "status=%.4x sicr=%.8x rfnum=%i rfstat=0x%.4x "
-			"tfnum=%i tfstat=0x%.4x\n",
-			in_be16(&psc_dma->psc_regs->sr_csr.status),
-			in_be32(&psc_dma->psc_regs->sicr),
-			in_be16(&psc_dma->fifo_regs->rfnum) & 0x1ff,
-			in_be16(&psc_dma->fifo_regs->rfstat),
-			in_be16(&psc_dma->fifo_regs->tfnum) & 0x1ff,
-			in_be16(&psc_dma->fifo_regs->tfstat));
-}
-
-static int *psc_ac97_get_stat_attr(struct psc_dma *psc_dma, const char *name)
-{
-	if (strcmp(name, "playback_underrun") == 0)
-		return &psc_dma->stats.underrun_count;
-	if (strcmp(name, "capture_overrun") == 0)
-		return &psc_dma->stats.overrun_count;
-
-	return NULL;
-}
-
-static ssize_t psc_ac97_stat_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	struct psc_dma *psc_dma = dev_get_drvdata(dev);
-	int *attrib;
-
-	attrib = psc_ac97_get_stat_attr(psc_dma, attr->attr.name);
-	if (!attrib)
-		return 0;
-
-	return sprintf(buf, "%i\n", *attrib);
-}
-
-static ssize_t psc_ac97_stat_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf,
-				  size_t count)
-{
-	struct psc_dma *psc_dma = dev_get_drvdata(dev);
-	int *attrib;
-
-	attrib = psc_ac97_get_stat_attr(psc_dma, attr->attr.name);
-	if (!attrib)
-		return 0;
-
-	*attrib = simple_strtoul(buf, NULL, 0);
-	return count;
-}
-
-static DEVICE_ATTR(status, 0644, psc_ac97_status_show, NULL);
-static DEVICE_ATTR(playback_underrun, 0644, psc_ac97_stat_show,
-			psc_ac97_stat_store);
-static DEVICE_ATTR(capture_overrun, 0644, psc_ac97_stat_show,
-			psc_ac97_stat_store);
-
 
 /* ---------------------------------------------------------------------
  * OF platform bus binding code:
@@ -336,82 +273,15 @@ static DEVICE_ATTR(capture_overrun, 0644, psc_ac97_stat_show,
 static int __devinit psc_ac97_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
-	phys_addr_t fifo;
+	int rc;
 	struct psc_dma *psc_dma;
-	struct resource res;
-	int i, nDAI, size, psc_id, irq, rc;
-	const __be32 *prop;
-	void __iomem *regs;
-
-	/* Get the PSC ID */
-	prop = of_get_property(op->node, "cell-index", &size);
-	if (!prop || size < sizeof *prop)
-		return -ENODEV;
-	psc_id = be32_to_cpu(*prop);
-
-	/* Fetch the registers and IRQ of the PSC */
-	irq = irq_of_parse_and_map(op->node, 0);
-	if (of_address_to_resource(op->node, 0, &res)) {
-		dev_err(&op->dev, "Missing reg property\n");
-		return -ENODEV;
-	}
-	regs = ioremap(res.start, 1 + res.end - res.start);
-	if (!regs) {
-		dev_err(&op->dev, "Could not map registers\n");
-		return -ENODEV;
-	}
-
-	/* Allocate and initialize the driver private data */
-	psc_dma = kzalloc(sizeof *psc_dma, GFP_KERNEL);
-	if (!psc_dma) {
-		iounmap(regs);
-		return -ENOMEM;
-	}
-	printk("psc_dma %p\n", psc_dma);
-
-	spin_lock_init(&psc_dma->lock);
-	psc_dma->irq = irq;
-	psc_dma->psc_regs = regs;
-	psc_dma->fifo_regs = regs + sizeof *psc_dma->psc_regs;
-	psc_dma->dev = &op->dev;
-	psc_dma->playback.psc_dma = psc_dma;
-	psc_dma->capture.psc_dma = psc_dma;
-	snprintf(psc_dma->name, sizeof psc_dma->name, "PSC%u AC97", psc_id+1);
-
-	/* Fill out the CPU DAI structure */
-	nDAI = ARRAY_SIZE(psc_ac97_dai_template);
-	nDAI = min(nDAI, SOC_OF_SIMPLE_MAX_DAI);
-	for (i = 0; i < nDAI; i++) {
-		memcpy(&psc_dma->dai[i], &psc_ac97_dai_template[i], sizeof(struct snd_soc_dai));
-		psc_dma->dai[i].private_data = psc_dma;
-		snprintf(psc_dma->stream_name[i], PSC_STREAM_NAME_LEN, psc_ac97_dai_template[i].name, psc_dma->name);
-		psc_dma->dai[i].name = psc_dma->stream_name[i];
-		psc_dma->dai[i].id = psc_id;
-	}
 
-	/* Find the address of the fifo data registers and setup the
-	 * DMA tasks */
-	fifo = res.start + offsetof(struct mpc52xx_psc, buffer.buffer_32);
-	psc_dma->capture.bcom_task =
-		bcom_psc_gen_bd_rx_init(psc_id, 10, fifo, 512);
-	psc_dma->playback.bcom_task =
-		bcom_psc_gen_bd_tx_init(psc_id, 10, fifo);
-	if (!psc_dma->capture.bcom_task ||
-	    !psc_dma->playback.bcom_task) {
-		dev_err(&op->dev, "Could not allocate bestcomm tasks\n");
-		iounmap(regs);
-		kfree(psc_dma);
-		return -ENODEV;
-	}
+	rc = mpc5200_audio_dma_create(op, psc_ac97_dai_template, ARRAY_SIZE(psc_ac97_dai_template));
+	if (rc != 0)
+		return rc;
 
-	/* Disable all interrupts and reset the PSC */
-	out_be16(&psc_dma->psc_regs->isr_imr.imr, 0);
-	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_RX); /* reset receiver */
-	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_TX); /* reset transmitter */
-	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_ERR_STAT); /* reset error */
-	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_SEL_MODE_REG_1); /* reset mode */
+	psc_dma = dev_get_drvdata(&op->dev);
 
-	/* Do a cold reset of codec */
 	out_8(&psc_dma->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
 	out_8(&psc_dma->psc_regs->op0, MPC52xx_PSC_OP_RES);
@@ -424,66 +294,16 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	/* No slots active */
 	out_be32(&psc_dma->psc_regs->ac97_slots, 0x00000000);
 
-	/* Set up mode register;
-	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
-	 * Second write: register Normal mode for non loopback
-	 */
-	out_8(&psc_dma->psc_regs->mode, 0);
-	out_8(&psc_dma->psc_regs->mode, 0);
-
-	/* Set the TX and RX fifo alarm thresholds */
-	out_be16(&psc_dma->fifo_regs->rfalarm, 0x100);
-	out_8(&psc_dma->fifo_regs->rfcntl, 0x4);
-	out_be16(&psc_dma->fifo_regs->tfalarm, 0x100);
-	out_8(&psc_dma->fifo_regs->tfcntl, 0x7);
-
 	/* Go */
 	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_TX_ENABLE);
 	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RX_ENABLE);
 
-	/* Lookup the IRQ numbers */
-	psc_dma->playback.irq =
-		bcom_get_task_irq(psc_dma->playback.bcom_task);
-	psc_dma->capture.irq =
-		bcom_get_task_irq(psc_dma->capture.bcom_task);
-
-	/* Save what we've done so it can be found again later */
-	dev_set_drvdata(&op->dev, psc_dma);
-
-	/* Register the SYSFS files */
-	rc = device_create_file(psc_dma->dev, &dev_attr_status);
-	rc |= device_create_file(psc_dma->dev, &dev_attr_capture_overrun);
-	rc |= device_create_file(psc_dma->dev, &dev_attr_playback_underrun);
-	if (rc)
-		dev_info(psc_dma->dev, "error creating sysfs files\n");
-
-	rc = snd_soc_register_dais(psc_dma->dai, nDAI);
-	if (rc != 0) {
-		printk("Failed to register DAI\n");
-		return 0;
-	}
-
-	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_cpu_dai(op->node, psc_dma->dai, nDAI);
-
 	return 0;
 }
 
 static int __devexit psc_ac97_of_remove(struct of_device *op)
 {
-	struct psc_dma *psc_dma = dev_get_drvdata(&op->dev);
-
-	dev_dbg(&op->dev, "psc_ac97_remove()\n");
-
-	bcom_gen_bd_rx_release(psc_dma->capture.bcom_task);
-	bcom_gen_bd_tx_release(psc_dma->playback.bcom_task);
-
-	iounmap(psc_dma->psc_regs);
-	iounmap(psc_dma->fifo_regs);
-	kfree(psc_dma);
-	dev_set_drvdata(&op->dev, NULL);
-
-	return 0;
+	return mpc5200_audio_dma_destroy(op);
 }
 
 /* Match table for of_platform binding */
