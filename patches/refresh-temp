Bottom: e5aac7e828d8f024d8d7bb311d0e982c27f3d594
Top:    86510cdc5773a82f1dd216c54e4fe03375f51347
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-15 23:46:03 -0400

Refresh of mpc5200-ac97

---

diff --git a/arch/powerpc/include/asm/mpc52xx_psc.h b/arch/powerpc/include/asm/mpc52xx_psc.h
index a218da6..11abc69 100644
--- a/arch/powerpc/include/asm/mpc52xx_psc.h
+++ b/arch/powerpc/include/asm/mpc52xx_psc.h
@@ -28,6 +28,10 @@
 #define MPC52xx_PSC_MAXNUM	6
 
 /* Programmable Serial Controller (PSC) status register bits */
+#define MPC52xx_PSC_SR_UNEX_RX	0x0001
+#define MPC52xx_PSC_SR_DATA_VAL	0x0002
+#define MPC52xx_PSC_SR_DATA_OVR	0x0004
+#define MPC52xx_PSC_SR_CMDSEND	0x0008
 #define MPC52xx_PSC_SR_CDE	0x0080
 #define MPC52xx_PSC_SR_RXRDY	0x0100
 #define MPC52xx_PSC_SR_RXFULL	0x0200
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 8392224..5867a07 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -11,45 +11,123 @@
 
 #include <linux/init.h>
 #include <linux/module.h>
-#include <linux/platform_device.h>
 #include <linux/interrupt.h>
-#include <linux/wait.h>
+#include <linux/device.h>
 #include <linux/delay.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/dma-mapping.h>
 
-#include <sound/driver.h>
 #include <sound/core.h>
 #include <sound/pcm.h>
-#include <sound/ac97_codec.h>
+#include <sound/pcm_params.h>
 #include <sound/initval.h>
 #include <sound/soc.h>
+#include <sound/soc-of-simple.h>
 
+#include <sysdev/bestcomm/bestcomm.h>
+#include <sysdev/bestcomm/gen_bd.h>
+#include <asm/time.h>
+#include <asm/mpc52xx.h>
 #include <asm/mpc52xx_psc.h>
-#include <asm/irq.h>
-#include <linux/mutex.h>
 
-#include "mpc52xx-dma.h"
+#include "mpc5200_dma.h"
 
-/* Private structure */
-struct mpc52xx_ac97_priv {
-	struct mpc52xx_dma_priv dma;
+MODULE_AUTHOR("Jon Smirl");
+MODULE_DESCRIPTION("MPC52xx AC97 module");
+MODULE_LICENSE("GPL");
+
+/**
+ * PSC_AC97_RATES: sample rates supported by the AC97
+ *
+ * This driver currently only supports the PSC running in AC97 slave mode,
+ * which means the codec determines the sample rate.  Therefore, we tell
+ * ALSA that we support all rates and let the codec driver decide what rates
+ * are really supported.
+ */
+#define PSC_AC97_RATES (SNDRV_PCM_RATE_5512 | SNDRV_PCM_RATE_8000_192000 | \
+			SNDRV_PCM_RATE_CONTINUOUS)
+
+/**
+ * PSC_AC97_FORMATS: audio formats supported by the PSC AC97 mode
+ */
+#define PSC_AC97_FORMATS (SNDRV_PCM_FMTBIT_S8 | SNDRV_PCM_FMTBIT_S16_BE | \
+			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S24_BE | \
+			 SNDRV_PCM_FMTBIT_S32_BE)
+
+/**
+ * psc_ac97_stream - Data specific to a single stream (playback or capture)
+ * @active:		flag indicating if the stream is active
+ * @psc_ac97:		pointer back to parent psc_ac97 data structure
+ * @bcom_task:		bestcomm task structure
+ * @irq:		irq number for bestcomm task
+ * @period_start:	physical address of start of DMA region
+ * @period_end:		physical address of end of DMA region
+ * @period_next_pt:	physical address of next DMA buffer to enqueue
+ * @period_bytes:	size of DMA period in bytes
+ */
+struct psc_ac97_stream {
+	int active;
+	struct psc_ac97 *psc_ac97;
+	struct bcom_task *bcom_task;
 	int irq;
-	struct mutex mutex;
+	struct snd_pcm_substream *stream;
+	dma_addr_t period_start;
+	dma_addr_t period_end;
+	dma_addr_t period_next_pt;
+	dma_addr_t period_current_pt;
+	int period_bytes;
+};
+
+/**
+ * psc_ac97 - Private driver data
+ * @name: short name for this device ("PSC0", "PSC1", etc)
+ * @psc_regs: pointer to the PSC's registers
+ * @fifo_regs: pointer to the PSC's FIFO registers
+ * @irq: IRQ of this PSC
+ * @dev: struct device pointer
+ * @dai: the CPU DAI for this device
+ * @sicr: Base value used in serial interface control register; mode is ORed
+ *        with this value.
+ * @playback: Playback stream context data
+ * @capture: Capture stream context data
+ */
+struct psc_ac97 {
+	char name[32];
+	struct mpc52xx_psc __iomem *psc_regs;
+	struct mpc52xx_psc_fifo __iomem *fifo_regs;
+	unsigned int irq;
+	struct device *dev;
+	struct snd_soc_dai dai;
+	spinlock_t lock;
+	u32 sicr;
+	uint sysclk;
+
+	/* per-stream data */
+	struct psc_ac97_stream playback;
+	struct psc_ac97_stream capture;
+
+	/* Statistics */
+	struct {
+		int overrun_count;
+		int underrun_count;
+	} stats;
 };
 
 #define DRV_NAME "mpc52xx-psc-ac97"
 
 static unsigned short mpc52xx_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 {
-	struct mpc52xx_ac97_priv *priv = ac97->private_data;
+	struct psc_ac97 *psc_ac97 = ac97->private_data;
 	int timeout;
 	unsigned int val;
 
-	mutex_lock(&priv->mutex);
+	spin_lock(&psc_ac97->lock);
 	printk("ac97 read: reg %04x\n", reg);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
-	while ((--timeout) && (in_be16(&priv->dma.psc->mpc52xx_psc_status) &
+	while ((--timeout) && (in_be16(&psc_ac97->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_CMDSEND) )
 		udelay(10);
 
@@ -59,11 +137,11 @@ static unsigned short mpc52xx_ac97_read(struct snd_ac97 *ac97, unsigned short re
 	}
 
 	/* Do the read */
-	out_be32(&priv->dma.psc->ac97_cmd, (1<<31) | ((reg & 0x7f) << 24));
+	out_be32(&psc_ac97->psc_regs->ac97_cmd, (1<<31) | ((reg & 0x7f) << 24));
 
 	/* Wait for the answer */
 	timeout = 1000;
-	while ((--timeout) && !(in_be16(&priv->dma.psc->mpc52xx_psc_status) &
+	while ((--timeout) && !(in_be16(&psc_ac97->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_DATA_VAL) )
 		udelay(10);
 
@@ -73,7 +151,7 @@ static unsigned short mpc52xx_ac97_read(struct snd_ac97 *ac97, unsigned short re
 	}
 
 	/* Get the data */
-	val = in_be32(&priv->dma.psc->ac97_data);
+	val = in_be32(&psc_ac97->psc_regs->ac97_data);
 	if ( ((val>>24) & 0x7f) != reg ) {
 		printk(KERN_ERR DRV_NAME ": reg echo error on ac97 read\n");
 		return 0xffff;
@@ -82,21 +160,21 @@ static unsigned short mpc52xx_ac97_read(struct snd_ac97 *ac97, unsigned short re
 
 	printk("ac97 read ok: reg %04x  val %04x\n", reg, val);
 
-	mutex_unlock(&priv->mutex);
+	spin_unlock(&psc_ac97->lock);
 	return (unsigned short) val;
 }
 
 static void mpc52xx_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val)
 {
-	struct mpc52xx_ac97_priv *priv = ac97->private_data;
+	struct psc_ac97 *psc_ac97 = ac97->private_data;
 	int timeout;
 
 	//printk("ac97 write: reg %04x  val %04x\n", reg, val);
-	mutex_lock(&priv->mutex);
+	spin_lock(&psc_ac97->lock);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
-	while ((--timeout) && (in_be16(&priv->dma.psc->mpc52xx_psc_status) &
+	while ((--timeout) && (in_be16(&psc_ac97->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_CMDSEND) )
 		udelay(10);
 
@@ -106,25 +184,25 @@ static void mpc52xx_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsign
 	}
 
 	/* Write data */
-	out_be32(&priv->dma.psc->ac97_cmd, ((reg & 0x7f) << 24) | (val << 8));
-	
-	mutex_unlock(&priv->mutex);
+	out_be32(&psc_ac97->psc_regs->ac97_cmd, ((reg & 0x7f) << 24) | (val << 8));
+
+	spin_unlock(&psc_ac97->lock);
 }
 
 static void mpc52xx_ac97_cold_reset(struct snd_ac97 *ac97)
 {
-	struct mpc52xx_ac97_priv *priv = ac97->private_data;
+	struct psc_ac97 *psc_ac97 = ac97->private_data;
 
 	printk("mpc52xx_ac97_cold_reset\n");
 
 	/* Do a cold reset */
-	out_8(&priv->dma.psc->op1, MPC52xx_PSC_OP_RES);
+	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
-	out_8(&priv->dma.psc->op0, MPC52xx_PSC_OP_RES);
+	out_8(&psc_ac97->psc_regs->op0, MPC52xx_PSC_OP_RES);
 	udelay(50);
 
 	/* PSC recover from cold reset (cfr user manual, not sure if useful) */
-	out_be32(&priv->dma.psc->sicr, in_be32(&priv->dma.psc->sicr));
+	out_be32(&psc_ac97->psc_regs->sicr, in_be32(&psc_ac97->psc_regs->sicr));
 }
 
 static void mpc52xx_ac97_warm_reset(struct snd_ac97 *ac97)
@@ -134,27 +212,29 @@ static void mpc52xx_ac97_warm_reset(struct snd_ac97 *ac97)
 
 static irqreturn_t mpc52xx_ac97_irq(int irq, void *dev_id)
 {
-	struct mpc52xx_ac97_priv *priv = dev_id;
+	struct psc_ac97 *psc_ac97 = dev_id;
 
 	static int icnt = 0;
 #if 1
 {
 	unsigned int val;
-	val = in_be32(&priv->dma.psc->ac97_data);
-	printk(KERN_INFO "mpc52xx_ac97_irq fired (isr=%04x, status=%04x) %08x\n", in_be16(&priv->dma.psc->mpc52xx_psc_imr), in_be16(&priv->dma.psc->mpc52xx_psc_status), val);
-	out_8(&priv->dma.psc->command,MPC52xx_PSC_RST_ERR_STAT);
+	val = in_be32(&psc_ac97->psc_regs->ac97_data);
+	printk(KERN_INFO "mpc52xx_ac97_irq fired (isr=%04x, status=%04x) %08x\n",
+									in_be16(&psc_ac97->psc_regs->mpc52xx_psc_imr),
+									in_be16(&psc_ac97->psc_regs->sr_csr.status), val);
+	out_8(&psc_ac97->psc_regs->command,MPC52xx_PSC_RST_ERR_STAT);
 }
 #endif
 
 	/* Anti Crash during dev ;) */
 #if 1
 	if ((icnt++) > 5000)
-		out_be16(&priv->dma.psc->mpc52xx_psc_imr, 0);
+		out_be16(&psc_ac97->psc_regs->mpc52xx_psc_imr, 0);
 #endif
 
 	/* Print statuts */
-	printk(KERN_DEBUG "isr: %04x", in_be16(&priv->dma.psc->mpc52xx_psc_imr));
-	out_8(&priv->dma.psc->command,MPC52xx_PSC_RST_ERR_STAT);
+	printk(KERN_DEBUG "isr: %04x", in_be16(&psc_ac97->psc_regs->mpc52xx_psc_imr));
+	out_8(&psc_ac97->psc_regs->command,MPC52xx_PSC_RST_ERR_STAT);
 
 	return IRQ_HANDLED;
 }
@@ -184,55 +264,42 @@ static int mpc52xx_ac97_resume(struct device *dev)
 #endif
 
 static int mpc52xx_ac97_hw_analog_params(struct snd_pcm_substream *substream,
-	struct snd_pcm_hw_params *params, struct snd_soc_dai_runtime *cpu_dai)
+				 struct snd_pcm_hw_params *params,
+				 struct snd_soc_dai *dai)
 {
-	struct mpc52xx_ac97_priv *priv = cpu_dai->private_data;
-	
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+
 	printk("mpc52xx_ac97_hw_analog_params\n");
 	printk("channels %d\n",substream->runtime->channels);
 	printk("rate %d\n",substream->runtime->rate);
 	printk("periods %d\n",substream->runtime->periods);
 	printk("tick_time %d\n",substream->runtime->tick_time);
 	printk("period_step %d\n",substream->runtime->period_step);
-	printk("slots %d\n",priv->dma.psc->ac97_slots);
+	printk("slots %d\n",psc_ac97->psc_regs->ac97_slots);
 
 	/* FIXME, need a spinlock to protect access */
 	if (substream->runtime->channels == 1)
-		out_be32(&priv->dma.psc->ac97_slots, 0x01000000);
+		out_be32(&psc_ac97->psc_regs->ac97_slots, 0x01000000);
 	else
-		out_be32(&priv->dma.psc->ac97_slots, 0x03000000);
+		out_be32(&psc_ac97->psc_regs->ac97_slots, 0x03000000);
 
 	return 0;
 }
 
 static int mpc52xx_ac97_hw_digital_params(struct snd_pcm_substream *substream,
-	struct snd_pcm_hw_params *params, struct snd_soc_dai_runtime *cpu_dai)
-{
-	return 0;
-}
-
-static int mpc52xx_ac97_new(struct snd_soc_dai_runtime *cpu_dai)
+				 struct snd_pcm_hw_params *params,
+				 struct snd_soc_dai *dai)
 {
-	printk("mpc52xx_ac97_new\n");
-	
 	return 0;
 }
 
-static void mpc52xx_ac97_free(struct snd_soc_dai_runtime *cpu_dai)
-{
-	//struct mpc52xx_ac97_priv *priv = cpu_dai->private_data;
-	
-	printk("mpc52xx_ac97_free\n");
-}
-
 static struct snd_soc_dai mpc52xx_dai_ac97[] = {
-{	
+{
 	.name	= "mpc52xx AC97 analog",
 	.id	= MPC52XX_DAI_AC97_ANALOG,
 	.ac97_control	= 1,
-	.new	= mpc52xx_ac97_new,
-	.free	= mpc52xx_ac97_free,
-	
+
 	.playback = {
 		.stream_name	= "mpc52xx AC97 analog",
 		.channels_min	= 1,
@@ -252,10 +319,10 @@ static struct snd_soc_dai mpc52xx_dai_ac97[] = {
 	/* ac97_ops */
 	.ac97_ops 	= &mpc52xx_ac97_ops,
 },
-{	
+{
 	.name	= "mpc52xx AC97 digital",
 	.id	= MPC52XX_DAI_AC97_DIGITAL,
-	
+
 	.playback = {
 		.stream_name	= "mpc52xx AC97 digital",
 		.channels_min	= 1,
@@ -270,133 +337,501 @@ static struct snd_soc_dai mpc52xx_dai_ac97[] = {
 	.ac97_ops 	= &mpc52xx_ac97_ops,
 }};
 
-static void mpc52xx_ac97_hwinit(struct mpc52xx_ac97_priv *priv)
+static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
+				 struct snd_pcm_hw_params *params,
+				 struct snd_soc_dai *dai)
 {
-	printk("mpc52xx_ac97_hwinit\n");
-	
-	/* Reset everything first by safety */
-	out_8(&priv->dma.psc->command, MPC52xx_PSC_RST_RX);
-	out_8(&priv->dma.psc->command, MPC52xx_PSC_RST_TX);
-	out_8(&priv->dma.psc->command, MPC52xx_PSC_RST_ERR_STAT);
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	uint bits, framesync, bitclk, value;
+	u32 mode;
+
+	dev_dbg(psc_ac97->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
+		" periods=%i buffer_size=%i  buffer_bytes=%i\n",
+		__func__, substream, params_period_size(params),
+		params_period_bytes(params), params_periods(params),
+		params_buffer_size(params), params_buffer_bytes(params));
+
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S8:
+		mode = MPC52xx_PSC_SICR_SIM_CODEC_8;
+		bits = 8;
+		break;
+	case SNDRV_PCM_FORMAT_S16_BE:
+		mode = MPC52xx_PSC_SICR_SIM_CODEC_16;
+		bits = 16;
+		break;
+	case SNDRV_PCM_FORMAT_S24_BE:
+		mode = MPC52xx_PSC_SICR_SIM_CODEC_24;
+		bits = 24;
+		break;
+	case SNDRV_PCM_FORMAT_S32_BE:
+		mode = MPC52xx_PSC_SICR_SIM_CODEC_32;
+		bits = 32;
+		break;
+	default:
+		dev_dbg(psc_ac97->dev, "invalid format\n");
+		return -EINVAL;
+	}
+	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr | mode);
 
-	/* Do a cold reset of codec */
-	out_8(&priv->dma.psc->op1, MPC52xx_PSC_OP_RES);
-	udelay(10);
-	out_8(&priv->dma.psc->op0, MPC52xx_PSC_OP_RES);
-	udelay(50);
+	if (psc_ac97->sysclk) {
+		framesync = bits * 2;
+		bitclk = (psc_ac97->sysclk) / (params_rate(params) * framesync);
 
-	/* Configure AC97 enhanced mode */
-	out_be32(&priv->dma.psc->sicr, MPC52xx_PSC_SICR_ENC97 | MPC52xx_PSC_SICR_SYNCPOL | MPC52xx_PSC_SICR_CLKPOL);
+		/* bitclk field is byte swapped due to mpc5200/b compatibility */
+		value = ((framesync - 1) << 24) |
+			(((bitclk - 1) & 0xFF) << 16) | ((bitclk - 1) & 0xFF00);
 
-	/* No slots active */
-	out_be32(&priv->dma.psc->ac97_slots, 0x00000000);
+		dev_dbg(psc_ac97->dev, "%s(substream=%p) rate=%i sysclk=%i"
+			" framesync=%i bitclk=%i reg=%X\n",
+			__FUNCTION__, substream, params_rate(params), psc_ac97->sysclk,
+			framesync, bitclk, value);
 
-	/* No IRQ */
-	out_be16(&priv->dma.psc->mpc52xx_psc_imr, 0x0000);
+		out_be32(&psc_ac97->psc_regs->ccr, value);
+		out_8(&psc_ac97->psc_regs->ctur, bits - 1);
+	}
 
-	/* FIFO levels */
-	out_8(&priv->dma.psc->rfcntl, 0x07);
-	out_8(&priv->dma.psc->tfcntl, 0x07);
-	out_be16(&priv->dma.psc->rfalarm, 0x80);
-	out_be16(&priv->dma.psc->tfalarm, 0x80);
+  	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
 
-	/* Go */
-	out_8(&priv->dma.psc->command, MPC52xx_PSC_TX_ENABLE);
-	out_8(&priv->dma.psc->command, MPC52xx_PSC_RX_ENABLE);
+	return 0;
 }
 
-static int mpc52xx_ac97_probe(struct device *dev)
+/**
+ * psc_ac97_set_fmt: set the serial format.
+ *
+ * This function is called by the machine driver to tell us what serial
+ * format to use.
+ *
+ * This driver only supports AC97 mode.  Return an error if the format is
+ * not SND_SOC_DAIFMT_AC97.
+ *
+ * @format: one of SND_SOC_DAIFMT_xxx
+ */
+static int psc_ac97_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 {
-	struct mpc52xx_ac97_priv *priv;
-	struct of_device *op;
-	struct snd_soc_platform *platform = to_snd_soc_platform(dev);
-	int rv;
-	
-	printk(KERN_INFO "MPC52xx SoC Audio PCM driver\n");
-
-	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
-	if (priv == NULL)
-		return -ENOMEM;
-		
-	mutex_init(&priv->mutex);
-	platform->private_data = priv;
-	op = platform->machine->private_data;
-	platform->machine->private_data = priv;
-	
-	rv = mpc52xx_dma_setup(&priv->dma, platform, op);
-	if (rv < 0)
-		return rv;
-	
-	mpc52xx_ac97_hwinit(priv);
-
-	priv->irq = irq_of_parse_and_map(op->node, 0);
-	if (priv->irq == NO_IRQ) {
-		rv = -ENXIO;
-		goto fail_irq;
+	struct psc_ac97 *psc_ac97 = cpu_dai->private_data;
+	dev_dbg(psc_ac97->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
+				cpu_dai, format);
+	return (format == SND_SOC_DAIFMT_AC97) ? 0 : -EINVAL;
+}
+
+/* ---------------------------------------------------------------------
+ * ALSA SoC Bindings
+ *
+ * - Digital Audio Interface (DAI) template
+ * - create/destroy dai hooks
+ */
+
+/**
+ * psc_ac97_dai_template: template CPU Digital Audio Interface
+ */
+static struct snd_soc_dai_ops psc_ac97_dai_ops = {
+	.startup	= mpc5200_dma_startup,
+	.hw_params	= psc_ac97_hw_params,
+	.hw_free	= mpc5200_dma_hw_free,
+	.shutdown	= mpc5200_dma_shutdown,
+	.trigger	= mpc5200_dma_trigger,
+	.set_fmt	= psc_ac97_set_fmt,
+};
+
+static struct snd_soc_dai psc_ac97_dai_template = {
+	.playback = {
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = PSC_AC97_RATES,
+		.formats = PSC_AC97_FORMATS,
+	},
+	.capture = {
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = PSC_AC97_RATES,
+		.formats = PSC_AC97_FORMATS,
+	},
+	.ops = &psc_ac97_dai_ops,
+};
+
+/* ---------------------------------------------------------------------
+ * The PSC AC97 'ASoC platform' driver
+ *
+ * Can be referenced by an 'ASoC machine' driver
+ * This driver only deals with the audio bus; it doesn't have any
+ * interaction with the attached codec
+ */
+
+static int psc_ac97_pcm_open(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_ac97_stream *s;
+
+	dev_dbg(psc_ac97->dev, "psc_ac97_pcm_open(substream=%p)\n", substream);
+
+	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+		s = &psc_ac97->capture;
+	else
+		s = &psc_ac97->playback;
+
+	snd_soc_set_runtime_hwparams(substream, &mpc5200_pcm_hardware);
+
+	s->stream = substream;
+	return 0;
+}
+
+static int psc_ac97_pcm_close(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_ac97_stream *s;
+
+	dev_dbg(psc_ac97->dev, "psc_ac97_pcm_close(substream=%p)\n", substream);
+
+	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+		s = &psc_ac97->capture;
+	else
+		s = &psc_ac97->playback;
+
+	s->stream = NULL;
+	return 0;
+}
+
+static snd_pcm_uframes_t
+psc_ac97_pcm_pointer(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_ac97_stream *s;
+	dma_addr_t count;
+
+	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+		s = &psc_ac97->capture;
+	else
+		s = &psc_ac97->playback;
+
+	count = s->period_current_pt - s->period_start;
+
+	return bytes_to_frames(substream->runtime, count);
+}
+
+static struct snd_pcm_ops psc_ac97_pcm_ops = {
+	.open		= psc_ac97_pcm_open,
+	.close		= psc_ac97_pcm_close,
+	.ioctl		= snd_pcm_lib_ioctl,
+	.pointer	= psc_ac97_pcm_pointer,
+};
+
+static u64 psc_ac97_pcm_dmamask = 0xffffffff;
+static int psc_ac97_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
+			   struct snd_pcm *pcm)
+{
+	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
+	size_t size = mpc5200_pcm_hardware.buffer_bytes_max;
+	int rc = 0;
+
+	dev_dbg(rtd->socdev->dev, "psc_ac97_pcm_new(card=%p, dai=%p, pcm=%p)\n",
+		card, dai, pcm);
+
+	if (!card->dev->dma_mask)
+		card->dev->dma_mask = &psc_ac97_pcm_dmamask;
+	if (!card->dev->coherent_dma_mask)
+		card->dev->coherent_dma_mask = 0xffffffff;
+
+	if (pcm->streams[0].substream) {
+		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
+					&pcm->streams[0].substream->dma_buffer);
+		if (rc)
+			goto playback_alloc_err;
 	}
-	
-	printk("Requesting IRQ %d\n", priv->irq);
-	rv = request_irq(priv->irq, mpc52xx_ac97_irq,
-						IRQF_SHARED, DRV_NAME, priv);
-	if (rv < 0) {
-		printk(KERN_ERR "mpc52xx_ac97 - failed to attach interrupt\n");
-		rv = -ENXIO;
-		goto fail_request;
+
+	if (pcm->streams[1].substream) {
+		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->dev, size,
+					&pcm->streams[1].substream->dma_buffer);
+		if (rc)
+			goto capture_alloc_err;
 	}
 
-	mpc52xx_dma_enable(&priv->dma);
-	
-	rv = snd_soc_platform_add_dai(platform, mpc52xx_dai_ac97, 3, priv);
-	if (rv < 0)
-		return rv;
-		
-	return snd_soc_register_platform(platform);
-
-fail_request:	
-fail_irq:
-	return rv;
+	return 0;
+
+ capture_alloc_err:
+	if (pcm->streams[0].substream)
+		snd_dma_free_pages(&pcm->streams[0].substream->dma_buffer);
+ playback_alloc_err:
+	dev_err(card->dev, "Cannot allocate buffer(s)\n");
+	return -ENOMEM;
 }
 
-static int mpc52xx_ac97_remove(struct device *dev)
+static void psc_ac97_pcm_free(struct snd_pcm *pcm)
 {
-	struct snd_soc_platform *platform = to_snd_soc_platform(dev);
-	struct mpc52xx_ac97_priv *priv = platform->private_data;
-	
-    if (priv->irq != NO_IRQ)
-    	irq_dispose_mapping(priv->irq);
-
-	mpc52xx_dma_cleanup(platform->private_data);
-	snd_soc_unregister_platform(platform);
-	return 0;
+	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
+	struct snd_pcm_substream *substream;
+	int stream;
+
+	dev_dbg(rtd->socdev->dev, "psc_ac97_pcm_free(pcm=%p)\n", pcm);
+
+	for (stream = 0; stream < 2; stream++) {
+		substream = pcm->streams[stream].substream;
+		if (substream) {
+			snd_dma_free_pages(&substream->dma_buffer);
+			substream->dma_buffer.area = NULL;
+			substream->dma_buffer.addr = 0;
+		}
+	}
 }
 
-const char mpc_ac97_id[] = "mpc52xx-ac97";
-EXPORT_SYMBOL_GPL(mpc_ac97_id);
-
-static struct device_driver mpc52xx_ac97_driver = {
-	.name 		= mpc_ac97_id,
-	.owner		= THIS_MODULE,
-	.bus 		= &asoc_bus_type,
-	.probe		= mpc52xx_ac97_probe,
-	.remove		= __devexit_p(mpc52xx_ac97_remove),
-	.suspend	= mpc52xx_ac97_suspend,
-	.resume		= mpc52xx_ac97_resume,
+struct snd_soc_platform psc_ac97_pcm_soc_platform = {
+	.name		= "mpc5200-psc-audio",
+	.pcm_ops	= &psc_ac97_pcm_ops,
+	.pcm_new	= &psc_ac97_pcm_new,
+	.pcm_free	= &psc_ac97_pcm_free,
 };
 
-static __init int mpc52xx_ac97_init(void)
+/* ---------------------------------------------------------------------
+ * Sysfs attributes for debugging
+ */
+
+static ssize_t psc_ac97_status_show(struct device *dev,
+			   struct device_attribute *attr, char *buf)
 {
-	printk("mpc52xx_ac97_init\n");
-	return driver_register(&mpc52xx_ac97_driver);
+	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+
+	return sprintf(buf, "status=%.4x sicr=%.8x rfnum=%i rfstat=0x%.4x "
+			"tfnum=%i tfstat=0x%.4x\n",
+			in_be16(&psc_ac97->psc_regs->sr_csr.status),
+			in_be32(&psc_ac97->psc_regs->sicr),
+			in_be16(&psc_ac97->fifo_regs->rfnum) & 0x1ff,
+			in_be16(&psc_ac97->fifo_regs->rfstat),
+			in_be16(&psc_ac97->fifo_regs->tfnum) & 0x1ff,
+			in_be16(&psc_ac97->fifo_regs->tfstat));
 }
 
-static __exit void mpc52xx_ac97_exit(void)
+static int *psc_ac97_get_stat_attr(struct psc_ac97 *psc_ac97, const char *name)
 {
-	driver_unregister(&mpc52xx_ac97_driver);
+	if (strcmp(name, "playback_underrun") == 0)
+		return &psc_ac97->stats.underrun_count;
+	if (strcmp(name, "capture_overrun") == 0)
+		return &psc_ac97->stats.overrun_count;
+
+	return NULL;
 }
 
-module_init(mpc52xx_ac97_init);
-module_exit(mpc52xx_ac97_exit);
+static ssize_t psc_ac97_stat_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)
+{
+	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	int *attrib;
 
-MODULE_AUTHOR("Jon Smirl");
-MODULE_DESCRIPTION("MPC52xx AC97 module");
-MODULE_LICENSE("GPL");
+	attrib = psc_ac97_get_stat_attr(psc_ac97, attr->attr.name);
+	if (!attrib)
+		return 0;
+
+	return sprintf(buf, "%i\n", *attrib);
+}
+
+static ssize_t psc_ac97_stat_store(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf,
+				  size_t count)
+{
+	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	int *attrib;
+
+	attrib = psc_ac97_get_stat_attr(psc_ac97, attr->attr.name);
+	if (!attrib)
+		return 0;
+
+	*attrib = simple_strtoul(buf, NULL, 0);
+	return count;
+}
+
+static DEVICE_ATTR(status, 0644, psc_ac97_status_show, NULL);
+static DEVICE_ATTR(playback_underrun, 0644, psc_ac97_stat_show,
+			psc_ac97_stat_store);
+static DEVICE_ATTR(capture_overrun, 0644, psc_ac97_stat_show,
+			psc_ac97_stat_store);
+
+/* ---------------------------------------------------------------------
+ * OF platform bus binding code:
+ * - Probe/remove operations
+ * - OF device match table
+ */
+static int __devinit psc_ac97_of_probe(struct of_device *op,
+				      const struct of_device_id *match)
+{
+	phys_addr_t fifo;
+	struct psc_ac97 *psc_ac97;
+	struct resource res;
+	int size, psc_id, irq, rc;
+	const __be32 *prop;
+	void __iomem *regs;
+
+	dev_dbg(&op->dev, "probing psc ac97 device\n");
+
+	/* Get the PSC ID */
+	prop = of_get_property(op->node, "cell-index", &size);
+	if (!prop || size < sizeof *prop)
+		return -ENODEV;
+	psc_id = be32_to_cpu(*prop);
+
+	/* Fetch the registers and IRQ of the PSC */
+	irq = irq_of_parse_and_map(op->node, 0);
+	if (of_address_to_resource(op->node, 0, &res)) {
+		dev_err(&op->dev, "Missing reg property\n");
+		return -ENODEV;
+	}
+	regs = ioremap(res.start, 1 + res.end - res.start);
+	if (!regs) {
+		dev_err(&op->dev, "Could not map registers\n");
+		return -ENODEV;
+	}
+
+	/* Allocate and initialize the driver private data */
+	psc_ac97 = kzalloc(sizeof *psc_ac97, GFP_KERNEL);
+	if (!psc_ac97) {
+		iounmap(regs);
+		return -ENOMEM;
+	}
+	spin_lock_init(&psc_ac97->lock);
+	psc_ac97->irq = irq;
+	psc_ac97->psc_regs = regs;
+	psc_ac97->fifo_regs = regs + sizeof *psc_ac97->psc_regs;
+	psc_ac97->dev = &op->dev;
+	psc_ac97->playback.psc_ac97 = psc_ac97;
+	psc_ac97->capture.psc_ac97 = psc_ac97;
+	snprintf(psc_ac97->name, sizeof psc_ac97->name, "PSC%u", psc_id+1);
+
+	/* Fill out the CPU DAI structure */
+	memcpy(&psc_ac97->dai, &psc_ac97_dai_template, sizeof psc_ac97->dai);
+	psc_ac97->dai.private_data = psc_ac97;
+	psc_ac97->dai.name = psc_ac97->name;
+	psc_ac97->dai.id = psc_id;
+
+	/* Find the address of the fifo data registers and setup the
+	 * DMA tasks */
+	fifo = res.start + offsetof(struct mpc52xx_psc, buffer.buffer_32);
+	psc_ac97->capture.bcom_task =
+		bcom_psc_gen_bd_rx_init(psc_id, 10, fifo, 512);
+	psc_ac97->playback.bcom_task =
+		bcom_psc_gen_bd_tx_init(psc_id, 10, fifo);
+	if (!psc_ac97->capture.bcom_task ||
+	    !psc_ac97->playback.bcom_task) {
+		dev_err(&op->dev, "Could not allocate bestcomm tasks\n");
+		iounmap(regs);
+		kfree(psc_ac97);
+		return -ENODEV;
+	}
+
+	/* Disable all interrupts and reset the PSC */
+	out_be16(&psc_ac97->psc_regs->isr_imr.imr, 0);
+	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_RX); /* reset receiver */
+	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_TX); /* reset transmitter */
+	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_ERR_STAT); /* reset error */
+	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_SEL_MODE_REG_1); /* reset mode */
+
+	/* Do a cold reset of codec */
+	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
+	udelay(10);
+	out_8(&psc_ac97->psc_regs->op0, MPC52xx_PSC_OP_RES);
+	udelay(50);
+
+	/* Configure the serial interface mode to AC97 */
+	psc_ac97->sicr = MPC52xx_PSC_SICR_ENAC97 | MPC52xx_PSC_SICR_SYNCPOL |
+			MPC52xx_PSC_SICR_CLKPOL;
+	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr);
+
+	/* No slots active */
+	out_be32(&psc_ac97->psc_regs->ac97_slots, 0x00000000);
+
+	/* Check for the codec handle.  If it is not present then we
+	 * are done */
+	if (!of_get_property(op->node, "codec-handle", NULL))
+		return 0;
+
+	/* Set up mode register;
+	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
+	 * Second write: register Normal mode for non loopback
+	 */
+	out_8(&psc_ac97->psc_regs->mode, 0);
+	out_8(&psc_ac97->psc_regs->mode, 0);
+
+	/* Set the TX and RX fifo alarm thresholds */
+	out_be16(&psc_ac97->fifo_regs->rfalarm, 0x100);
+	out_8(&psc_ac97->fifo_regs->rfcntl, 0x4);
+	out_be16(&psc_ac97->fifo_regs->tfalarm, 0x100);
+	out_8(&psc_ac97->fifo_regs->tfcntl, 0x7);
+
+	/* Lookup the IRQ numbers */
+	psc_ac97->playback.irq =
+		bcom_get_task_irq(psc_ac97->playback.bcom_task);
+	psc_ac97->capture.irq =
+		bcom_get_task_irq(psc_ac97->capture.bcom_task);
+
+	/* Save what we've done so it can be found again later */
+	dev_set_drvdata(&op->dev, psc_ac97);
+
+	/* Register the SYSFS files */
+	rc = device_create_file(psc_ac97->dev, &dev_attr_status);
+	rc |= device_create_file(psc_ac97->dev, &dev_attr_capture_overrun);
+	rc |= device_create_file(psc_ac97->dev, &dev_attr_playback_underrun);
+	if (rc)
+		dev_info(psc_ac97->dev, "error creating sysfs files\n");
+
+	snd_soc_register_platform(&psc_ac97_pcm_soc_platform);
+
+	/* Tell the ASoC OF helpers about it */
+	of_snd_soc_register_platform(&psc_ac97_pcm_soc_platform, op->node,
+				     &psc_ac97->dai);
+
+	return 0;
+}
+
+static int __devexit psc_ac97_of_remove(struct of_device *op)
+{
+	struct psc_ac97 *psc_ac97 = dev_get_drvdata(&op->dev);
+
+	dev_dbg(&op->dev, "psc_ac97_remove()\n");
+
+	snd_soc_unregister_platform(&psc_ac97_pcm_soc_platform);
+
+	bcom_gen_bd_rx_release(psc_ac97->capture.bcom_task);
+	bcom_gen_bd_tx_release(psc_ac97->playback.bcom_task);
+
+	iounmap(psc_ac97->psc_regs);
+	iounmap(psc_ac97->fifo_regs);
+	kfree(psc_ac97);
+	dev_set_drvdata(&op->dev, NULL);
+
+	return 0;
+}
+
+/* Match table for of_platform binding */
+static struct of_device_id psc_ac97_match[] __devinitdata = {
+	{ .compatible = "fsl,mpc5200-psc-ac97", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, psc_ac97_match);
+
+static struct of_platform_driver psc_ac97_driver = {
+	.match_table = psc_ac97_match,
+	.probe = psc_ac97_of_probe,
+	.remove = __devexit_p(psc_ac97_of_remove),
+	.driver = {
+		.name = "mpc5200-psc-ac97",
+		.owner = THIS_MODULE,
+	},
+};
+
+/* ---------------------------------------------------------------------
+ * Module setup and teardown; simply register the of_platform driver
+ * for the PSC in AC97 mode.
+ */
+static int __init psc_ac97_init(void)
+{
+	return of_register_platform_driver(&psc_ac97_driver);
+}
+module_init(psc_ac97_init);
+
+static void __exit psc_ac97_exit(void)
+{
+	of_unregister_platform_driver(&psc_ac97_driver);
+}
+module_exit(psc_ac97_exit);
