Bottom: f2decdfe3c51fe4e4ff659fbfb270b64fe26c6a3
Top:    dc7d3cdf9cb19b246951ea3b2dd1f5cd4ab45098
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-19 00:51:42 -0400

Refresh of efika-stac9766

---

diff --git a/sound/soc/fsl/mpc5200_dma.c b/sound/soc/fsl/mpc5200_dma.c
index 09e7548..df229c4 100644
--- a/sound/soc/fsl/mpc5200_dma.c
+++ b/sound/soc/fsl/mpc5200_dma.c
@@ -51,65 +51,6 @@ const struct snd_pcm_hardware mpc5200_pcm_hardware = {
 	.fifo_size		= 0,
 };
 
-/**
- * psc_dma_stream - Data specific to a single stream (playback or capture)
- * @active:		flag indicating if the stream is active
- * @psc_dma:		pointer back to parent psc_dma data structure
- * @bcom_task:		bestcomm task structure
- * @irq:		irq number for bestcomm task
- * @period_start:	physical address of start of DMA region
- * @period_end:		physical address of end of DMA region
- * @period_next_pt:	physical address of next DMA buffer to enqueue
- * @period_bytes:	size of DMA period in bytes
- */
-struct psc_dma_stream {
-	int active;
-	struct psc_dma *psc_dma;
-	struct bcom_task *bcom_task;
-	int irq;
-	struct snd_pcm_substream *stream;
-	dma_addr_t period_start;
-	dma_addr_t period_end;
-	dma_addr_t period_next_pt;
-	dma_addr_t period_current_pt;
-	int period_bytes;
-};
-
-/**
- * psc_dma - Private driver data
- * @name: short name for this device ("PSC0", "PSC1", etc)
- * @psc_regs: pointer to the PSC's registers
- * @fifo_regs: pointer to the PSC's FIFO registers
- * @irq: IRQ of this PSC
- * @dev: struct device pointer
- * @dai: the CPU DAI for this device
- * @sicr: Base value used in serial interface control register; mode is ORed
- *        with this value.
- * @playback: Playback stream context data
- * @capture: Capture stream context data
- */
-struct psc_dma {
-	char name[32];
-	struct mpc52xx_psc __iomem *psc_regs;
-	struct mpc52xx_psc_fifo __iomem *fifo_regs;
-	unsigned int irq;
-	struct device *dev;
-	struct snd_soc_dai dai;
-	spinlock_t lock;
-	u32 sicr;
-	uint sysclk;
-
-	/* per-stream data */
-	struct psc_dma_stream playback;
-	struct psc_dma_stream capture;
-
-	/* Statistics */
-	struct {
-		int overrun_count;
-		int underrun_count;
-	} stats;
-};
-
 /*
  * Interrupt handlers
  */
diff --git a/sound/soc/fsl/mpc5200_dma.h b/sound/soc/fsl/mpc5200_dma.h
index 09ff62f..5426f2c 100644
--- a/sound/soc/fsl/mpc5200_dma.h
+++ b/sound/soc/fsl/mpc5200_dma.h
@@ -5,6 +5,67 @@
 #ifndef __SOUND_SOC_FSL_MPC5200_DMA_H__
 #define __SOUND_SOC_FSL_MPC5200_DMA_H__
 
+/**
+ * psc_ac97_stream - Data specific to a single stream (playback or capture)
+ * @active:		flag indicating if the stream is active
+ * @psc_ac97:		pointer back to parent psc_ac97 data structure
+ * @bcom_task:		bestcomm task structure
+ * @irq:		irq number for bestcomm task
+ * @period_start:	physical address of start of DMA region
+ * @period_end:		physical address of end of DMA region
+ * @period_next_pt:	physical address of next DMA buffer to enqueue
+ * @period_bytes:	size of DMA period in bytes
+ */
+struct psc_dma_stream {
+	int active;
+	struct psc_dma *psc_dma;
+	struct bcom_task *bcom_task;
+	int irq;
+	struct snd_pcm_substream *stream;
+	dma_addr_t period_start;
+	dma_addr_t period_end;
+	dma_addr_t period_next_pt;
+	dma_addr_t period_current_pt;
+	int period_bytes;
+};
+
+/**
+ * psc_ac97 - Private driver data
+ * @name: short name for this device ("PSC0", "PSC1", etc)
+ * @psc_regs: pointer to the PSC's registers
+ * @fifo_regs: pointer to the PSC's FIFO registers
+ * @irq: IRQ of this PSC
+ * @dev: struct device pointer
+ * @dai: the CPU DAI for this device
+ * @sicr: Base value used in serial interface control register; mode is ORed
+ *        with this value.
+ * @playback: Playback stream context data
+ * @capture: Capture stream context data
+ */
+struct psc_dma {
+	char name[32];
+	struct mpc52xx_psc __iomem *psc_regs;
+	struct mpc52xx_psc_fifo __iomem *fifo_regs;
+	unsigned int irq;
+	struct device *dev;
+	struct snd_soc_dai dai;
+	spinlock_t lock;
+	u32 sicr;
+	uint sysclk;
+
+	/* per-stream data */
+	struct psc_dma_stream playback;
+	struct psc_dma_stream capture;
+
+	/* Statistics */
+	struct {
+		int overrun_count;
+		int underrun_count;
+	} stats;
+};
+
+
+
 int mpc5200_dma_startup(struct snd_pcm_substream *substream,
 			   struct snd_soc_dai *dai);
 int mpc5200_dma_hw_free(struct snd_pcm_substream *substream,
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index d5af6b5..1298b46 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -59,81 +59,22 @@ MODULE_LICENSE("GPL");
 			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S24_BE | \
 			 SNDRV_PCM_FMTBIT_S32_BE)
 
-/**
- * psc_ac97_stream - Data specific to a single stream (playback or capture)
- * @active:		flag indicating if the stream is active
- * @psc_ac97:		pointer back to parent psc_ac97 data structure
- * @bcom_task:		bestcomm task structure
- * @irq:		irq number for bestcomm task
- * @period_start:	physical address of start of DMA region
- * @period_end:		physical address of end of DMA region
- * @period_next_pt:	physical address of next DMA buffer to enqueue
- * @period_bytes:	size of DMA period in bytes
- */
-struct psc_ac97_stream {
-	int active;
-	struct psc_ac97 *psc_ac97;
-	struct bcom_task *bcom_task;
-	int irq;
-	struct snd_pcm_substream *stream;
-	dma_addr_t period_start;
-	dma_addr_t period_end;
-	dma_addr_t period_next_pt;
-	dma_addr_t period_current_pt;
-	int period_bytes;
-};
-
-/**
- * psc_ac97 - Private driver data
- * @name: short name for this device ("PSC0", "PSC1", etc)
- * @psc_regs: pointer to the PSC's registers
- * @fifo_regs: pointer to the PSC's FIFO registers
- * @irq: IRQ of this PSC
- * @dev: struct device pointer
- * @dai: the CPU DAI for this device
- * @sicr: Base value used in serial interface control register; mode is ORed
- *        with this value.
- * @playback: Playback stream context data
- * @capture: Capture stream context data
- */
-struct psc_ac97 {
-	char name[32];
-	struct mpc52xx_psc __iomem *psc_regs;
-	struct mpc52xx_psc_fifo __iomem *fifo_regs;
-	unsigned int irq;
-	struct device *dev;
-	struct snd_soc_dai dai;
-	spinlock_t lock;
-	u32 sicr;
-	uint sysclk;
-
-	/* per-stream data */
-	struct psc_ac97_stream playback;
-	struct psc_ac97_stream capture;
-
-	/* Statistics */
-	struct {
-		int overrun_count;
-		int underrun_count;
-	} stats;
-};
-
 #define DRV_NAME "mpc5200-psc-ac97"
 
-struct psc_ac97 *psc_ac97;
+struct psc_dma *psc_dma;
 
 static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 {
-	//struct psc_ac97 *psc_ac97 = ac97->private_data;
+	//struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 	unsigned int val;
 
-	spin_lock(&psc_ac97->lock);
+	spin_lock(&psc_dma->lock);
 	printk("ac97 read: reg %04x\n", reg);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
-	while ((--timeout) && (in_be16(&psc_ac97->psc_regs->sr_csr.status) &
+	while ((--timeout) && (in_be16(&psc_dma->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_CMDSEND) )
 		udelay(10);
 
@@ -143,21 +84,21 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 	}
 
 	/* Do the read */
-	out_be32(&psc_ac97->psc_regs->ac97_cmd, (1<<31) | ((reg & 0x7f) << 24));
+	out_be32(&psc_dma->psc_regs->ac97_cmd, (1<<31) | ((reg & 0x7f) << 24));
 
 	/* Wait for the answer */
 	timeout = 1000;
-	while ((--timeout) && !(in_be16(&psc_ac97->psc_regs->sr_csr.status) &
+	while ((--timeout) && !(in_be16(&psc_dma->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_DATA_VAL) )
 		udelay(10);
 
 	if (!timeout) {
-		printk(KERN_ERR DRV_NAME ": timeout on ac97 read (val) %x\n", in_be16(&psc_ac97->psc_regs->sr_csr.status));
+		printk(KERN_ERR DRV_NAME ": timeout on ac97 read (val) %x\n", in_be16(&psc_dma->psc_regs->sr_csr.status));
 		return 0xffff;
 	}
 
 	/* Get the data */
-	val = in_be32(&psc_ac97->psc_regs->ac97_data);
+	val = in_be32(&psc_dma->psc_regs->ac97_data);
 	if ( ((val>>24) & 0x7f) != reg ) {
 		printk(KERN_ERR DRV_NAME ": reg echo error on ac97 read\n");
 		return 0xffff;
@@ -166,21 +107,21 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 
 	printk("ac97 read ok: reg %04x  val %04x\n", reg, val);
 
-	spin_unlock(&psc_ac97->lock);
+	spin_unlock(&psc_dma->lock);
 	return (unsigned short) val;
 }
 
 static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val)
 {
-	//struct psc_ac97 *psc_ac97 = ac97->private_data;
+	//struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 
 	//printk("ac97 write: reg %04x  val %04x\n", reg, val);
-	spin_lock(&psc_ac97->lock);
+	spin_lock(&psc_dma->lock);
 
 	/* Wait for it to be ready */
 	timeout = 1000;
-	while ((--timeout) && (in_be16(&psc_ac97->psc_regs->sr_csr.status) &
+	while ((--timeout) && (in_be16(&psc_dma->psc_regs->sr_csr.status) &
 						MPC52xx_PSC_SR_CMDSEND) )
 		udelay(10);
 
@@ -190,25 +131,25 @@ static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned s
 	}
 
 	/* Write data */
-	out_be32(&psc_ac97->psc_regs->ac97_cmd, ((reg & 0x7f) << 24) | (val << 8));
+	out_be32(&psc_dma->psc_regs->ac97_cmd, ((reg & 0x7f) << 24) | (val << 8));
 
-	spin_unlock(&psc_ac97->lock);
+	spin_unlock(&psc_dma->lock);
 }
 
 static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 {
-	//struct psc_ac97 *psc_ac97 = ac97->private_data;
+	//struct psc_dma *psc_dma = ac97->private_data;
 
 	printk("psc_ac97_cold_reset %p\n", ac97);
 
 	/* Do a cold reset */
-	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
-	out_8(&psc_ac97->psc_regs->op0, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op0, MPC52xx_PSC_OP_RES);
 	udelay(50);
 
 	/* PSC recover from cold reset (cfr user manual, not sure if useful) */
-	out_be32(&psc_ac97->psc_regs->sicr, in_be32(&psc_ac97->psc_regs->sicr));
+	out_be32(&psc_dma->psc_regs->sicr, in_be32(&psc_dma->psc_regs->sicr));
 }
 
 static void psc_ac97_warm_reset(struct snd_ac97 *ac97)
@@ -245,20 +186,20 @@ static int psc_ac97_hw_analog_params(struct snd_pcm_substream *substream,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 
 	printk("psc_ac97_hw_analog_params\n");
 	printk("channels %d\n",substream->runtime->channels);
 	printk("rate %d\n",substream->runtime->rate);
 	printk("periods %d\n",substream->runtime->periods);
 	printk("period_step %d\n",substream->runtime->period_step);
-	printk("slots %d\n",psc_ac97->psc_regs->ac97_slots);
+	printk("slots %d\n",psc_dma->psc_regs->ac97_slots);
 
 	/* FIXME, need a spinlock to protect access */
 	if (substream->runtime->channels == 1)
-		out_be32(&psc_ac97->psc_regs->ac97_slots, 0x01000000);
+		out_be32(&psc_dma->psc_regs->ac97_slots, 0x01000000);
 	else
-		out_be32(&psc_ac97->psc_regs->ac97_slots, 0x03000000);
+		out_be32(&psc_dma->psc_regs->ac97_slots, 0x03000000);
 
 	return 0;
 }
@@ -325,11 +266,11 @@ static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_ac97 *psc_ac97 = rtd->dai->cpu_dai->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 	uint bits, framesync, bitclk, value;
 	u32 mode;
 
-	dev_dbg(psc_ac97->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
+	dev_dbg(psc_dma->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
 		" periods=%i buffer_size=%i  buffer_bytes=%i\n",
 		__func__, substream, params_period_size(params),
 		params_period_bytes(params), params_periods(params),
@@ -353,26 +294,26 @@ static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
 		bits = 32;
 		break;
 	default:
-		dev_dbg(psc_ac97->dev, "invalid format\n");
+		dev_dbg(psc_dma->dev, "invalid format\n");
 		return -EINVAL;
 	}
-	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr | mode);
+	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr | mode);
 
-	if (psc_ac97->sysclk) {
+	if (psc_dma->sysclk) {
 		framesync = bits * 2;
-		bitclk = (psc_ac97->sysclk) / (params_rate(params) * framesync);
+		bitclk = (psc_dma->sysclk) / (params_rate(params) * framesync);
 
 		/* bitclk field is byte swapped due to mpc5200/b compatibility */
 		value = ((framesync - 1) << 24) |
 			(((bitclk - 1) & 0xFF) << 16) | ((bitclk - 1) & 0xFF00);
 
-		dev_dbg(psc_ac97->dev, "%s(substream=%p) rate=%i sysclk=%i"
+		dev_dbg(psc_dma->dev, "%s(substream=%p) rate=%i sysclk=%i"
 			" framesync=%i bitclk=%i reg=%X\n",
-			__FUNCTION__, substream, params_rate(params), psc_ac97->sysclk,
+			__FUNCTION__, substream, params_rate(params), psc_dma->sysclk,
 			framesync, bitclk, value);
 
-		out_be32(&psc_ac97->psc_regs->ccr, value);
-		out_8(&psc_ac97->psc_regs->ctur, bits - 1);
+		out_be32(&psc_dma->psc_regs->ccr, value);
+		out_8(&psc_dma->psc_regs->ctur, bits - 1);
 	}
 
   	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
@@ -393,8 +334,8 @@ static int psc_ac97_hw_params(struct snd_pcm_substream *substream,
  */
 static int psc_ac97_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 {
-	struct psc_ac97 *psc_ac97 = cpu_dai->private_data;
-	dev_dbg(psc_ac97->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
+	struct psc_dma *psc_dma = cpu_dai->private_data;
+	dev_dbg(psc_dma->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
 				cpu_dai, format);
 	return (format == SND_SOC_DAIFMT_AC97) ? 0 : -EINVAL;
 }
@@ -442,24 +383,24 @@ static struct snd_soc_dai psc_ac97_dai_template = {
 static ssize_t psc_ac97_status_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 
 	return sprintf(buf, "status=%.4x sicr=%.8x rfnum=%i rfstat=0x%.4x "
 			"tfnum=%i tfstat=0x%.4x\n",
-			in_be16(&psc_ac97->psc_regs->sr_csr.status),
-			in_be32(&psc_ac97->psc_regs->sicr),
-			in_be16(&psc_ac97->fifo_regs->rfnum) & 0x1ff,
-			in_be16(&psc_ac97->fifo_regs->rfstat),
-			in_be16(&psc_ac97->fifo_regs->tfnum) & 0x1ff,
-			in_be16(&psc_ac97->fifo_regs->tfstat));
+			in_be16(&psc_dma->psc_regs->sr_csr.status),
+			in_be32(&psc_dma->psc_regs->sicr),
+			in_be16(&psc_dma->fifo_regs->rfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->rfstat),
+			in_be16(&psc_dma->fifo_regs->tfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->tfstat));
 }
 
-static int *psc_ac97_get_stat_attr(struct psc_ac97 *psc_ac97, const char *name)
+static int *psc_ac97_get_stat_attr(struct psc_dma *psc_dma, const char *name)
 {
 	if (strcmp(name, "playback_underrun") == 0)
-		return &psc_ac97->stats.underrun_count;
+		return &psc_dma->stats.underrun_count;
 	if (strcmp(name, "capture_overrun") == 0)
-		return &psc_ac97->stats.overrun_count;
+		return &psc_dma->stats.overrun_count;
 
 	return NULL;
 }
@@ -467,10 +408,10 @@ static int *psc_ac97_get_stat_attr(struct psc_ac97 *psc_ac97, const char *name)
 static ssize_t psc_ac97_stat_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_ac97_get_stat_attr(psc_ac97, attr->attr.name);
+	attrib = psc_ac97_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -482,10 +423,10 @@ static ssize_t psc_ac97_stat_store(struct device *dev,
 				  const char *buf,
 				  size_t count)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_ac97_get_stat_attr(psc_ac97, attr->attr.name);
+	attrib = psc_ac97_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -509,12 +450,11 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
 	phys_addr_t fifo;
-	//struct psc_ac97 *psc_ac97;
+	//struct psc_dma *psc_dma;
 	struct resource res;
 	int size, psc_id, irq, rc;
 	const __be32 *prop;
 	void __iomem *regs;
-	struct device_node *child;
 
 	/* Get the PSC ID */
 	prop = of_get_property(op->node, "cell-index", &size);
@@ -535,148 +475,118 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	}
 
 	/* Allocate and initialize the driver private data */
-	psc_ac97 = kzalloc(sizeof *psc_ac97, GFP_KERNEL);
-	if (!psc_ac97) {
+	psc_dma = kzalloc(sizeof *psc_dma, GFP_KERNEL);
+	if (!psc_dma) {
 		iounmap(regs);
 		return -ENOMEM;
 	}
-	spin_lock_init(&psc_ac97->lock);
-	psc_ac97->irq = irq;
-	psc_ac97->psc_regs = regs;
-	psc_ac97->fifo_regs = regs + sizeof *psc_ac97->psc_regs;
-	psc_ac97->dev = &op->dev;
-	psc_ac97->playback.psc_ac97 = psc_ac97;
-	psc_ac97->capture.psc_ac97 = psc_ac97;
-	snprintf(psc_ac97->name, sizeof psc_ac97->name, "PSC%u", psc_id+1);
+	spin_lock_init(&psc_dma->lock);
+	psc_dma->irq = irq;
+	psc_dma->psc_regs = regs;
+	psc_dma->fifo_regs = regs + sizeof *psc_dma->psc_regs;
+	psc_dma->dev = &op->dev;
+	psc_dma->playback.psc_dma = psc_dma;
+	psc_dma->capture.psc_dma = psc_dma;
+	snprintf(psc_dma->name, sizeof psc_dma->name, "PSC%u", psc_id+1);
 
 	/* Fill out the CPU DAI structure */
-	memcpy(&psc_ac97->dai, &psc_ac97_dai_template, sizeof psc_ac97->dai);
-	psc_ac97->dai.private_data = psc_ac97;
-	psc_ac97->dai.name = psc_ac97->name;
-	psc_ac97->dai.id = psc_id;
+	memcpy(&psc_dma->dai, &psc_ac97_dai_template, sizeof psc_dma->dai);
+	psc_dma->dai.private_data = psc_dma;
+	psc_dma->dai.name = psc_dma->name;
+	psc_dma->dai.id = psc_id;
 
 	/* Find the address of the fifo data registers and setup the
 	 * DMA tasks */
 	fifo = res.start + offsetof(struct mpc52xx_psc, buffer.buffer_32);
-	psc_ac97->capture.bcom_task =
+	psc_dma->capture.bcom_task =
 		bcom_psc_gen_bd_rx_init(psc_id, 10, fifo, 512);
-	psc_ac97->playback.bcom_task =
+	psc_dma->playback.bcom_task =
 		bcom_psc_gen_bd_tx_init(psc_id, 10, fifo);
-	if (!psc_ac97->capture.bcom_task ||
-	    !psc_ac97->playback.bcom_task) {
+	if (!psc_dma->capture.bcom_task ||
+	    !psc_dma->playback.bcom_task) {
 		dev_err(&op->dev, "Could not allocate bestcomm tasks\n");
 		iounmap(regs);
-		kfree(psc_ac97);
+		kfree(psc_dma);
 		return -ENODEV;
 	}
 
 	/* Disable all interrupts and reset the PSC */
-	out_be16(&psc_ac97->psc_regs->isr_imr.imr, 0);
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_RX); /* reset receiver */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_TX); /* reset transmitter */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RST_ERR_STAT); /* reset error */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_SEL_MODE_REG_1); /* reset mode */
+	out_be16(&psc_dma->psc_regs->isr_imr.imr, 0);
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_RX); /* reset receiver */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_TX); /* reset transmitter */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RST_ERR_STAT); /* reset error */
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_SEL_MODE_REG_1); /* reset mode */
 
 	/* Do a cold reset of codec */
-	out_8(&psc_ac97->psc_regs->op1, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op1, MPC52xx_PSC_OP_RES);
 	udelay(10);
-	out_8(&psc_ac97->psc_regs->op0, MPC52xx_PSC_OP_RES);
+	out_8(&psc_dma->psc_regs->op0, MPC52xx_PSC_OP_RES);
 	udelay(50);
 
 	/* Configure the serial interface mode to AC97 */
-	psc_ac97->sicr = MPC52xx_PSC_SICR_SIM_AC97 | MPC52xx_PSC_SICR_ENAC97;
-	out_be32(&psc_ac97->psc_regs->sicr, psc_ac97->sicr);
+	psc_dma->sicr = MPC52xx_PSC_SICR_SIM_AC97 | MPC52xx_PSC_SICR_ENAC97;
+	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr);
 
 	/* No slots active */
-	out_be32(&psc_ac97->psc_regs->ac97_slots, 0x00000000);
+	out_be32(&psc_dma->psc_regs->ac97_slots, 0x00000000);
 
 	/* Set up mode register;
 	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
 	 * Second write: register Normal mode for non loopback
 	 */
-	out_8(&psc_ac97->psc_regs->mode, 0);
-	out_8(&psc_ac97->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
 
 	/* Set the TX and RX fifo alarm thresholds */
-	out_be16(&psc_ac97->fifo_regs->rfalarm, 0x100);
-	out_8(&psc_ac97->fifo_regs->rfcntl, 0x4);
-	out_be16(&psc_ac97->fifo_regs->tfalarm, 0x100);
-	out_8(&psc_ac97->fifo_regs->tfcntl, 0x7);
+	out_be16(&psc_dma->fifo_regs->rfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->rfcntl, 0x4);
+	out_be16(&psc_dma->fifo_regs->tfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->tfcntl, 0x7);
 
 	/* Go */
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_TX_ENABLE);
-	out_8(&psc_ac97->psc_regs->command, MPC52xx_PSC_RX_ENABLE);
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_TX_ENABLE);
+	out_8(&psc_dma->psc_regs->command, MPC52xx_PSC_RX_ENABLE);
 
 	/* Lookup the IRQ numbers */
-	psc_ac97->playback.irq =
-		bcom_get_task_irq(psc_ac97->playback.bcom_task);
-	psc_ac97->capture.irq =
-		bcom_get_task_irq(psc_ac97->capture.bcom_task);
-
-	/* Check for the codec child nodes */
-	for_each_child_of_node(op->node, child) {
-		struct platform_device *pdev;
-		struct dev_archdata dev_ad = {};
-		char name[MODULE_NAME_LEN];
-		const u32 *addr;
-		int len;
-
-		if (of_modalias_node(child, name, sizeof(name)) < 0)
-			continue;
-
-		addr = of_get_property(child, "reg", &len);
-		if (!addr || len < sizeof(int) || *addr > (1 << 10) - 1) {
-			printk(KERN_ERR "psc-ac97: invalid reg in device tree\n");
-			continue;
-		}
-		request_module("%s", name);
-
-		pdev = platform_device_alloc(name, 0);
-
-		dev_archdata_set_node(&dev_ad, child);
-		pdev->dev.archdata = dev_ad;
-
-		rc = platform_device_add(pdev);
-		if (rc) {
-			platform_device_put(pdev);
-			return rc;
-		}
-	}
+	psc_dma->playback.irq =
+		bcom_get_task_irq(psc_dma->playback.bcom_task);
+	psc_dma->capture.irq =
+		bcom_get_task_irq(psc_dma->capture.bcom_task);
 
 	/* Save what we've done so it can be found again later */
-	dev_set_drvdata(&op->dev, psc_ac97);
+	dev_set_drvdata(&op->dev, psc_dma);
 
 	/* Register the SYSFS files */
-	rc = device_create_file(psc_ac97->dev, &dev_attr_status);
-	rc |= device_create_file(psc_ac97->dev, &dev_attr_capture_overrun);
-	rc |= device_create_file(psc_ac97->dev, &dev_attr_playback_underrun);
+	rc = device_create_file(psc_dma->dev, &dev_attr_status);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_capture_overrun);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_playback_underrun);
 	if (rc)
-		dev_info(psc_ac97->dev, "error creating sysfs files\n");
+		dev_info(psc_dma->dev, "error creating sysfs files\n");
 
-	rc = snd_soc_register_dai(&psc_ac97->dai);
+	rc = snd_soc_register_dai(&psc_dma->dai);
 	if (rc != 0) {
 		printk("Failed to register DAI\n");
 		return 0;
 	}
 
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_cpu_dai(op->node, &psc_ac97->dai);
+	of_snd_soc_register_cpu_dai(op->node, &psc_dma->dai);
 
 	return 0;
 }
 
 static int __devexit psc_ac97_of_remove(struct of_device *op)
 {
-	struct psc_ac97 *psc_ac97 = dev_get_drvdata(&op->dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(&op->dev);
 
 	dev_dbg(&op->dev, "psc_ac97_remove()\n");
 
-	bcom_gen_bd_rx_release(psc_ac97->capture.bcom_task);
-	bcom_gen_bd_tx_release(psc_ac97->playback.bcom_task);
+	bcom_gen_bd_rx_release(psc_dma->capture.bcom_task);
+	bcom_gen_bd_tx_release(psc_dma->playback.bcom_task);
 
-	iounmap(psc_ac97->psc_regs);
-	iounmap(psc_ac97->fifo_regs);
-	kfree(psc_ac97);
+	iounmap(psc_dma->psc_regs);
+	iounmap(psc_dma->fifo_regs);
+	kfree(psc_dma);
 	dev_set_drvdata(&op->dev, NULL);
 
 	return 0;
diff --git a/sound/soc/fsl/mpc5200_psc_i2s.c b/sound/soc/fsl/mpc5200_psc_i2s.c
index b82f59b..f9be67d 100644
--- a/sound/soc/fsl/mpc5200_psc_i2s.c
+++ b/sound/soc/fsl/mpc5200_psc_i2s.c
@@ -52,75 +52,16 @@ MODULE_LICENSE("GPL");
 			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S24_BE | \
 			 SNDRV_PCM_FMTBIT_S32_BE)
 
-/**
- * psc_i2s_stream - Data specific to a single stream (playback or capture)
- * @active:		flag indicating if the stream is active
- * @psc_i2s:		pointer back to parent psc_i2s data structure
- * @bcom_task:		bestcomm task structure
- * @irq:		irq number for bestcomm task
- * @period_start:	physical address of start of DMA region
- * @period_end:		physical address of end of DMA region
- * @period_next_pt:	physical address of next DMA buffer to enqueue
- * @period_bytes:	size of DMA period in bytes
- */
-struct psc_i2s_stream {
-	int active;
-	struct psc_i2s *psc_i2s;
-	struct bcom_task *bcom_task;
-	int irq;
-	struct snd_pcm_substream *stream;
-	dma_addr_t period_start;
-	dma_addr_t period_end;
-	dma_addr_t period_next_pt;
-	dma_addr_t period_current_pt;
-	int period_bytes;
-};
-
-/**
- * psc_i2s - Private driver data
- * @name: short name for this device ("PSC0", "PSC1", etc)
- * @psc_regs: pointer to the PSC's registers
- * @fifo_regs: pointer to the PSC's FIFO registers
- * @irq: IRQ of this PSC
- * @dev: struct device pointer
- * @dai: the CPU DAI for this device
- * @sicr: Base value used in serial interface control register; mode is ORed
- *        with this value.
- * @playback: Playback stream context data
- * @capture: Capture stream context data
- */
-struct psc_i2s {
-	char name[32];
-	struct mpc52xx_psc __iomem *psc_regs;
-	struct mpc52xx_psc_fifo __iomem *fifo_regs;
-	unsigned int irq;
-	struct device *dev;
-	struct snd_soc_dai dai;
-	spinlock_t lock;
-	u32 sicr;
-	uint sysclk;
-
-	/* per-stream data */
-	struct psc_i2s_stream playback;
-	struct psc_i2s_stream capture;
-
-	/* Statistics */
-	struct {
-		int overrun_count;
-		int underrun_count;
-	} stats;
-};
-
 static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_pcm_hw_params *params,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 	uint bits, framesync, bitclk, value;
 	u32 mode;
 
-	dev_dbg(psc_i2s->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
+	dev_dbg(psc_dma->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
 		" periods=%i buffer_size=%i  buffer_bytes=%i\n",
 		__func__, substream, params_period_size(params),
 		params_period_bytes(params), params_periods(params),
@@ -144,26 +85,26 @@ static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 		bits = 32;
 		break;
 	default:
-		dev_dbg(psc_i2s->dev, "invalid format\n");
+		dev_dbg(psc_dma->dev, "invalid format\n");
 		return -EINVAL;
 	}
-	out_be32(&psc_i2s->psc_regs->sicr, psc_i2s->sicr | mode);
+	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr | mode);
 
-	if (psc_i2s->sysclk) {
+	if (psc_dma->sysclk) {
 		framesync = bits * 2;
-		bitclk = (psc_i2s->sysclk) / (params_rate(params) * framesync);
+		bitclk = (psc_dma->sysclk) / (params_rate(params) * framesync);
 
 		/* bitclk field is byte swapped due to mpc5200/b compatibility */
 		value = ((framesync - 1) << 24) |
 			(((bitclk - 1) & 0xFF) << 16) | ((bitclk - 1) & 0xFF00);
 
-		dev_dbg(psc_i2s->dev, "%s(substream=%p) rate=%i sysclk=%i"
+		dev_dbg(psc_dma->dev, "%s(substream=%p) rate=%i sysclk=%i"
 			" framesync=%i bitclk=%i reg=%X\n",
-			__FUNCTION__, substream, params_rate(params), psc_i2s->sysclk,
+			__FUNCTION__, substream, params_rate(params), psc_dma->sysclk,
 			framesync, bitclk, value);
 
-		out_be32(&psc_i2s->psc_regs->ccr, value);
-		out_8(&psc_i2s->psc_regs->ctur, bits - 1);
+		out_be32(&psc_dma->psc_regs->ccr, value);
+		out_8(&psc_dma->psc_regs->ctur, bits - 1);
 	}
 
   	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
@@ -188,27 +129,27 @@ static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 static int psc_i2s_set_sysclk(struct snd_soc_dai *cpu_dai,
 			      int clk_id, unsigned int freq, int dir)
 {
-	struct psc_i2s *psc_i2s = cpu_dai->private_data;
+	struct psc_dma *psc_dma = cpu_dai->private_data;
 	int clkdiv, err;
-	dev_dbg(psc_i2s->dev, "psc_i2s_set_sysclk(cpu_dai=%p, freq=%u, dir=%i)\n",
+	dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(cpu_dai=%p, freq=%u, dir=%i)\n",
 				cpu_dai, freq, dir);
 	if (dir == SND_SOC_CLOCK_OUT) {
-		psc_i2s->sysclk = freq;
+		psc_dma->sysclk = freq;
 		if (clk_id == MPC52xx_CLK_CELLSLAVE) {
-			psc_i2s->sicr |= MPC52xx_PSC_SICR_CELLSLAVE | MPC52xx_PSC_SICR_GENCLK;
+			psc_dma->sicr |= MPC52xx_PSC_SICR_CELLSLAVE | MPC52xx_PSC_SICR_GENCLK;
 		} else { /* MPC52xx_CLK_INTERNAL */
-			psc_i2s->sicr &= ~MPC52xx_PSC_SICR_CELLSLAVE;
-			psc_i2s->sicr |= MPC52xx_PSC_SICR_GENCLK;
+			psc_dma->sicr &= ~MPC52xx_PSC_SICR_CELLSLAVE;
+			psc_dma->sicr |= MPC52xx_PSC_SICR_GENCLK;
 
 			clkdiv = ppc_proc_freq / freq;
 			err = ppc_proc_freq % freq;
 			if (err > freq / 2)
 				clkdiv++;
 
-			dev_dbg(psc_i2s->dev, "psc_i2s_set_sysclk(clkdiv %d freq error=%ldHz)\n",
+			dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(clkdiv %d freq error=%ldHz)\n",
 					clkdiv, (ppc_proc_freq / clkdiv - freq));
 
-			return mpc52xx_set_psc_clkdiv(psc_i2s->dai.id + 1, clkdiv);
+			return mpc52xx_set_psc_clkdiv(psc_dma->dai.id + 1, clkdiv);
 		}
 	}
 	return 0;
@@ -227,8 +168,8 @@ static int psc_i2s_set_sysclk(struct snd_soc_dai *cpu_dai,
  */
 static int psc_i2s_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 {
-	struct psc_i2s *psc_i2s = cpu_dai->private_data;
-	dev_dbg(psc_i2s->dev, "psc_i2s_set_fmt(cpu_dai=%p, format=%i)\n",
+	struct psc_dma *psc_dma = cpu_dai->private_data;
+	dev_dbg(psc_dma->dev, "psc_i2s_set_fmt(cpu_dai=%p, format=%i)\n",
 				cpu_dai, format);
 	return (format == SND_SOC_DAIFMT_I2S) ? 0 : -EINVAL;
 }
@@ -276,24 +217,24 @@ static struct snd_soc_dai psc_i2s_dai_template = {
 static ssize_t psc_i2s_status_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 
 	return sprintf(buf, "status=%.4x sicr=%.8x rfnum=%i rfstat=0x%.4x "
 			"tfnum=%i tfstat=0x%.4x\n",
-			in_be16(&psc_i2s->psc_regs->sr_csr.status),
-			in_be32(&psc_i2s->psc_regs->sicr),
-			in_be16(&psc_i2s->fifo_regs->rfnum) & 0x1ff,
-			in_be16(&psc_i2s->fifo_regs->rfstat),
-			in_be16(&psc_i2s->fifo_regs->tfnum) & 0x1ff,
-			in_be16(&psc_i2s->fifo_regs->tfstat));
+			in_be16(&psc_dma->psc_regs->sr_csr.status),
+			in_be32(&psc_dma->psc_regs->sicr),
+			in_be16(&psc_dma->fifo_regs->rfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->rfstat),
+			in_be16(&psc_dma->fifo_regs->tfnum) & 0x1ff,
+			in_be16(&psc_dma->fifo_regs->tfstat));
 }
 
-static int *psc_i2s_get_stat_attr(struct psc_i2s *psc_i2s, const char *name)
+static int *psc_i2s_get_stat_attr(struct psc_dma *psc_dma, const char *name)
 {
 	if (strcmp(name, "playback_underrun") == 0)
-		return &psc_i2s->stats.underrun_count;
+		return &psc_dma->stats.underrun_count;
 	if (strcmp(name, "capture_overrun") == 0)
-		return &psc_i2s->stats.overrun_count;
+		return &psc_dma->stats.overrun_count;
 
 	return NULL;
 }
@@ -301,10 +242,10 @@ static int *psc_i2s_get_stat_attr(struct psc_i2s *psc_i2s, const char *name)
 static ssize_t psc_i2s_stat_show(struct device *dev,
 				 struct device_attribute *attr, char *buf)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_i2s_get_stat_attr(psc_i2s, attr->attr.name);
+	attrib = psc_i2s_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -316,10 +257,10 @@ static ssize_t psc_i2s_stat_store(struct device *dev,
 				  const char *buf,
 				  size_t count)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(dev);
 	int *attrib;
 
-	attrib = psc_i2s_get_stat_attr(psc_i2s, attr->attr.name);
+	attrib = psc_i2s_get_stat_attr(psc_dma, attr->attr.name);
 	if (!attrib)
 		return 0;
 
@@ -342,7 +283,7 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
 	phys_addr_t fifo;
-	struct psc_i2s *psc_i2s;
+	struct psc_dma *psc_dma;
 	struct resource res;
 	int size, psc_id, irq, rc;
 	const __be32 *prop;
@@ -369,53 +310,53 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 	}
 
 	/* Allocate and initialize the driver private data */
-	psc_i2s = kzalloc(sizeof *psc_i2s, GFP_KERNEL);
-	if (!psc_i2s) {
+	psc_dma = kzalloc(sizeof *psc_dma, GFP_KERNEL);
+	if (!psc_dma) {
 		iounmap(regs);
 		return -ENOMEM;
 	}
-	spin_lock_init(&psc_i2s->lock);
-	psc_i2s->irq = irq;
-	psc_i2s->psc_regs = regs;
-	psc_i2s->fifo_regs = regs + sizeof *psc_i2s->psc_regs;
-	psc_i2s->dev = &op->dev;
-	psc_i2s->playback.psc_i2s = psc_i2s;
-	psc_i2s->capture.psc_i2s = psc_i2s;
-	snprintf(psc_i2s->name, sizeof psc_i2s->name, "PSC%u", psc_id+1);
+	spin_lock_init(&psc_dma->lock);
+	psc_dma->irq = irq;
+	psc_dma->psc_regs = regs;
+	psc_dma->fifo_regs = regs + sizeof *psc_dma->psc_regs;
+	psc_dma->dev = &op->dev;
+	psc_dma->playback.psc_dma = psc_dma;
+	psc_dma->capture.psc_dma = psc_dma;
+	snprintf(psc_dma->name, sizeof psc_dma->name, "PSC%u", psc_id+1);
 
 	/* Fill out the CPU DAI structure */
-	memcpy(&psc_i2s->dai, &psc_i2s_dai_template, sizeof psc_i2s->dai);
-	psc_i2s->dai.private_data = psc_i2s;
-	psc_i2s->dai.name = psc_i2s->name;
-	psc_i2s->dai.id = psc_id;
+	memcpy(&psc_dma->dai, &psc_i2s_dai_template, sizeof psc_dma->dai);
+	psc_dma->dai.private_data = psc_dma;
+	psc_dma->dai.name = psc_dma->name;
+	psc_dma->dai.id = psc_id;
 
 	/* Find the address of the fifo data registers and setup the
 	 * DMA tasks */
 	fifo = res.start + offsetof(struct mpc52xx_psc, buffer.buffer_32);
-	psc_i2s->capture.bcom_task =
+	psc_dma->capture.bcom_task =
 		bcom_psc_gen_bd_rx_init(psc_id, 10, fifo, 512);
-	psc_i2s->playback.bcom_task =
+	psc_dma->playback.bcom_task =
 		bcom_psc_gen_bd_tx_init(psc_id, 10, fifo);
-	if (!psc_i2s->capture.bcom_task ||
-	    !psc_i2s->playback.bcom_task) {
+	if (!psc_dma->capture.bcom_task ||
+	    !psc_dma->playback.bcom_task) {
 		dev_err(&op->dev, "Could not allocate bestcomm tasks\n");
 		iounmap(regs);
-		kfree(psc_i2s);
+		kfree(psc_dma);
 		return -ENODEV;
 	}
 
 	/* Disable all interrupts and reset the PSC */
-	out_be16(&psc_i2s->psc_regs->isr_imr.imr, 0);
-	out_8(&psc_i2s->psc_regs->command, 3 << 4); /* reset transmitter */
-	out_8(&psc_i2s->psc_regs->command, 2 << 4); /* reset receiver */
-	out_8(&psc_i2s->psc_regs->command, 1 << 4); /* reset mode */
-	out_8(&psc_i2s->psc_regs->command, 4 << 4); /* reset error */
+	out_be16(&psc_dma->psc_regs->isr_imr.imr, 0);
+	out_8(&psc_dma->psc_regs->command, 3 << 4); /* reset transmitter */
+	out_8(&psc_dma->psc_regs->command, 2 << 4); /* reset receiver */
+	out_8(&psc_dma->psc_regs->command, 1 << 4); /* reset mode */
+	out_8(&psc_dma->psc_regs->command, 4 << 4); /* reset error */
 
 	/* Configure the serial interface mode; defaulting to CODEC8 mode */
-	psc_i2s->sicr = MPC52xx_PSC_SICR_DTS1 | MPC52xx_PSC_SICR_I2S |
+	psc_dma->sicr = MPC52xx_PSC_SICR_DTS1 | MPC52xx_PSC_SICR_I2S |
 			MPC52xx_PSC_SICR_CLKPOL;
-	out_be32(&psc_i2s->psc_regs->sicr,
-		 psc_i2s->sicr | MPC52xx_PSC_SICR_SIM_CODEC_8);
+	out_be32(&psc_dma->psc_regs->sicr,
+		 psc_dma->sicr | MPC52xx_PSC_SICR_SIM_CODEC_8);
 
 	/* Check for the codec handle.  If it is not present then we
 	 * are done */
@@ -426,49 +367,49 @@ static int __devinit psc_i2s_of_probe(struct of_device *op,
 	 * First write: RxRdy (FIFO Alarm) generates rx FIFO irq
 	 * Second write: register Normal mode for non loopback
 	 */
-	out_8(&psc_i2s->psc_regs->mode, 0);
-	out_8(&psc_i2s->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
+	out_8(&psc_dma->psc_regs->mode, 0);
 
 	/* Set the TX and RX fifo alarm thresholds */
-	out_be16(&psc_i2s->fifo_regs->rfalarm, 0x100);
-	out_8(&psc_i2s->fifo_regs->rfcntl, 0x4);
-	out_be16(&psc_i2s->fifo_regs->tfalarm, 0x100);
-	out_8(&psc_i2s->fifo_regs->tfcntl, 0x7);
+	out_be16(&psc_dma->fifo_regs->rfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->rfcntl, 0x4);
+	out_be16(&psc_dma->fifo_regs->tfalarm, 0x100);
+	out_8(&psc_dma->fifo_regs->tfcntl, 0x7);
 
 	/* Lookup the IRQ numbers */
-	psc_i2s->playback.irq =
-		bcom_get_task_irq(psc_i2s->playback.bcom_task);
-	psc_i2s->capture.irq =
-		bcom_get_task_irq(psc_i2s->capture.bcom_task);
+	psc_dma->playback.irq =
+		bcom_get_task_irq(psc_dma->playback.bcom_task);
+	psc_dma->capture.irq =
+		bcom_get_task_irq(psc_dma->capture.bcom_task);
 
 	/* Save what we've done so it can be found again later */
-	dev_set_drvdata(&op->dev, psc_i2s);
+	dev_set_drvdata(&op->dev, psc_dma);
 
 	/* Register the SYSFS files */
-	rc = device_create_file(psc_i2s->dev, &dev_attr_status);
-	rc |= device_create_file(psc_i2s->dev, &dev_attr_capture_overrun);
-	rc |= device_create_file(psc_i2s->dev, &dev_attr_playback_underrun);
+	rc = device_create_file(psc_dma->dev, &dev_attr_status);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_capture_overrun);
+	rc |= device_create_file(psc_dma->dev, &dev_attr_playback_underrun);
 	if (rc)
-		dev_info(psc_i2s->dev, "error creating sysfs files\n");
+		dev_info(psc_dma->dev, "error creating sysfs files\n");
 
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_cpu_dai(op->node, &psc_i2s->dai);
+	of_snd_soc_register_cpu_dai(op->node, &psc_dma->dai);
 
 	return 0;
 }
 
 static int __devexit psc_i2s_of_remove(struct of_device *op)
 {
-	struct psc_i2s *psc_i2s = dev_get_drvdata(&op->dev);
+	struct psc_dma *psc_dma = dev_get_drvdata(&op->dev);
 
 	dev_dbg(&op->dev, "psc_i2s_remove()\n");
 
-	bcom_gen_bd_rx_release(psc_i2s->capture.bcom_task);
-	bcom_gen_bd_tx_release(psc_i2s->playback.bcom_task);
+	bcom_gen_bd_rx_release(psc_dma->capture.bcom_task);
+	bcom_gen_bd_tx_release(psc_dma->playback.bcom_task);
 
-	iounmap(psc_i2s->psc_regs);
-	iounmap(psc_i2s->fifo_regs);
-	kfree(psc_i2s);
+	iounmap(psc_dma->psc_regs);
+	iounmap(psc_dma->fifo_regs);
+	kfree(psc_dma);
 	dev_set_drvdata(&op->dev, NULL);
 
 	return 0;
