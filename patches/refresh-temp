Bottom: 6ae05c45b2dbd2c79902a90563cd41f46c4dd4d2
Top:    59cee822dde81991f1226b8f6d4688620f4bec05
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-19 23:52:06 -0400

Refresh of efika-stac9766

---

diff --git a/include/sound/soc-of-simple.h b/include/sound/soc-of-simple.h
index 9322714..61d3c29 100644
--- a/include/sound/soc-of-simple.h
+++ b/include/sound/soc-of-simple.h
@@ -12,12 +12,14 @@
 #include <linux/of.h>
 #include <sound/soc.h>
 
+#define SOC_OF_SIMPLE_MAX_DAI 2
+
 int of_snd_soc_register_codec(struct snd_soc_codec_device *codec_dev,
 			      void *codec_data, struct snd_soc_dai *dai,
-			      size_t count, struct device_node *node);
+			      int count, struct device_node *node);
 
 int of_snd_soc_register_cpu_dai(struct device_node *node,
-				 struct snd_soc_dai *cpu_dai, size_t count);
+				 struct snd_soc_dai *cpu_dai, int count);
 
 int of_snd_soc_register_platform(struct snd_soc_platform *platform);
 
diff --git a/sound/soc/fsl/mpc5200_dma.h b/sound/soc/fsl/mpc5200_dma.h
index 6dfd405..d259033 100644
--- a/sound/soc/fsl/mpc5200_dma.h
+++ b/sound/soc/fsl/mpc5200_dma.h
@@ -5,7 +5,8 @@
 #ifndef __SOUND_SOC_FSL_MPC5200_DMA_H__
 #define __SOUND_SOC_FSL_MPC5200_DMA_H__
 
-#define PSC_MAX_DAI 2
+#include <sound/soc-of-simple.h>
+
 #define PSC_STREAM_NAME_LEN 32
 
 /**
@@ -51,8 +52,8 @@ struct psc_dma {
 	struct mpc52xx_psc_fifo __iomem *fifo_regs;
 	unsigned int irq;
 	struct device *dev;
-	struct snd_soc_dai dai[PSC_MAX_DAI];
-	char stream_name[PSC_MAX_DAI][PSC_STREAM_NAME_LEN];
+	struct snd_soc_dai dai[SOC_OF_SIMPLE_MAX_DAI];
+	char stream_name[SOC_OF_SIMPLE_MAX_DAI][PSC_STREAM_NAME_LEN];
 	spinlock_t lock;
 	u32 sicr;
 	uint sysclk;
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 5e78fc4..07136fb 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -421,7 +421,7 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	phys_addr_t fifo;
 	//struct psc_dma *psc_dma;
 	struct resource res;
-	int i, size, psc_id, irq, rc;
+	int i, nDAI, size, psc_id, irq, rc;
 	const __be32 *prop;
 	void __iomem *regs;
 
@@ -459,11 +459,12 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 	snprintf(psc_dma->name, sizeof psc_dma->name, "PSC%u AC97", psc_id+1);
 
 	/* Fill out the CPU DAI structure */
-	for (i = 0; i < PSC_MAX_DAI; i++) {
-		memcpy(&psc_dma->dai[i], &psc_ac97_dai_template, sizeof(struct snd_soc_dai));
+	nDAI = ARRAY_SIZE(psc_ac97_dai_template);
+	nDAI = min(nDAI, SOC_OF_SIMPLE_MAX_DAI);
+	for (i = 0; i < nDAI; i++) {
+		memcpy(&psc_dma->dai[i], &psc_ac97_dai_template[i], sizeof(struct snd_soc_dai));
 		psc_dma->dai[i].private_data = psc_dma;
 		snprintf(psc_dma->stream_name[i], PSC_STREAM_NAME_LEN, psc_ac97_dai_template[i].name, psc_dma->name);
-printk("Name is $%s$\n", psc_dma->stream_name[i]);
 		psc_dma->dai[i].name = psc_dma->stream_name[i];
 		psc_dma->dai[i].id = psc_id;
 	}
@@ -536,14 +537,14 @@ printk("Name is $%s$\n", psc_dma->stream_name[i]);
 	if (rc)
 		dev_info(psc_dma->dev, "error creating sysfs files\n");
 
-	rc = snd_soc_register_dais(psc_dma->dai, PSC_MAX_DAI);
+	rc = snd_soc_register_dais(psc_dma->dai, nDAI);
 	if (rc != 0) {
 		printk("Failed to register DAI\n");
 		return 0;
 	}
 
 	/* Tell the ASoC OF helpers about it */
-	of_snd_soc_register_cpu_dai(op->node, psc_dma->dai, PSC_MAX_DAI);
+	of_snd_soc_register_cpu_dai(op->node, psc_dma->dai, nDAI);
 
 	return 0;
 }
diff --git a/sound/soc/fsl/soc-of-simple.c b/sound/soc/fsl/soc-of-simple.c
index f4e06b4..49c07f6 100644
--- a/sound/soc/fsl/soc-of-simple.c
+++ b/sound/soc/fsl/soc-of-simple.c
@@ -32,7 +32,7 @@ struct of_snd_soc_device {
 	struct list_head list;
 	struct snd_soc_device device;
 	struct snd_soc_card card;
-	struct snd_soc_dai_link dai_link;
+	struct snd_soc_dai_link dai_link[SOC_OF_SIMPLE_MAX_DAI];
 	struct platform_device *pdev;
 	struct device_node *cpu_dai_node;
 	struct device_node *codec_node;
@@ -47,6 +47,8 @@ int (*template_init)(struct snd_soc_codec *codec);
 static struct of_snd_soc_device *
 of_snd_soc_get_device(struct device_node *codec_node)
 {
+	int i;
+
 	struct of_snd_soc_device *of_soc;
 
 	list_for_each_entry(of_soc, &of_snd_soc_device_list, list) {
@@ -61,11 +63,13 @@ of_snd_soc_get_device(struct device_node *codec_node)
 	/* Initialize the structure and add it to the global list */
 	of_soc->codec_node = codec_node;
 	of_soc->id = of_snd_soc_next_index++;
-	of_soc->card.dai_link = &of_soc->dai_link;
-	of_soc->card.num_links = 1;
+	of_soc->card.dai_link = of_soc->dai_link;
 	of_soc->device.card = &of_soc->card;
-	of_soc->dai_link.ops = template_ops;
-	of_soc->dai_link.init = template_init;
+	of_soc->card.num_links = SOC_OF_SIMPLE_MAX_DAI;
+	for (i = 0; i < SOC_OF_SIMPLE_MAX_DAI; i++) {
+		of_soc->dai_link[i].ops = template_ops;
+		of_soc->dai_link[i].init = template_init;
+	}
 	of_soc->card.name = template_name;
 	of_soc->card.platform = template_platform;
 
@@ -108,10 +112,10 @@ static void of_snd_soc_register_device(struct of_snd_soc_device *of_soc)
 
 int of_snd_soc_register_codec(struct snd_soc_codec_device *codec_dev,
 			      void *codec_data, struct snd_soc_dai *dai,
-			      size_t count, struct device_node *node)
+			      int count, struct device_node *node)
 {
 	struct of_snd_soc_device *of_soc;
-	int rc = 0;
+	int i, rc = 0;
 
 	pr_info("registering ASoC codec driver: %s\n", node->full_name);
 
@@ -125,10 +129,12 @@ int of_snd_soc_register_codec(struct snd_soc_codec_device *codec_dev,
 	/* Store the codec data */
 	of_soc->device.codec_data = codec_data;
 	of_soc->device.codec_dev = codec_dev;
-	of_soc->dai_link.name = (char *)node->name;
-	of_soc->dai_link.stream_name = (char *)node->name;
-	of_soc->dai_link.codec_dai = dai;
-
+	of_soc->card.num_links = min(count, of_soc->card.num_links);
+	for (i = 0; i < of_soc->card.num_links; i++) {
+		of_soc->dai_link[i].name = (char *)node->name;
+		of_soc->dai_link[i].stream_name = (char *)node->name;
+		of_soc->dai_link[i].codec_dai = dai;
+	}
 	/* Now try to register the SoC device */
 	of_snd_soc_register_device(of_soc);
 
@@ -139,12 +145,12 @@ int of_snd_soc_register_codec(struct snd_soc_codec_device *codec_dev,
 EXPORT_SYMBOL_GPL(of_snd_soc_register_codec);
 
 int of_snd_soc_register_cpu_dai(struct device_node *node,
-				 struct snd_soc_dai *cpu_dai, size_t count)
+				 struct snd_soc_dai *cpu_dai, int count)
 {
 	struct of_snd_soc_device *of_soc;
 	struct device_node *codec_node;
 	const phandle *handle;
-	int len, rc = 0;
+	int i, len, rc = 0;
 
 	pr_info("registering ASoC CPU DAI driver: %s\n", node->full_name);
 
@@ -195,7 +201,9 @@ int of_snd_soc_register_cpu_dai(struct device_node *node,
 	}
 
 	of_soc->cpu_dai_node = node;
-	of_soc->dai_link.cpu_dai = cpu_dai;
+	of_soc->card.num_links = min(count, of_soc->card.num_links);
+	for (i = 0; i < of_soc->card.num_links; i++)
+		of_soc->dai_link[i].cpu_dai = &cpu_dai[i];
 
 	/* Now try to register the SoC device */
 	of_snd_soc_register_device(of_soc);
@@ -227,6 +235,7 @@ EXPORT_SYMBOL_GPL(of_snd_soc_register_platform);
 int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops,
 								int (*init)(struct snd_soc_codec *codec))
 {
+	int i;
 	struct of_snd_soc_device *of_soc;
 
 	pr_info("registering ASoC fabric driver: %s\n", name);
@@ -236,8 +245,10 @@ int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops,
 
 	mutex_lock(&of_snd_soc_mutex);
 	list_for_each_entry(of_soc, &of_snd_soc_device_list, list) {
-		of_soc->dai_link.ops = ops;
-		of_soc->dai_link.init = init;
+		for (i = 0; i < SOC_OF_SIMPLE_MAX_DAI; i++) {
+			of_soc->dai_link[i].ops = ops;
+			of_soc->dai_link[i].init = init;
+		}
 		of_soc->card.name = name;
 		of_snd_soc_register_device(of_soc);
 	}
