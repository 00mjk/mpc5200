Bottom: b4e8be6d94742bbc40f4c622c8807d15031ab6d2
Top:    a06040af0a4497f21bd518d5bcdefc2ad9794ad2
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-24 14:38:38 -0400

Refresh of mpc5200-ac97

---

diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index a2e5672..66981ee 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -40,32 +40,11 @@ MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
 MODULE_DESCRIPTION("mpc5200 AC97 module");
 MODULE_LICENSE("GPL");
 
-
-/**
- * PSC_AC97_RATES: sample rates supported by the AC97
- *
- * This driver currently only supports the PSC running in AC97 slave mode,
- * which means the codec determines the sample rate.  Therefore, we tell
- * ALSA that we support all rates and let the codec driver decide what rates
- * are really supported.
- */
-#define PSC_AC97_RATES (SNDRV_PCM_RATE_5512 | SNDRV_PCM_RATE_8000_192000 | \
-			SNDRV_PCM_RATE_CONTINUOUS)
-
-/**
- * PSC_AC97_FORMATS: audio formats supported by the PSC AC97 mode
- */
-#define PSC_AC97_FORMATS (SNDRV_PCM_FMTBIT_S8 | SNDRV_PCM_FMTBIT_S16_BE | \
-			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S24_BE | \
-			 SNDRV_PCM_FMTBIT_S32_BE)
-
 #define DRV_NAME "mpc5200-psc-ac97"
 
-struct psc_dma *psc_dma;
-
 static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 {
-	//struct psc_dma *psc_dma = ac97->private_data;
+	struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 	unsigned int val;
 
@@ -113,7 +92,7 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 
 static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val)
 {
-	//struct psc_dma *psc_dma = ac97->private_data;
+	struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 
 	//printk("ac97 write: reg %04x  val %04x\n", reg, val);
@@ -138,7 +117,7 @@ static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned s
 
 static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 {
-	//struct psc_dma *psc_dma = ac97->private_data;
+	struct psc_dma *psc_dma = ac97->private_data;
 
 	printk("psc_ac97_cold_reset %p\n", ac97);
 
@@ -189,11 +168,12 @@ static int psc_ac97_hw_analog_params(struct snd_pcm_substream *substream,
 	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 
 	dev_dbg(psc_dma->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
-		" periods=%i buffer_size=%i  buffer_bytes=%i channels=%i\n",
+		" periods=%i buffer_size=%i  buffer_bytes=%i channels=%i"
+		" rate=%i\n",
 		__func__, substream, params_period_size(params),
 		params_period_bytes(params), params_periods(params),
 		params_buffer_size(params), params_buffer_bytes(params),
-		params_channels(params));
+		params_channels(params), params_rate(params));
 
 	// FIXME, need a spinlock to protect access
 	if (params_channels(params) == 1)
@@ -365,7 +345,7 @@ static int __devinit psc_ac97_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
 	phys_addr_t fifo;
-	//struct psc_dma *psc_dma;
+	struct psc_dma *psc_dma;
 	struct resource res;
 	int i, nDAI, size, psc_id, irq, rc;
 	const __be32 *prop;
