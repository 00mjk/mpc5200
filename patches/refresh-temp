Bottom: 21d195ee4cd9cffd483436ecbcd46e033f205137
Top:    3c294705f057aadc573e49351da4198b94d50c13
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-05-24 16:18:22 -0400

Refresh of i2s-dma-split

---

diff --git a/sound/soc/fsl/mpc5200_dma.c b/sound/soc/fsl/mpc5200_dma.c
index 6850392..5826bb3 100644
--- a/sound/soc/fsl/mpc5200_dma.c
+++ b/sound/soc/fsl/mpc5200_dma.c
@@ -34,21 +34,37 @@ MODULE_LICENSE("GPL");
 /*
  * Interrupt handlers
  */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static irqreturn_t psc_dma_status_irq(int irq, void *_psc_dma)
 {
 	struct psc_dma *psc_dma = _psc_dma;
 	struct mpc52xx_psc __iomem *regs = psc_dma->psc_regs;
+=======
+static irqreturn_t psc_i2s_status_irq(int irq, void *_psc_i2s)
+{
+	struct psc_i2s *psc_i2s = _psc_i2s;
+	struct mpc52xx_psc __iomem *regs = psc_i2s->psc_regs;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 	u16 isr;
 
 	isr = in_be16(&regs->mpc52xx_psc_isr);
 
 	/* Playback underrun error */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 	if (psc_dma->playback.active && (isr & MPC52xx_PSC_IMR_TXEMP))
 		psc_dma->stats.underrun_count++;
 
 	/* Capture overrun error */
 	if (psc_dma->capture.active && (isr & MPC52xx_PSC_IMR_ORERR))
 		psc_dma->stats.overrun_count++;
+=======
+	if (psc_i2s->playback.active && (isr & MPC52xx_PSC_IMR_TXEMP))
+		psc_i2s->stats.underrun_count++;
+
+	/* Capture overrun error */
+	if (psc_i2s->capture.active && (isr & MPC52xx_PSC_IMR_ORERR))
+		psc_i2s->stats.overrun_count++;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	out_8(&regs->command, 4 << 4);	/* reset the error status */
 
@@ -56,7 +72,11 @@ static irqreturn_t psc_dma_status_irq(int irq, void *_psc_dma)
 }
 
 /**
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
  * psc_dma_bcom_enqueue_next_buffer - Enqueue another audio buffer
+=======
+ * psc_i2s_bcom_enqueue_next_buffer - Enqueue another audio buffer
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
  * @s: pointer to stream private data structure
  *
  * Enqueues another audio period buffer into the bestcomm queue.
@@ -65,7 +85,11 @@ static irqreturn_t psc_dma_status_irq(int irq, void *_psc_dma)
  * the queue.  Otherwise the enqueue will fail and the audio ring buffer
  * will get out of sync
  */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static void psc_dma_bcom_enqueue_next_buffer(struct psc_dma_stream *s)
+=======
+static void psc_i2s_bcom_enqueue_next_buffer(struct psc_i2s_stream *s)
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 {
 	struct bcom_bd *bd;
 
@@ -82,9 +106,15 @@ static void psc_dma_bcom_enqueue_next_buffer(struct psc_dma_stream *s)
 }
 
 /* Bestcomm DMA irq handler */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static irqreturn_t psc_dma_bcom_irq(int irq, void *_psc_dma_stream)
 {
 	struct psc_dma_stream *s = _psc_dma_stream;
+=======
+static irqreturn_t psc_i2s_bcom_irq(int irq, void *_psc_i2s_stream)
+{
+	struct psc_i2s_stream *s = _psc_i2s_stream;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	/* For each finished period, dequeue the completed period buffer
 	 * and enqueue a new one in it's place. */
@@ -93,7 +123,11 @@ static irqreturn_t psc_dma_bcom_irq(int irq, void *_psc_dma_stream)
 		s->period_current_pt += s->period_bytes;
 		if (s->period_current_pt >= s->period_end)
 			s->period_current_pt = s->period_start;
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 		psc_dma_bcom_enqueue_next_buffer(s);
+=======
+		psc_i2s_bcom_enqueue_next_buffer(s);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 		bcom_enable(s->bcom_task);
 	}
 
@@ -106,13 +140,18 @@ static irqreturn_t psc_dma_bcom_irq(int irq, void *_psc_dma_stream)
 }
 
 /**
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
  * psc_dma_startup: create a new substream
+=======
+ * psc_i2s_startup: create a new substream
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
  *
  * This is the first function called when a stream is opened.
  *
  * If this is the first stream open, then grab the IRQ and program most of
  * the PSC registers.
  */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 int psc_dma_startup(struct snd_pcm_substream *substream,
 			   struct snd_soc_dai *dai)
 {
@@ -139,6 +178,34 @@ int psc_dma_startup(struct snd_pcm_substream *substream,
 				 &psc_dma->capture);
 			free_irq(psc_dma->playback.irq,
 				 &psc_dma->playback);
+=======
+int psc_i2s_startup(struct snd_pcm_substream *substream,
+			   struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	int rc;
+
+	dev_dbg(psc_i2s->dev, "psc_i2s_startup(substream=%p)\n", substream);
+
+	if (!psc_i2s->playback.active &&
+	    !psc_i2s->capture.active) {
+		/* Setup the IRQs */
+		rc = request_irq(psc_i2s->irq, &psc_i2s_status_irq, IRQF_SHARED,
+				 "psc-i2s-status", psc_i2s);
+		rc |= request_irq(psc_i2s->capture.irq,
+				  &psc_i2s_bcom_irq, IRQF_SHARED,
+				  "psc-i2s-capture", &psc_i2s->capture);
+		rc |= request_irq(psc_i2s->playback.irq,
+				  &psc_i2s_bcom_irq, IRQF_SHARED,
+				  "psc-i2s-playback", &psc_i2s->playback);
+		if (rc) {
+			free_irq(psc_i2s->irq, psc_i2s);
+			free_irq(psc_i2s->capture.irq,
+				 &psc_i2s->capture);
+			free_irq(psc_i2s->playback.irq,
+				 &psc_i2s->playback);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 			return -ENODEV;
 		}
 	}
@@ -146,7 +213,11 @@ int psc_dma_startup(struct snd_pcm_substream *substream,
 	return 0;
 }
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 int psc_dma_hw_free(struct snd_pcm_substream *substream,
+=======
+int psc_i2s_hw_free(struct snd_pcm_substream *substream,
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 			   struct snd_soc_dai *dai)
 {
 	snd_pcm_set_runtime_buffer(substream, NULL);
@@ -154,11 +225,16 @@ int psc_dma_hw_free(struct snd_pcm_substream *substream,
 }
 
 /**
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
  * psc_dma_trigger: start and stop the DMA transfer.
+=======
+ * psc_i2s_trigger: start and stop the DMA transfer.
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
  *
  * This function is called by ALSA to start, stop, pause, and resume the DMA
  * transfer of data.
  */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 			   struct snd_soc_dai *dai)
 {
@@ -167,16 +243,34 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct psc_dma_stream *s;
 	struct mpc52xx_psc __iomem *regs = psc_dma->psc_regs;
+=======
+int psc_i2s_trigger(struct snd_pcm_substream *substream, int cmd,
+			   struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct psc_i2s_stream *s;
+	struct mpc52xx_psc __iomem *regs = psc_i2s->psc_regs;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 	u16 imr;
 	u8 psc_cmd;
 	unsigned long flags;
 
 	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 		s = &psc_dma->capture;
 	else
 		s = &psc_dma->playback;
 
 	dev_dbg(psc_dma->dev, "psc_dma_trigger(substream=%p, cmd=%i)"
+=======
+		s = &psc_i2s->capture;
+	else
+		s = &psc_i2s->playback;
+
+	dev_dbg(psc_i2s->dev, "psc_i2s_trigger(substream=%p, cmd=%i)"
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 		" stream_id=%i\n",
 		substream, cmd, substream->pstr->stream);
 
@@ -207,6 +301,7 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 		else
 			bcom_gen_bd_tx_reset(s->bcom_task);
 		while (!bcom_queue_full(s->bcom_task))
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 			psc_dma_bcom_enqueue_next_buffer(s);
 		bcom_enable(s->bcom_task);
 
@@ -215,6 +310,16 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 		 * line */
 
 		spin_lock_irqsave(&psc_dma->lock, flags);
+=======
+			psc_i2s_bcom_enqueue_next_buffer(s);
+		bcom_enable(s->bcom_task);
+
+		/* Due to errata in the i2s mode; need to line up enabling
+		 * the transmitter with a transition on the frame sync
+		 * line */
+
+		spin_lock_irqsave(&psc_i2s->lock, flags);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 		/* first make sure it is low */
 		while ((in_8(&regs->ipcr_acr.ipcr) & 0x80) != 0)
 			;
@@ -228,7 +333,11 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 		if (substream->pstr->stream == SNDRV_PCM_STREAM_PLAYBACK)
 			psc_cmd |= MPC52xx_PSC_TX_ENABLE;
 		out_8(&regs->command, psc_cmd);
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 		spin_unlock_irqrestore(&psc_dma->lock, flags);
+=======
+		spin_unlock_irqrestore(&psc_i2s->lock, flags);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 		break;
 
@@ -236,7 +345,11 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 		/* Turn off the PSC */
 		s->active = 0;
 		if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE) {
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 			if (!psc_dma->playback.active) {
+=======
+			if (!psc_i2s->playback.active) {
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 				out_8(&regs->command, 2 << 4);	/* reset rx */
 				out_8(&regs->command, 3 << 4);	/* reset tx */
 				out_8(&regs->command, 4 << 4);	/* reset err */
@@ -244,7 +357,11 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 		} else {
 			out_8(&regs->command, 3 << 4);	/* reset tx */
 			out_8(&regs->command, 4 << 4);	/* reset err */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 			if (!psc_dma->capture.active)
+=======
+			if (!psc_i2s->capture.active)
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 				out_8(&regs->command, 2 << 4);	/* reset rx */
 		}
 
@@ -255,15 +372,25 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 		break;
 
 	default:
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 		dev_dbg(psc_dma->dev, "invalid command\n");
+=======
+		dev_dbg(psc_i2s->dev, "invalid command\n");
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 		return -EINVAL;
 	}
 
 	/* Update interrupt enable settings */
 	imr = 0;
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 	if (psc_dma->playback.active)
 		imr |= MPC52xx_PSC_IMR_TXEMP;
 	if (psc_dma->capture.active)
+=======
+	if (psc_i2s->playback.active)
+		imr |= MPC52xx_PSC_IMR_TXEMP;
+	if (psc_i2s->capture.active)
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 		imr |= MPC52xx_PSC_IMR_ORERR;
 	out_be16(&regs->isr_imr.imr, imr);
 
@@ -271,6 +398,7 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 }
 
 /**
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
  * psc_dma_shutdown: shutdown the data transfer on a stream
  *
  * Shutdown the PSC if there are no other substreams open.
@@ -282,11 +410,25 @@ void psc_dma_shutdown(struct snd_pcm_substream *substream,
 	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
 
 	dev_dbg(psc_dma->dev, "psc_dma_shutdown(substream=%p)\n", substream);
+=======
+ * psc_i2s_shutdown: shutdown the data transfer on a stream
+ *
+ * Shutdown the PSC if there are no other substreams open.
+ */
+void psc_i2s_shutdown(struct snd_pcm_substream *substream,
+			     struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+
+	dev_dbg(psc_i2s->dev, "psc_i2s_shutdown(substream=%p)\n", substream);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	/*
 	 * If this is the last active substream, disable the PSC and release
 	 * the IRQ.
 	 */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 	if (!psc_dma->playback.active &&
 	    !psc_dma->capture.active) {
 
@@ -301,6 +443,22 @@ void psc_dma_shutdown(struct snd_pcm_substream *substream,
 		free_irq(psc_dma->irq, psc_dma);
 		free_irq(psc_dma->capture.irq, &psc_dma->capture);
 		free_irq(psc_dma->playback.irq, &psc_dma->playback);
+=======
+	if (!psc_i2s->playback.active &&
+	    !psc_i2s->capture.active) {
+
+		/* Disable all interrupts and reset the PSC */
+		out_be16(&psc_i2s->psc_regs->isr_imr.imr, 0);
+		out_8(&psc_i2s->psc_regs->command, 3 << 4); /* reset tx */
+		out_8(&psc_i2s->psc_regs->command, 2 << 4); /* reset rx */
+		out_8(&psc_i2s->psc_regs->command, 1 << 4); /* reset mode */
+		out_8(&psc_i2s->psc_regs->command, 4 << 4); /* reset error */
+
+		/* Release irqs */
+		free_irq(psc_i2s->irq, psc_i2s);
+		free_irq(psc_i2s->capture.irq, &psc_i2s->capture);
+		free_irq(psc_i2s->playback.irq, &psc_i2s->playback);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 	}
 }
 
@@ -312,7 +470,11 @@ void psc_dma_shutdown(struct snd_pcm_substream *substream,
  * interaction with the attached codec
  */
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static const struct snd_pcm_hardware psc_dma_pcm_hardware = {
+=======
+static const struct snd_pcm_hardware psc_i2s_pcm_hardware = {
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 	.info = SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_MMAP_VALID |
 		SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER |
 		SNDRV_PCM_INFO_BATCH,
@@ -330,6 +492,7 @@ static const struct snd_pcm_hardware psc_dma_pcm_hardware = {
 	.fifo_size		= 0,
 };
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static int psc_dma_pcm_open(struct snd_pcm_substream *substream)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
@@ -344,11 +507,28 @@ static int psc_dma_pcm_open(struct snd_pcm_substream *substream)
 		s = &psc_dma->playback;
 
 	snd_soc_set_runtime_hwparams(substream, &psc_dma_pcm_hardware);
+=======
+static int psc_i2s_pcm_open(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	struct psc_i2s_stream *s;
+
+	dev_dbg(psc_i2s->dev, "psc_i2s_pcm_open(substream=%p)\n", substream);
+
+	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+		s = &psc_i2s->capture;
+	else
+		s = &psc_i2s->playback;
+
+	snd_soc_set_runtime_hwparams(substream, &psc_i2s_pcm_hardware);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	s->stream = substream;
 	return 0;
 }
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static int psc_dma_pcm_close(struct snd_pcm_substream *substream)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
@@ -361,12 +541,27 @@ static int psc_dma_pcm_close(struct snd_pcm_substream *substream)
 		s = &psc_dma->capture;
 	else
 		s = &psc_dma->playback;
+=======
+static int psc_i2s_pcm_close(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	struct psc_i2s_stream *s;
+
+	dev_dbg(psc_i2s->dev, "psc_i2s_pcm_close(substream=%p)\n", substream);
+
+	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+		s = &psc_i2s->capture;
+	else
+		s = &psc_i2s->playback;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	s->stream = NULL;
 	return 0;
 }
 
 static snd_pcm_uframes_t
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 psc_dma_pcm_pointer(struct snd_pcm_substream *substream)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
@@ -378,12 +573,26 @@ psc_dma_pcm_pointer(struct snd_pcm_substream *substream)
 		s = &psc_dma->capture;
 	else
 		s = &psc_dma->playback;
+=======
+psc_i2s_pcm_pointer(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct psc_i2s *psc_i2s = rtd->dai->cpu_dai->private_data;
+	struct psc_i2s_stream *s;
+	dma_addr_t count;
+
+	if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE)
+		s = &psc_i2s->capture;
+	else
+		s = &psc_i2s->playback;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	count = s->period_current_pt - s->period_start;
 
 	return bytes_to_frames(substream->runtime, count);
 }
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static struct snd_pcm_ops psc_dma_pcm_ops = {
 	.open		= psc_dma_pcm_open,
 	.close		= psc_dma_pcm_close,
@@ -404,6 +613,28 @@ static int psc_dma_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
 
 	if (!card->dev->dma_mask)
 		card->dev->dma_mask = &psc_dma_pcm_dmamask;
+=======
+static struct snd_pcm_ops psc_i2s_pcm_ops = {
+	.open		= psc_i2s_pcm_open,
+	.close		= psc_i2s_pcm_close,
+	.ioctl		= snd_pcm_lib_ioctl,
+	.pointer	= psc_i2s_pcm_pointer,
+};
+
+static u64 psc_i2s_pcm_dmamask = 0xffffffff;
+static int psc_i2s_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
+			   struct snd_pcm *pcm)
+{
+	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
+	size_t size = psc_i2s_pcm_hardware.buffer_bytes_max;
+	int rc = 0;
+
+	dev_dbg(rtd->socdev->dev, "psc_i2s_pcm_new(card=%p, dai=%p, pcm=%p)\n",
+		card, dai, pcm);
+
+	if (!card->dev->dma_mask)
+		card->dev->dma_mask = &psc_i2s_pcm_dmamask;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 	if (!card->dev->coherent_dma_mask)
 		card->dev->coherent_dma_mask = 0xffffffff;
 
@@ -431,13 +662,21 @@ static int psc_dma_pcm_new(struct snd_card *card, struct snd_soc_dai *dai,
 	return -ENOMEM;
 }
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 static void psc_dma_pcm_free(struct snd_pcm *pcm)
+=======
+static void psc_i2s_pcm_free(struct snd_pcm *pcm)
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 {
 	struct snd_soc_pcm_runtime *rtd = pcm->private_data;
 	struct snd_pcm_substream *substream;
 	int stream;
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 	dev_dbg(rtd->socdev->dev, "psc_dma_pcm_free(pcm=%p)\n", pcm);
+=======
+	dev_dbg(rtd->socdev->dev, "psc_i2s_pcm_free(pcm=%p)\n", pcm);
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 
 	for (stream = 0; stream < 2; stream++) {
 		substream = pcm->streams[stream].substream;
@@ -449,10 +688,18 @@ static void psc_dma_pcm_free(struct snd_pcm *pcm)
 	}
 }
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.c
 struct snd_soc_platform psc_dma_pcm_soc_platform = {
 	.name		= "mpc5200-psc-audio",
 	.pcm_ops	= &psc_dma_pcm_ops,
 	.pcm_new	= &psc_dma_pcm_new,
 	.pcm_free	= &psc_dma_pcm_free,
+=======
+struct snd_soc_platform psc_i2s_pcm_soc_platform = {
+	.name		= "mpc5200-psc-audio",
+	.pcm_ops	= &psc_i2s_pcm_ops,
+	.pcm_new	= &psc_i2s_pcm_new,
+	.pcm_free	= &psc_i2s_pcm_free,
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.c
 };
 
diff --git a/sound/soc/fsl/mpc5200_dma.h b/sound/soc/fsl/mpc5200_dma.h
index a33232c..d56f151 100644
--- a/sound/soc/fsl/mpc5200_dma.h
+++ b/sound/soc/fsl/mpc5200_dma.h
@@ -6,9 +6,15 @@
 #define __SOUND_SOC_FSL_MPC5200_DMA_H__
 
 /**
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.h
  * psc_dma_stream - Data specific to a single stream (playback or capture)
  * @active:		flag indicating if the stream is active
  * @psc_dma:		pointer back to parent psc_dma data structure
+=======
+ * psc_i2s_stream - Data specific to a single stream (playback or capture)
+ * @active:		flag indicating if the stream is active
+ * @psc_i2s:		pointer back to parent psc_i2s data structure
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.h
  * @bcom_task:		bestcomm task structure
  * @irq:		irq number for bestcomm task
  * @period_start:	physical address of start of DMA region
@@ -16,9 +22,15 @@
  * @period_next_pt:	physical address of next DMA buffer to enqueue
  * @period_bytes:	size of DMA period in bytes
  */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.h
 struct psc_dma_stream {
 	int active;
 	struct psc_dma *psc_dma;
+=======
+struct psc_i2s_stream {
+	int active;
+	struct psc_i2s *psc_i2s;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.h
 	struct bcom_task *bcom_task;
 	int irq;
 	struct snd_pcm_substream *stream;
@@ -30,7 +42,11 @@ struct psc_dma_stream {
 };
 
 /**
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.h
  * psc_dma - Private driver data
+=======
+ * psc_i2s - Private driver data
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.h
  * @name: short name for this device ("PSC0", "PSC1", etc)
  * @psc_regs: pointer to the PSC's registers
  * @fifo_regs: pointer to the PSC's FIFO registers
@@ -42,7 +58,11 @@ struct psc_dma_stream {
  * @playback: Playback stream context data
  * @capture: Capture stream context data
  */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.h
 struct psc_dma {
+=======
+struct psc_i2s {
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.h
 	char name[32];
 	struct mpc52xx_psc __iomem *psc_regs;
 	struct mpc52xx_psc_fifo __iomem *fifo_regs;
@@ -53,8 +73,13 @@ struct psc_dma {
 	u32 sicr;
 
 	/* per-stream data */
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.h
 	struct psc_dma_stream playback;
 	struct psc_dma_stream capture;
+=======
+	struct psc_i2s_stream playback;
+	struct psc_i2s_stream capture;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.h
 
 	/* Statistics */
 	struct {
@@ -64,6 +89,7 @@ struct psc_dma {
 };
 
 
+<<<<<<< current:sound/soc/fsl/mpc5200_dma.h
 int psc_dma_startup(struct snd_pcm_substream *substream,
 			   struct snd_soc_dai *dai);
 
@@ -77,5 +103,20 @@ int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd,
 			   struct snd_soc_dai *dai);
 
 extern struct snd_soc_platform psc_dma_pcm_soc_platform;
+=======
+int psc_i2s_startup(struct snd_pcm_substream *substream,
+			   struct snd_soc_dai *dai);
+
+int psc_i2s_hw_free(struct snd_pcm_substream *substream,
+			   struct snd_soc_dai *dai);
+
+void psc_i2s_shutdown(struct snd_pcm_substream *substream,
+			     struct snd_soc_dai *dai);
+
+int psc_i2s_trigger(struct snd_pcm_substream *substream, int cmd,
+			   struct snd_soc_dai *dai);
+
+extern struct snd_soc_platform psc_i2s_pcm_soc_platform;
+>>>>>>> patched:sound/soc/fsl/mpc5200_dma.h
 
 #endif /* __SOUND_SOC_FSL_MPC5200_DMA_H__ */
