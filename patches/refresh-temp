Bottom: 6548dcf03712b30176db374fcdbf152fb5d9dc43
Top:    361e0ef19c1550bf4113b764ab032fe2a10d77eb
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-10 19:55:33 -0400

Refresh of stac9766

---

diff --git a/sound/soc/codecs/stac9766.c b/sound/soc/codecs/stac9766.c
index a2b47fb..27ed705 100644
--- a/sound/soc/codecs/stac9766.c
+++ b/sound/soc/codecs/stac9766.c
@@ -18,7 +18,6 @@
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/device.h>
-#include <sound/driver.h>
 #include <sound/core.h>
 #include <sound/pcm.h>
 #include <sound/ac97_codec.h>
@@ -98,7 +97,7 @@ static const struct snd_kcontrol_new stac9766_snd_ac97_controls[] = {
 };
 
 /* add non dapm controls */
-static int stac9766_add_controls(struct snd_soc_codec *codec, 
+static int stac9766_add_controls(struct snd_soc_codec *codec,
 	struct snd_card *card)
 {
 	int err, i;
@@ -190,14 +189,14 @@ static const struct snd_soc_dapm_widget stac9766_dapm_widgets[] = {
 	SND_SOC_DAPM_VMID("VMID"),
 };
 
-static const char *audio_map[][3] = {
+static const struct snd_soc_dapm_route audio_map[] = {
 	{"HP", NULL, "Pop Bypass Mux"},
 	{"LINE", NULL, "Pop Bypass Mux"},
-	
+
 	/* Mono Mux */
 	{"MONO", NULL, "Pop Bypass Mux"},
 	{"MONO", NULL, "Mic1/2 Mux"},
-	
+
 	/* Pop Bypass Mux */
 	{"Pop Bypass Mux", NULL, "DAC"},
 	{"Pop Bypass Mux", NULL, "All Analog Mixer"},
@@ -212,11 +211,11 @@ static const char *audio_map[][3] = {
 	{"ADC", NULL, "Phone"},
 
 	{"PCMIn", NULL, "ADC"},
-	
+
 	/* Record All Mux */
 	{"Record All Mux", NULL, "Mixer"},
 	{"Record All Mux", NULL, "All Analog Mixer"},
-	
+
 	/* All Analog Mixer */
 	{"All Analog", NULL, "Mixer"},
 	{"All Analog", "PCM Switch", "DAC"},
@@ -231,11 +230,11 @@ static const char *audio_map[][3] = {
 	{"Mixer", "Video Switch", "Video"},
 
 	{"DAC", NULL, "PCMOut"},
-	
+
 	/* Mic1/2 Mux */
 	{"Mic1/2 Mux", NULL, "MIC1"},
 	{"Mic1/2 Mux", NULL, "MIC2"},
-	
+
 	/* SPDIF Mux */
 	{"SPDIF Mux", NULL, "PCMOut"},
 	{"SPDIF Mux", NULL, "ADC"},
@@ -243,24 +242,16 @@ static const char *audio_map[][3] = {
 	{NULL, NULL, NULL},
 };
 
-static int stac9766_add_widgets(struct snd_soc_codec *codec, 
-	struct snd_soc_machine *machine)
+static int stac9766_add_widgets(struct snd_soc_codec *codec)
 {
-	int i;
-
-	for(i = 0; i < ARRAY_SIZE(stac9766_dapm_widgets); i++) {
-		snd_soc_dapm_new_control(machine, codec, 
-			&stac9766_dapm_widgets[i]);
-	}
+	snd_soc_dapm_new_controls(codec, stac9766_dapm_widgets,
+				  ARRAY_SIZE(stac9766_dapm_widgets));
 
-	/* set up audio path audio_map */
-	for(i = 0; audio_map[i][0] != NULL; i++) {
-		snd_soc_dapm_add_route(machine, audio_map[i][0],
-			audio_map[i][1], audio_map[i][2]);
-	}
+	snd_soc_dapm_add_routes(codec, audio_map, ARRAY_SIZE(audio_map));
 
-	snd_soc_dapm_init(machine);
+	snd_soc_dapm_new_widgets(codec);
 	return 0;
+
 }
 
 unsigned int stac9766_ac97_read(struct snd_soc_codec *codec,
@@ -270,11 +261,11 @@ unsigned int stac9766_ac97_read(struct snd_soc_codec *codec,
 
 	if (reg/2 > ARRAY_SIZE(stac9766_reg))
 		return -EIO;
-		
+
 	if (reg == AC97_RESET || reg == AC97_GPIO_STATUS || AC97_INT_PAGING ||
 		reg == AC97_VENDOR_ID1 || reg == AC97_VENDOR_ID2) {
 
-		val = codec->machine_read(codec->ac97, reg);
+		val = soc_ac97_ops.read(codec->ac97, reg);
 		printk("stac9766_ac97_read actual reg %02x val %04x\n", reg, val);
 		return val;
 	}
@@ -286,24 +277,23 @@ int stac9766_ac97_write(struct snd_soc_codec *codec, unsigned int reg,
 	unsigned int val)
 {
 	u16 *cache = codec->reg_cache;
-	
+
 	printk("stac9766_ac97_write reg %02x val %04x\n", reg, val);
 	if (reg/2 > ARRAY_SIZE(stac9766_reg))
 		return -EIO;
-		
-	codec->machine_write(codec->ac97, val, reg);
+
+	soc_ac97_ops.write(codec->ac97, reg, val);
 	cache[reg/2] = val;
 	return 0;
 }
 
 static int ac97_analog_prepare(struct snd_pcm_substream *substream,
-	struct snd_soc_dai_runtime *dai)
+			     struct snd_soc_dai *dai)
 {
-	struct snd_soc_pcm_runtime *pcm_link = substream->private_data;
+	struct snd_soc_codec *codec = dai->codec;
 	struct snd_pcm_runtime *runtime = substream->runtime;
-	struct snd_soc_codec *codec = pcm_link->codec;
 	u16 vra;
-	
+
 	printk("stac9766: ac97_analog_prepare\n");
 
 	vra = stac9766_ac97_read(codec, AC97_EXTENDED_STATUS);
@@ -313,15 +303,15 @@ static int ac97_analog_prepare(struct snd_pcm_substream *substream,
 }
 
 static int ac97_digital_prepare(struct snd_pcm_substream *substream,
-	struct snd_soc_dai_runtime *dai)
+			     struct snd_soc_dai *dai)
 {
 	printk("stac9766: ac97_digital_prepare\n");
 
 	return 0;
 }
 
-static int stac9766_set_bias_level(struct snd_soc_codec *codec, 
-	enum snd_soc_dapm_bias_level level)
+static int stac9766_set_bias_level(struct snd_soc_codec *codec,
+						enum snd_soc_bias_level level)
 {
 	switch (level) {
 	case SND_SOC_BIAS_ON: /* full On */
@@ -342,22 +332,25 @@ static int stac9766_set_bias_level(struct snd_soc_codec *codec,
 	return 0;
 }
 
-static int stac9766_codec_suspend(struct device *dev, pm_message_t state)
+static int stac9766_codec_suspend(struct platform_device *pdev,
+	pm_message_t state)
 {
-	struct snd_soc_codec *codec = to_snd_soc_codec(dev);
+	struct snd_soc_device *socdev = platform_get_drvdata(pdev);
+	struct snd_soc_codec *codec = socdev->card->codec;
 
 	stac9766_set_bias_level(codec, SND_SOC_BIAS_OFF);
 	return 0;
 }
 
-static int stac9766_codec_resume(struct device *dev)
+static int stac9766_codec_resume(struct platform_device *pdev)
 {
-	struct snd_soc_codec *codec = to_snd_soc_codec(dev);
+	struct snd_soc_device *socdev = platform_get_drvdata(pdev);
+	struct snd_soc_codec *codec = socdev->card->codec;
 	u16 id;
 
 	/* give the codec an AC97 warm reset to start the link */
 	codec->ac97->bus->ops->warm_reset(codec->ac97);
-	id = codec->machine_read(codec->ac97, AC97_VENDOR_ID2); 
+	id = soc_ac97_ops.read(codec->ac97, AC97_VENDOR_ID2);
 	if (id != 0x4c13) {
 		printk(KERN_ERR "stac9766 failed to resume");
 		return -EIO;
@@ -376,7 +369,7 @@ static int stac9766_codec_init(struct snd_soc_codec *codec,
 	printk("stac9766: stac9766_codec_init\n");
 
 	stac9766_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
-	
+
 	stac9766_add_controls(codec, machine->card);
 	stac9766_add_widgets(codec, machine);
 
@@ -388,7 +381,7 @@ static struct snd_soc_dai stac9766_dai[] = {
 {
 	.name	= "stac9766 analog",
 	.id	= 0,
-	
+
 	/* stream cababilities */
 	.playback = {
 		.stream_name	= "stac9766 analog",
@@ -410,7 +403,7 @@ static struct snd_soc_dai stac9766_dai[] = {
 {
 	.name	= "stac9766 digital",
 	.id	= 1,
-	
+
 	/* stream cababilities */
 	.playback = {
 		.stream_name	= "stac9766 digital",
@@ -434,7 +427,7 @@ static int stac9766_codec_probe(struct device *dev)
 	codec->reg_cache = kmemdup(stac9766_reg, sizeof(stac9766_reg), GFP_KERNEL);
 	if (codec->reg_cache == NULL)
 		return -ENOMEM;
-		
+
 	codec->reg_cache_size = sizeof(stac9766_reg);
 	codec->reg_cache_step = 2;
 	codec->set_bias_level = stac9766_set_bias_level;
@@ -445,11 +438,11 @@ static int stac9766_codec_probe(struct device *dev)
 	ret = snd_soc_codec_add_dai(codec, stac9766_dai, ARRAY_SIZE(stac9766_dai));
 	if (ret < 0)
 		goto err;
-		
+
  	ret = snd_soc_register_codec(codec);
  	if (ret < 0)
  		goto err;
- 		
+
 	return ret;
 err:
 	kfree(codec->reg_cache);
