Bottom: 5aec6189de9b988d3d529df1e2562d24dd56b963
Top:    37f548fe4d254645b7251be85643ebfa1ad5cf79
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-04-30 22:32:05 -0400

Refresh of temp

---

diff --git a/sound/soc/codecs/stac9766.c b/sound/soc/codecs/stac9766.c
index 95e69a0..25adbc6 100644
--- a/sound/soc/codecs/stac9766.c
+++ b/sound/soc/codecs/stac9766.c
@@ -79,17 +79,25 @@ static const struct snd_kcontrol_new stac9766_snd_ac97_controls[] = {
 	SOC_SINGLE("Mono Playback Volume", AC97_MASTER_MONO, 0, 31, 1),
 	SOC_SINGLE("Mono Playback Switch", AC97_MASTER_MONO, 15, 1, 1),
 	SOC_SINGLE("Mixer PC Beep Volume", AC97_PC_BEEP, 1, 15, 1),
+	SOC_SINGLE("Mixer PC Beep Switch", AC97_PC_BEEP, 15, 1, 1),
 	SOC_SINGLE("PC Beep Frequency", AC97_PC_BEEP, 5, 127, 1),
 	SOC_SINGLE("Mixer Phone Volume", AC97_PHONE, 0, 31, 1),
+	SOC_SINGLE("Mixer Phone Switch", AC97_PHONE, 15, 1, 1),
 	SOC_SINGLE("Mixer Mic Volume", AC97_MIC, 0, 31, 1),
+	SOC_SINGLE("Mixer Mic Switch", AC97_MIC, 15, 1, 1),
 	SOC_SINGLE("Mic Boost", AC97_MIC, 6, 1, 1),
 	SOC_SINGLE("Mic Gain", AC97_STAC_ANALOG_SPECIAL, 2, 1, 1),
 	SOC_SINGLE("Stereo Mic", AC97_STAC_STEREO_MIC, 0, 1, 1),
 	SOC_DOUBLE("Mixer Line Volume", AC97_LINE, 8, 0, 31, 1),
+	SOC_SINGLE("Mixer Line Switch", AC97_LINE, 15, 1, 1),
 	SOC_DOUBLE("Mixer CD Volume", AC97_CD, 8, 0, 31, 1),
+	SOC_SINGLE("Mixer CD Switch", AC97_CD, 15, 1, 1),
 	SOC_DOUBLE("Mixer Video Volume", AC97_VIDEO, 8, 0, 31, 1),
+	SOC_SINGLE("Mixer Video Switch", AC97_VIDEO, 15, 1, 1),
 	SOC_DOUBLE("Mixer AUX Volume", AC97_AUX, 8, 0, 31, 1),
+	SOC_SINGLE("Mixer AUX Switch", AC97_AUX, 15, 1, 1),
 	SOC_DOUBLE("All Analog PCM Volume", AC97_PCM, 8, 0, 31, 1),
+	SOC_SINGLE("All Analog PCM Switch", AC97_PCM, 15, 1, 1),
 	SOC_DOUBLE("Record Gain", AC97_REC_GAIN, 8, 0, 31, 1),
 	SOC_SINGLE("Record Gain Switch", AC97_REC_GAIN, 15, 1, 1),
 	SOC_SINGLE("3D Effect Switch", AC97_GENERAL_PURPOSE, 13, 1, 0),
@@ -250,10 +258,8 @@ unsigned int stac9766_ac97_read(struct snd_soc_codec *codec,
 		reg == AC97_VENDOR_ID1 || reg == AC97_VENDOR_ID2) {
 
 		val = soc_ac97_ops.read(codec->ac97, reg);
-		//printk("stac9766_ac97_read actual reg %02x val %04x\n", reg, val);
 		return val;
 	}
-	//printk("stac9766_ac97_read cache reg %02x val %04x\n", reg, cache[reg / 2]);
 	return cache[reg / 2];
 }
 
@@ -262,7 +268,6 @@ int stac9766_ac97_write(struct snd_soc_codec *codec, unsigned int reg,
 {
 	u16 *cache = codec->reg_cache;
 
-	//printk("stac9766_ac97_write reg %02x val %04x\n", reg, val);
 	if (reg / 2 > ARRAY_SIZE(stac9766_reg))
 		return -EIO;
 
@@ -278,19 +283,19 @@ static int ac97_analog_prepare(struct snd_pcm_substream *substream,
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	unsigned short reg, vra;
 
-	printk("stac9766: ac97_analog_prepare rate %d\n", runtime->rate);
-
 	vra = stac9766_ac97_read(codec, AC97_EXTENDED_STATUS);
+
+	//vra |= 0x4;
+
 	stac9766_ac97_write(codec, AC97_EXTENDED_STATUS, vra | 0x1);
 
+	printk("AC97_EXTENDED_STATUS %x\n", vra);
+
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 		reg = AC97_PCM_FRONT_DAC_RATE;
 	else
 		reg = AC97_PCM_LR_ADC_RATE;
 
-	vra = stac9766_ac97_read(codec, reg);
-	printk("rate is %x %x\n", vra, runtime->rate/2);
-
 	return stac9766_ac97_write(codec, reg, runtime->rate);
 }
 
diff --git a/sound/soc/fsl/mpc5200_dma.c b/sound/soc/fsl/mpc5200_dma.c
index efaf4b8..1b33256 100644
--- a/sound/soc/fsl/mpc5200_dma.c
+++ b/sound/soc/fsl/mpc5200_dma.c
@@ -44,7 +44,9 @@ static irqreturn_t psc_dma_status_irq(int irq, void *_psc_dma)
 	struct mpc52xx_psc __iomem *regs = psc_dma->psc_regs;
 	u16 isr;
 
+	printk("psc_dma_status_irq\n");
 	isr = in_be16(&regs->mpc52xx_psc_isr);
+	printk("psc_dma_status_irq isr %x\n", isr);
 
 	/* Playback underrun error */
 	if (psc_dma->playback.active && (isr & MPC52xx_PSC_IMR_TXEMP))
@@ -90,9 +92,12 @@ static irqreturn_t psc_dma_bcom_irq(int irq, void *_psc_dma_stream)
 {
 	struct psc_dma_stream *s = _psc_dma_stream;
 
+	printk("psc_dma_bcom_irq\n");
+
 	/* For each finished period, dequeue the completed period buffer
 	 * and enqueue a new one in it's place. */
 	while (bcom_buffer_done(s->bcom_task)) {
+		printk("psc_dma_bcom_irq dequeue\n");
 		bcom_retrieve_buffer(s->bcom_task, NULL, NULL);
 		s->period_current_pt += s->period_bytes;
 		if (s->period_current_pt >= s->period_end)
@@ -104,6 +109,7 @@ static irqreturn_t psc_dma_bcom_irq(int irq, void *_psc_dma_stream)
 	/* If the stream is active, then also inform the PCM middle layer
 	 * of the period finished event. */
 	if (s->active) {
+		printk("psc_dma_bcom_irq active\n");
 		s->jiffies = jiffies;
 		snd_pcm_period_elapsed(s->stream);
 	}
@@ -149,6 +155,7 @@ static int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd)
 		s->period_bytes = frames_to_bytes(runtime,
 						  runtime->period_size);
 		s->period_start = virt_to_phys(runtime->dma_area);
+		printk("runtime->dma_area %p\n", runtime->dma_area);
 		s->period_end = s->period_start +
 				(s->period_bytes * runtime->periods);
 		s->period_next_pt = s->period_start;
@@ -158,12 +165,13 @@ static int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd)
 
 		/* First; reset everything */
 		if (substream->pstr->stream == SNDRV_PCM_STREAM_CAPTURE) {
+			printk("Capture\n");
 			//out_8(&regs->command, MPC52xx_PSC_RST_RX);
-			out_8(&regs->command, MPC52xx_PSC_RST_ERR_STAT);
 		} else {
+			printk("Playback\n");
 			//out_8(&regs->command, MPC52xx_PSC_RST_TX);
-			out_8(&regs->command, MPC52xx_PSC_RST_ERR_STAT);
 		}
+		out_8(&regs->command, MPC52xx_PSC_RST_ERR_STAT);
 
 		/* Next, fill up the bestcomm bd queue and enable DMA.
 		 * This will begin filling the PSC's fifo. */
@@ -204,11 +212,11 @@ static int psc_dma_trigger(struct snd_pcm_substream *substream, int cmd)
 			if (!psc_dma->playback.active) {
 				//out_8(&regs->command, 2 << 4);	/* reset rx */
 				//out_8(&regs->command, 3 << 4);	/* reset tx */
-				out_8(&regs->command, 4 << 4);	/* reset err */
+				out_8(&regs->command, MPC52xx_PSC_RST_ERR_STAT);
 			}
 		} else {
 			//out_8(&regs->command, 3 << 4);	/* reset tx */
-			out_8(&regs->command, 4 << 4);	/* reset err */
+			out_8(&regs->command, MPC52xx_PSC_RST_ERR_STAT);
 			if (!psc_dma->capture.active) {
 				//out_8(&regs->command, 2 << 4);	/* reset rx */
 			}
@@ -408,6 +416,7 @@ static int psc_dma_new(struct snd_card *card, struct snd_soc_dai *dai,
 	if (pcm->streams[0].substream) {
 		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->card->dev, size,
 					&pcm->streams[0].substream->dma_buffer);
+		printk("playback buffer %p\n", pcm->streams[0].substream->dma_buffer.area );
 		if (rc)
 			goto playback_alloc_err;
 	}
@@ -415,6 +424,7 @@ static int psc_dma_new(struct snd_card *card, struct snd_soc_dai *dai,
 	if (pcm->streams[1].substream) {
 		rc = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV, pcm->card->dev, size,
 					&pcm->streams[1].substream->dma_buffer);
+		printk("capture %p\n", pcm->streams[1].substream->dma_buffer.area );
 		if (rc)
 			goto capture_alloc_err;
 	}
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 6551241..c3dc7da 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -171,9 +171,9 @@ static int psc_ac97_hw_analog_params(struct snd_pcm_substream *substream,
 
 	spin_lock(&psc_dma->lock);
 	if (params_channels(params) == 1)
-		out_be32(&psc_dma->psc_regs->ac97_slots, 0x01000000);
+		out_be32(&psc_dma->psc_regs->ac97_slots, 0x03000300);
 	else
-		out_be32(&psc_dma->psc_regs->ac97_slots, 0x03000000);
+		out_be32(&psc_dma->psc_regs->ac97_slots, 0x03000300);
 	spin_unlock(&psc_dma->lock);
 
 	return 0;
