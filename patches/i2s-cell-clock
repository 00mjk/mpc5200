Bottom: 34b26e17f00eeb4d1944110608defcd576686e3e
Top:    08a3172bc167ecc538e81d0a642bf7d0bebe0e91
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-06-19 10:52:32 -0400

Support internal I2S clock sources on MPC5200

Support internal I2S clock sources on MPC5200

Signed-off-by: Jon Smirl <jonsmirl@gmail.com>
















---

diff --git a/sound/soc/fsl/mpc5200_psc_i2s.c b/sound/soc/fsl/mpc5200_psc_i2s.c
index ce8de90..c58fcde 100644
--- a/sound/soc/fsl/mpc5200_psc_i2s.c
+++ b/sound/soc/fsl/mpc5200_psc_i2s.c
@@ -14,10 +14,12 @@
 #include <sound/pcm_params.h>
 #include <sound/soc.h>
 
+#include <asm/time.h>
+#include <asm/mpc52xx.h>
 #include <asm/mpc52xx_psc.h>
 
-#include "mpc5200_psc_i2s.h"
 #include "mpc5200_dma.h"
+#include "mpc5200_psc_i2s.h"
 
 /**
  * PSC_I2S_RATES: sample rates supported by the I2S
@@ -36,12 +38,14 @@
 #define PSC_I2S_FORMATS (SNDRV_PCM_FMTBIT_S8 | SNDRV_PCM_FMTBIT_S16_BE | \
 			 SNDRV_PCM_FMTBIT_S24_BE | SNDRV_PCM_FMTBIT_S32_BE)
 
+
 static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_pcm_hw_params *params,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct psc_dma *psc_dma = rtd->dai->cpu_dai->private_data;
+	uint bits, framesync, bitclk, value;
 	u32 mode;
 
 	dev_dbg(psc_dma->dev, "%s(substream=%p) p_size=%i p_bytes=%i"
@@ -53,15 +57,19 @@ static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 	switch (params_format(params)) {
 	case SNDRV_PCM_FORMAT_S8:
 		mode = MPC52xx_PSC_SICR_SIM_CODEC_8;
+		bits = 8;
 		break;
 	case SNDRV_PCM_FORMAT_S16_BE:
 		mode = MPC52xx_PSC_SICR_SIM_CODEC_16;
+		bits = 16;
 		break;
 	case SNDRV_PCM_FORMAT_S24_BE:
 		mode = MPC52xx_PSC_SICR_SIM_CODEC_24;
+		bits = 24;
 		break;
 	case SNDRV_PCM_FORMAT_S32_BE:
 		mode = MPC52xx_PSC_SICR_SIM_CODEC_32;
+		bits = 32;
 		break;
 	default:
 		dev_dbg(psc_dma->dev, "invalid format\n");
@@ -69,6 +77,23 @@ static int psc_i2s_hw_params(struct snd_pcm_substream *substream,
 	}
 	out_be32(&psc_dma->psc_regs->sicr, psc_dma->sicr | mode);
 
+	if (psc_dma->sysclk) {
+		framesync = bits * 2;
+		bitclk = (psc_dma->sysclk) / (params_rate(params) * framesync);
+
+		/* bitclk field is byte swapped due to mpc5200/b compatibility */
+		value = ((framesync - 1) << 24) |
+			(((bitclk - 1) & 0xFF) << 16) | ((bitclk - 1) & 0xFF00);
+
+		dev_dbg(psc_dma->dev, "%s(substream=%p) rate=%i sysclk=%i"
+			" framesync=%i bitclk=%i reg=%X\n",
+			__FUNCTION__, substream, params_rate(params), psc_dma->sysclk,
+			framesync, bitclk, value);
+
+		out_be32(&psc_dma->psc_regs->ccr, value);
+		out_8(&psc_dma->psc_regs->ctur, bits - 1);
+	}
+
 	return 0;
 }
 
@@ -90,9 +115,31 @@ static int psc_i2s_set_sysclk(struct snd_soc_dai *cpu_dai,
 			      int clk_id, unsigned int freq, int dir)
 {
 	struct psc_dma *psc_dma = cpu_dai->private_data;
-	dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(cpu_dai=%p, dir=%i)\n",
-				cpu_dai, dir);
-	return (dir == SND_SOC_CLOCK_IN) ? 0 : -EINVAL;
+	int clkdiv, err;
+
+	dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(cpu_dai=%p, freq=%u, dir=%i)\n",
+				cpu_dai, freq, dir);
+
+	if (dir == SND_SOC_CLOCK_OUT) {
+		psc_dma->sysclk = freq;
+		if (clk_id == MPC52xx_CLK_CELLSLAVE) {
+			psc_dma->sicr |= MPC52xx_PSC_SICR_CELLSLAVE | MPC52xx_PSC_SICR_GENCLK;
+		} else { /* MPC52xx_CLK_INTERNAL */
+			psc_dma->sicr &= ~MPC52xx_PSC_SICR_CELLSLAVE;
+			psc_dma->sicr |= MPC52xx_PSC_SICR_GENCLK;
+
+			clkdiv = ppc_proc_freq / freq;
+			err = ppc_proc_freq % freq;
+			if (err > freq / 2)
+				clkdiv++;
+
+			dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(clkdiv %d freq error=%ldHz)\n",
+					clkdiv, (ppc_proc_freq / clkdiv - freq));
+
+			return mpc52xx_set_psc_clkdiv(psc_dma->id + 1, clkdiv);
+		}
+	}
+	return 0;
 }
 
 /**
diff --git a/sound/soc/fsl/mpc5200_psc_i2s.h b/sound/soc/fsl/mpc5200_psc_i2s.h
index ce55e07..2f74cdd 100644
--- a/sound/soc/fsl/mpc5200_psc_i2s.h
+++ b/sound/soc/fsl/mpc5200_psc_i2s.h
@@ -3,10 +3,12 @@
  * ALSA SoC Digital Audio Interface (DAI) driver
  *
  */
-
 #ifndef __SOUND_SOC_FSL_MPC52xx_PSC_I2S_H__
 #define __SOUND_SOC_FSL_MPC52xx_PSC_I2S_H__
 
+#define MPC52xx_CLK_INTERNAL 0
+#define MPC52xx_CLK_CELLSLAVE 1
+
 extern struct snd_soc_dai psc_i2s_dai[];
 
 #endif /* __SOUND_SOC_FSL_MPC52xx_PSC_I2S_H__ */
