Bottom: 7974311e8b53831fef14e8285b08d0cb524271c5
Top:    8ba1b39feeda7e1740ab91bf57e72c9fc4a3da30
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-05-13 14:12:27 -0400

Support for AC97 on Phytec pmc030 base board.


---

diff --git a/arch/powerpc/boot/dts/pcm030.dts b/arch/powerpc/boot/dts/pcm030.dts
index 8958347..001c8ef 100644
--- a/arch/powerpc/boot/dts/pcm030.dts
+++ b/arch/powerpc/boot/dts/pcm030.dts
@@ -190,6 +190,14 @@
 			cell-index = <0>;
 			reg = <0x2000 0x100>;
 			interrupts = <2 1 0>;
+
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			codec@0 {
+				compatible = "wlf,wm9712";
+				reg = <0x0>;
+			};
 		};
 
 		/* PSC2 port is used by CAN1/2 */
diff --git a/include/sound/soc-dai.h b/include/sound/soc-dai.h
index 496dc30..352d7ee 100644
--- a/include/sound/soc-dai.h
+++ b/include/sound/soc-dai.h
@@ -79,7 +79,8 @@ struct snd_pcm_substream;
 #define SND_SOC_CLOCK_OUT		1
 
 #define SND_SOC_STD_AC97_FMTS (SNDRV_PCM_FMTBIT_S16_LE |\
-                               SNDRV_PCM_FMTBIT_S32_LE)
+                               SNDRV_PCM_FMTBIT_S32_LE |\
+                               SNDRV_PCM_FMTBIT_S32_BE)
 
 struct snd_soc_dai_ops;
 struct snd_soc_dai;
diff --git a/include/sound/soc-of-simple.h b/include/sound/soc-of-simple.h
index 61d3c29..97d04af 100644
--- a/include/sound/soc-of-simple.h
+++ b/include/sound/soc-of-simple.h
@@ -23,9 +23,11 @@ int of_snd_soc_register_cpu_dai(struct device_node *node,
 
 int of_snd_soc_register_platform(struct snd_soc_platform *platform);
 
-int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops,
+int of_snd_soc_register_fabric(const char *name, struct snd_soc_ops *ops,
 								int (*init)(struct snd_soc_codec *codec));
 
+int of_snd_soc_register_default_fabric(void);
+
 #endif
 
 #endif /* _INCLUDE_SOC_OF_H_ */
diff --git a/sound/last.c b/sound/last.c
index bdd0857..b6efece 100644
--- a/sound/last.c
+++ b/sound/last.c
@@ -22,11 +22,15 @@
 #define SNDRV_MAIN_OBJECT_FILE
 #include <linux/init.h>
 #include <sound/core.h>
+#include <sound/soc-of-simple.h>
 
 static int __init alsa_sound_last_init(void)
 {
 	int idx, ok = 0;
-	
+
+#if defined(CONFIG_SND_SOC_OF_SIMPLE)
+	of_snd_soc_register_default_fabric();
+#endif 	
 	printk(KERN_INFO "ALSA device list:\n");
 	for (idx = 0; idx < SNDRV_CARDS; idx++)
 		if (snd_cards[idx] != NULL) {
diff --git a/sound/soc/codecs/wm9712.c b/sound/soc/codecs/wm9712.c
index 550c903..cb0e679 100644
--- a/sound/soc/codecs/wm9712.c
+++ b/sound/soc/codecs/wm9712.c
@@ -20,6 +20,7 @@
 #include <sound/initval.h>
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
+#include <sound/soc-of-simple.h>
 #include "wm9712.h"
 
 #define WM9712_VERSION "0.4"
@@ -740,6 +741,39 @@ struct snd_soc_codec_device soc_codec_dev_wm9712 = {
 };
 EXPORT_SYMBOL_GPL(soc_codec_dev_wm9712);
 
+static int __init wm9712_probe(struct platform_device *pdev)
+{
+	snd_soc_register_dais(wm9712_dai, ARRAY_SIZE(wm9712_dai));
+#if defined(CONFIG_SND_SOC_OF_SIMPLE)
+	/* Tell the of_soc helper about this codec */
+	of_snd_soc_register_codec(&soc_codec_dev_wm9712, pdev->dev.archdata.of_node,
+									wm9712_dai, ARRAY_SIZE(wm9712_dai),
+									pdev->dev.archdata.of_node);
+#endif
+	return 0;
+}
+
+static struct platform_driver wm9712_driver =
+{
+	.probe = wm9712_probe,
+	.driver = {
+			.name = "wm9712",
+	},
+};
+
+static __init int wm9712_driver_init(void)
+{
+	return platform_driver_register(&wm9712_driver);
+}
+
+static __exit void wm9712_driver_exit(void)
+{
+}
+
+module_init(wm9712_driver_init);
+module_exit(wm9712_driver_exit);
+
+
 MODULE_DESCRIPTION("ASoC WM9711/WM9712 driver");
 MODULE_AUTHOR("Liam Girdwood");
 MODULE_LICENSE("GPL");
diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index 7ad85d2..c3ec163 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -57,4 +57,12 @@ config SND_MPC52xx_SOC_DSPEAK01
 	help
 	  Say Y if you want to add support for sound on Digispeaker DSPEAK01.
 
+config SND_MPC52xx_SOC_PCM030
+	tristate "SoC AC97 Audio support for Phytec pcm030 and WM9712"
+	depends on PPC_MPC5200_SIMPLE
+	select SND_SOC_MPC5200_AC97
+	select SND_SOC_WM9712
+	help
+	  Say Y if you want to add support for sound on the Phytec pcm030 baseboard.
+
 
diff --git a/sound/soc/fsl/soc-of-simple.c b/sound/soc/fsl/soc-of-simple.c
index 84c2d75..bf307aa 100644
--- a/sound/soc/fsl/soc-of-simple.c
+++ b/sound/soc/fsl/soc-of-simple.c
@@ -40,7 +40,7 @@ struct of_snd_soc_device {
 
 /* template values */
 struct snd_soc_platform *template_platform;
-char *template_name = NULL;
+const char *template_name = NULL;
 struct snd_soc_ops *template_ops;
 int (*template_init)(struct snd_soc_codec *codec);
 
@@ -70,7 +70,7 @@ of_snd_soc_get_device(struct device_node *codec_node)
 		of_soc->dai_link[i].ops = template_ops;
 		of_soc->dai_link[i].init = template_init;
 	}
-	of_soc->card.name = template_name;
+	of_soc->card.name = (char *)template_name;
 	of_soc->card.platform = template_platform;
 
 	list_add(&of_soc->list, &of_snd_soc_device_list);
@@ -233,7 +233,7 @@ int of_snd_soc_register_platform(struct snd_soc_platform *platform)
 }
 EXPORT_SYMBOL_GPL(of_snd_soc_register_platform);
 
-int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops,
+int of_snd_soc_register_fabric(const char *name, struct snd_soc_ops *ops,
 								int (*init)(struct snd_soc_codec *codec))
 {
 	int i;
@@ -250,7 +250,7 @@ int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops,
 			of_soc->dai_link[i].ops = ops;
 			of_soc->dai_link[i].init = init;
 		}
-		of_soc->card.name = name;
+		of_soc->card.name = (char *)name;
 		of_snd_soc_register_device(of_soc);
 	}
 	mutex_unlock(&of_snd_soc_mutex);
@@ -259,11 +259,19 @@ int of_snd_soc_register_fabric(char *name, struct snd_soc_ops *ops,
 EXPORT_SYMBOL_GPL(of_snd_soc_register_fabric);
 
 /* If no board specific fabric driver has been registered, register a default one */
-int register_default_fabric(void)
+int of_snd_soc_register_default_fabric(void)
 {
-	if (template_name == NULL)
-		return of_snd_soc_register_fabric("Default Fabric", NULL, NULL);
-	return 0;
+	struct device_node *root;
+	const char *model = "";
+
+	if (template_name != NULL)
+		return 0;
+
+	root = of_find_node_by_path("/");
+	if (root)
+		model = of_get_property(root, "model", NULL);
+
+	return of_snd_soc_register_fabric(model, NULL, NULL);
 }
+EXPORT_SYMBOL_GPL(of_snd_soc_register_default_fabric);
 
-late_initcall(register_default_fabric);
