Bottom: 93126bca4d869f631b4c5d5c6bdb33c12030a06e
Top:    6d9e4df293cc2419a8206ca886b9396426eaa7df
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2009-05-22 11:28:25 -0400

Temporary holding patch


---

diff --git a/sound/soc/fsl/mpc5200_psc_ac97.c b/sound/soc/fsl/mpc5200_psc_ac97.c
index 6230c09..39af12d 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.c
+++ b/sound/soc/fsl/mpc5200_psc_ac97.c
@@ -40,9 +40,11 @@ MODULE_LICENSE("GPL");
 
 #define DRV_NAME "mpc5200-psc-ac97"
 
+/* ALSA only supports a single AC97 device so static is recommend here */
+static struct psc_dma *psc_dma;
+
 static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 {
-	struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 	unsigned int val;
 
@@ -87,7 +89,6 @@ static unsigned short psc_ac97_read(struct snd_ac97 *ac97, unsigned short reg)
 
 static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned short val)
 {
-	struct psc_dma *psc_dma = ac97->private_data;
 	int timeout;
 
 	spin_lock(&psc_dma->lock);
@@ -111,7 +112,6 @@ static void psc_ac97_write(struct snd_ac97 *ac97, unsigned short reg, unsigned s
 
 static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 {
-	struct psc_dma *psc_dma = ac97->private_data;
 	struct mpc52xx_psc __iomem *regs = psc_dma->psc_regs;
 
 	/* Do a cold reset */
@@ -126,7 +126,6 @@ static void psc_ac97_cold_reset(struct snd_ac97 *ac97)
 
 static void psc_ac97_warm_reset(struct snd_ac97 *ac97)
 {
-	struct psc_dma *psc_dma = ac97->private_data;
 	struct mpc52xx_psc __iomem *regs = psc_dma->psc_regs;
 
 	out_be32(&regs->sicr, psc_dma->sicr | MPC52xx_PSC_SICR_AWR);
@@ -245,6 +244,7 @@ static int psc_ac97_trigger(struct snd_pcm_substream *substream, int cmd,
 static int psc_ac97_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int format)
 {
 	struct psc_dma *psc_dma = cpu_dai->private_data;
+
 	dev_dbg(psc_dma->dev, "psc_ac97_set_fmt(cpu_dai=%p, format=%i)\n",
 				cpu_dai, format);
 
@@ -272,9 +272,9 @@ static struct snd_soc_dai_ops psc_ac97_digital_ops = {
 	.set_fmt	= psc_ac97_set_fmt,
 };
 
-static struct snd_soc_dai psc_ac97_dai_template[] = {
+struct snd_soc_dai psc_ac97_dai[] = {
 {
-	.name   = "%s AC97",
+	.name   = "AC97",
 	.suspend = psc_ac97_suspend,
 	.resume = psc_ac97_resume,
 	.playback = {
@@ -292,7 +292,7 @@ static struct snd_soc_dai psc_ac97_dai_template[] = {
 	.ops = &psc_ac97_analog_ops,
 },
 {
-	.name   = "%s AC97",
+	.name   = "SPDIF",
 	.playback = {
 		.channels_min   = 1,
 		.channels_max   = 2,
@@ -302,6 +302,8 @@ static struct snd_soc_dai psc_ac97_dai_template[] = {
 	},
 	.ops = &psc_ac97_digital_ops,
 }};
+EXPORT_SYMBOL_GPL(psc_ac97_dai);
+
 
 
 /* ---------------------------------------------------------------------
@@ -312,19 +314,27 @@ static struct snd_soc_dai psc_ac97_dai_template[] = {
 static int __devinit psc_ac97_of_probe(struct of_device *op,
 				      const struct of_device_id *match)
 {
-	int rc, id1, id2, timeout, max_reset;
-	struct psc_dma *psc_dma;
+	int rc, i, id1, id2, timeout, max_reset;
 	struct snd_ac97 ac97;
 	struct mpc52xx_psc __iomem *regs;
 
-	rc = mpc5200_audio_dma_create(op, psc_ac97_dai_template, ARRAY_SIZE(psc_ac97_dai_template));
+	rc = mpc5200_audio_dma_create(op);
 	if (rc != 0)
 		return rc;
 
+	rc = snd_soc_register_dais(psc_ac97_dai, ARRAY_SIZE(psc_ac97_dai));
+	if (rc != 0) {
+		pr_err("Failed to register DAI\n");
+		return 0;
+	}
+
 	psc_dma = dev_get_drvdata(&op->dev);
 	regs = psc_dma->psc_regs;
 	ac97.private_data = psc_dma;
 
+	for (i = 0; i < ARRAY_SIZE(psc_ac97_dai); i++)
+		psc_ac97_dai[i].private_data = psc_dma;
+
 	psc_dma->imr = 0;
 	out_be16(&psc_dma->psc_regs->isr_imr.imr, psc_dma->imr);
 
diff --git a/sound/soc/fsl/mpc5200_psc_ac97.h b/sound/soc/fsl/mpc5200_psc_ac97.h
index d028c55..4bc18c3 100644
--- a/sound/soc/fsl/mpc5200_psc_ac97.h
+++ b/sound/soc/fsl/mpc5200_psc_ac97.h
@@ -7,7 +7,9 @@
 #ifndef __SOUND_SOC_FSL_MPC52xx_PSC_AC97_H__
 #define __SOUND_SOC_FSL_MPC52xx_PSC_AC97_H__
 
-#define MPC5200_AC97_ANALOG 0
-#define MPC5200_AC97_DIGITAL 1
+extern struct snd_soc_dai psc_ac97_dai[];
+
+#define MPC5200_AC97_NORMAL 0
+#define MPC5200_AC97_SPDIF 1
 
 #endif /* __SOUND_SOC_FSL_MPC52xx_PSC_AC97_H__ */
diff --git a/sound/soc/fsl/mpc5200_psc_i2s.c b/sound/soc/fsl/mpc5200_psc_i2s.c
index b76426c..35dbb18 100644
--- a/sound/soc/fsl/mpc5200_psc_i2s.c
+++ b/sound/soc/fsl/mpc5200_psc_i2s.c
@@ -149,7 +149,7 @@ static int psc_i2s_set_sysclk(struct snd_soc_dai *cpu_dai,
 			dev_dbg(psc_dma->dev, "psc_i2s_set_sysclk(clkdiv %d freq error=%ldHz)\n",
 					clkdiv, (ppc_proc_freq / clkdiv - freq));
 
-			return mpc52xx_set_psc_clkdiv(psc_dma->dai[0].id + 1, clkdiv);
+			return mpc52xx_set_psc_clkdiv(psc_dma->id + 1, clkdiv);
 		}
 	}
 	return 0;
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index bad9d88..cc1e618 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -20,6 +20,8 @@
  *   o Support TDM on PCM and I2S
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -125,7 +127,7 @@ static int soc_pcm_apply_symmetry(struct snd_pcm_substream *substream)
 
 	if (codec_dai->symmetric_rates || cpu_dai->symmetric_rates ||
 	    machine->symmetric_rates) {
-		dev_dbg(card->dev, "Symmetry forces %dHz rate\n", 
+		dev_dbg(card->dev, "Symmetry forces %dHz rate\n",
 			machine->rate);
 
 		ret = snd_pcm_hw_constraint_minmax(substream->runtime,
diff --git a/sound/soc/soc-dapm.c b/sound/soc/soc-dapm.c
index c1222fa..f3ccbd0 100644
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@ -29,6 +29,8 @@
  *    o Support for reduced codec bias currents.
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
